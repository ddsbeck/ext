[
    {
        "id": "19de29d42e18450f",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2b77eb52527bc1f8",
        "type": "tab",
        "label": "validations",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "b71cc56c201fd4d9",
        "type": "tab",
        "label": "Function - Tasy",
        "disabled": false,
        "info": "List of functions registered with Tasy.",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "7aa3339f7ef8fc70",
        "type": "tab",
        "label": "locators",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "a9d694c6c8826f9a",
        "type": "tab",
        "label": "Version - Tasy",
        "disabled": false,
        "info": "List of versions registered with Tasy.",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "08f7d3f3cff92c9d",
        "type": "tab",
        "label": "Application - Tasy",
        "disabled": false,
        "info": "List of Applications registered with Tasy.",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "c4fb366e8c786ca2",
        "type": "tab",
        "label": "domain",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "3efdca799f3d7045",
        "type": "tab",
        "label": "Expression",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "7907e6b5a498bbb3",
        "type": "tab",
        "label": "LOGSET",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "a3d2ca30e7b9fa92",
        "type": "tab",
        "label": "Smartlink object interceptor",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "d32a443b62e791a4",
        "type": "tab",
        "label": "Object crud",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "a73857c9767dec00",
        "type": "tab",
        "label": "PLSQL Data from Tasy",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "1231ed8272120394",
        "type": "tab",
        "label": "Table Constraint CRUD",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "3002d13dd904e424",
        "type": "tab",
        "label": "Index-Index Attribute CRUD",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": "",
        "new": true
    },
    {
        "id": "a424d387f836dcc2",
        "type": "tab",
        "label": "Table Information",
        "disabled": false,
        "info": "Fetch table title and description based on table name.",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "4009fc37d06f3758",
        "type": "tab",
        "label": "Table Attributes CRUD",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "8da70f00d8b8da70",
        "type": "tab",
        "label": "Table CRUD",
        "disabled": false,
        "info": "",
        "env": [],
        "flowCategory": {
            "value": "",
            "label": "---"
        },
        "dbPanelCode": ""
    },
    {
        "id": "090410d2df2762da",
        "type": "subflow",
        "name": "Update External codes",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 50,
                "y": 30,
                "wires": []
            }
        ],
        "out": [
            {
                "x": 160,
                "y": 30,
                "wires": [
                    {
                        "id": "090410d2df2762da",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#5A9ADA"
    },
    {
        "id": "0dd0988c46710605",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Synonyms",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "567ff715c1a69d3d",
            "98a4feca9f9acffb",
            "faa2d72fc024aad9",
            "c177ad1d2d42d91a",
            "3f2ef3df942d8f8c",
            "b116548167e8cdad",
            "4c817d7a88aebf5a",
            "1ccdf07419ea2a45",
            "c9c01f7a152596b7",
            "07fb0b3fedc60808",
            "f0033015b2be22cb",
            "f950799832fadbf2"
        ],
        "x": 234,
        "y": 319
    },
    {
        "id": "c406cf76b45c56d4",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Grants",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "0f5b46a44695ddcf",
            "a73ff3c7b70d1db4",
            "87c0703d1ded95f4",
            "64224aa82b11e755",
            "b9aede379a2bb568",
            "266ef38be8dfc06e",
            "efa1b19f6861866a",
            "56264f72d43c34a9",
            "13edbf4f9f65edf5",
            "3d449b83221e14d6",
            "1617e13f3920af5e",
            "4802b95dc2017b16"
        ],
        "x": 234,
        "y": 539
    },
    {
        "id": "a97e7a334f2d4c7c",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Sync routine",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "6ff0a23422cc2cd8",
            "e5d2670a9f99f166",
            "5242d75dd0e06c9c",
            "ae52a136cf9b9231",
            "c335b84306499643",
            "472c9794a6b4832c",
            "4db601483bd0c80f",
            "3414cf6deecaea01",
            "422dca52a814d576",
            "1ca4eb7c0fc94934",
            "d5038fcce2116f4e",
            "60d27281c34e368e"
        ],
        "x": 234,
        "y": 759
    },
    {
        "id": "1b363859634c698f",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Schema",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "1d991cdd32baa7b6",
            "17b347de97192092",
            "d99d3254c4121015",
            "c9175bd228c84f42",
            "c7005e2255f37cf7",
            "e1675943808a2cb1",
            "58a855c34d3d2136",
            "ea9b4913b724db2b",
            "9136a9cc27aaf326",
            "f8310377c0c61693",
            "8d35ef8028fe2c5d",
            "02ba911d59c9d67c"
        ],
        "x": 234,
        "y": 979
    },
    {
        "id": "0e95eb5305524ee5",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Tasy Application",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "6c440449c67aad32",
            "9094dd3a83430987",
            "7061ce2d16ae21a6",
            "535f8b18d1a0c091",
            "b8d15031d898a5e3",
            "5f8bf19db98837ba",
            "64c30b240d876f4f",
            "3820e693c72fb5ca",
            "b68e68a0488bc997",
            "d151813d58708425",
            "2afac5927965fd00",
            "0dc217d23dd88074"
        ],
        "x": 234,
        "y": 99
    },
    {
        "id": "c7ff044ccc0d7d82",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Compatible Extension Version",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "c4aa825f25319263",
            "140d03aa092e3ddd",
            "d063100a6804ef1c",
            "db5fa7dfbefbf3e0",
            "a966dbd717cbf219",
            "50114e9f6857fd5f",
            "2e1ea68ca5e12714",
            "7b7c2fad9d98defd",
            "d0517e6b031c0267",
            "184ea25a29e5c753",
            "a3b350efba4ee59d",
            "affd6af3a92c55f2"
        ],
        "x": 234,
        "y": 1179
    },
    {
        "id": "043397b6cecd7b7f",
        "type": "group",
        "z": "2b77eb52527bc1f8",
        "name": "Smartlink",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "478c1563f24b2d82",
            "7c9da1726ea3c086",
            "f7b9707dbe3977b1",
            "b547b0352dac4bfa",
            "f659a9d7f9b66c7e",
            "7833a4bab7fe46ce",
            "7e9ee45112f1b31a"
        ],
        "x": 234,
        "y": 1379
    },
    {
        "id": "d601a56dce12ecce",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "11d19ea636307016",
            "92f57b14b1b023a8",
            "7c08aa4ce7e9ebde",
            "a344c9ea02c96b99",
            "7c5fb12c4a0e0eae",
            "a63bdf3aa60cd03a",
            "24116d1578ec9efd"
        ],
        "x": 574,
        "y": 19
    },
    {
        "id": "bbcb5afe267baaea",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "update",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "4df3ef0597276d29",
            "0764eb879308f075",
            "555880f58603d037",
            "f24dde30136e2a8b",
            "1d40f3a5017c9ac5",
            "5e899ba74ec9149f",
            "a54b04c036a59436",
            "efd4e3a9d84de34c",
            "f6843e1a890eeb97"
        ],
        "x": 574,
        "y": 259
    },
    {
        "id": "32f017f00d977692",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "eb9483b691a70fc7",
            "ca919b1b3867f042",
            "e3ed439c36fc62a7",
            "fb96e323bde235e1",
            "c0276031e774c067",
            "b10a8bebcd3e813f",
            "a499fe59366cdb73"
        ],
        "x": 674,
        "y": 1199
    },
    {
        "id": "dc37e4f46b8657b2",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "delete",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "955dbcb987121a06",
            "a0491d75670bffe5",
            "9bc9b095fd71d48c",
            "099e34c4e76216b3",
            "1d1aaa136c1e7afc"
        ],
        "x": 594,
        "y": 499
    },
    {
        "id": "47db16bad5ae245d",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Update attribute",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "712c2088ab2f655a",
            "b7d235441ff2ec54",
            "c3a8456994c611cf",
            "cfd614b619caaeb1",
            "89437509ce8192c9",
            "54ec63527f5bcf79",
            "7ce3ad83bf5ccf37",
            "e0473473859c898f",
            "89360ad7404a3f9e"
        ],
        "x": 634,
        "y": 1439
    },
    {
        "id": "450e07eeb5c7f731",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "9e2eead7e7c5a3cb",
            "ef2d603bd5bb04f6",
            "c515ec54228aae32",
            "8088d9baff09eee4",
            "fe2c13c1ac308d3c",
            "f717c6d5cb5f25f1",
            "341090024ee6ab72",
            "748c1ba5d6cde966"
        ],
        "x": 694,
        "y": 2399
    },
    {
        "id": "b69e07d904404906",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Update locator locale",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "897c983ef8e5ef54",
            "65784c8b27ee73f9",
            "b05f08517b57cf6a",
            "c8a41810db9f6ea0",
            "a925b3e3564f1865",
            "ad5923ddb2c1b520",
            "f6b55de8d92dd07b",
            "4e68d7e0191a47a4",
            "5b1c17ca2860378f"
        ],
        "x": 694,
        "y": 2619
    },
    {
        "id": "386d887ca77f2dac",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Delete attribute",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "41df7c9fa3403406",
            "8c396c5ce6d59479",
            "9b749f77efac8426",
            "3b35e19978d6695d",
            "d2cacf45f4f940e1",
            "1a99f4847c42b7eb",
            "ab3e58071d141dcc"
        ],
        "x": 634,
        "y": 1719
    },
    {
        "id": "c6b921eda57c6b61",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Delete locator locale",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "2a0ec96eb0648247",
            "be3f67f6bad20daf",
            "347e3cf16e3ff6fc",
            "b12e32a695ea9a98",
            "1956636b06ab1d14",
            "48c8375f8e755d1a",
            "e948e2ac6cd59b9e"
        ],
        "x": 554,
        "y": 2919
    },
    {
        "id": "9b1e301dfbd05dba",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Delete locator property",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "07f89fef5b5cb268",
            "c3d3292c48b3fe11",
            "b7500301ff72cb3a",
            "3d737760a4e6b95c",
            "1e29ecd6de7f6020",
            "c12627f26f1af7c3",
            "2fc8ba5830b21230"
        ],
        "x": 774,
        "y": 2279
    },
    {
        "id": "f840ae2ad985c926",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "4262da0af90cd459",
            "4e188b6f5ee28cb6",
            "3a52c7a0f6f06a84",
            "193fc7329cb92772",
            "918523158d90a3da",
            "174830058ce4369c",
            "09b935c8667e54af"
        ],
        "x": 694,
        "y": 1819
    },
    {
        "id": "04608bc313f59378",
        "type": "group",
        "z": "7aa3339f7ef8fc70",
        "name": "Update properties",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "cbc834c750e2893b",
            "85570377db65cbbd",
            "8a02a445e6a8ca70",
            "d7a29232b81f9936",
            "e087088c15605126",
            "6f114223f4790afb",
            "01f756ed3eb398a2",
            "b891e11400b7f4e2",
            "8a15f7f1581ab476",
            "c1c462154bce30fe"
        ],
        "x": 774,
        "y": 2019
    },
    {
        "id": "131825c58a358917",
        "type": "group",
        "z": "c4fb366e8c786ca2",
        "name": "delete customdomain",
        "style": {
            "label": true
        },
        "nodes": [
            "997f9bb23cc0db6f",
            "3b068d9fb2331c41",
            "25a66eefe74b7e5a",
            "3977a4bb001144f8",
            "3d4e573af69d5235",
            "f3ad536f8e2a7499"
        ],
        "x": 654,
        "y": 1279
    },
    {
        "id": "a90b7f5bf7c37ab5",
        "type": "group",
        "z": "c4fb366e8c786ca2",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "1f182b4266a876ff",
            "186ac3013c1886bc",
            "e41e0bcb3fbc199e",
            "c0a1c1068a73707a",
            "ed454dd9bb975759",
            "ca5113d9c455fb95",
            "830e0365228fdadc",
            "b28573493ce0c857",
            "4f2b8a72bc190d5f",
            "09fe042018e4bc6b",
            "23b3dee481fb60ab",
            "4c6912a43faa40cd",
            "0fb47f58c8b49da1",
            "b3a2c84282f305f7",
            "934f50393b0e5f3f",
            "c60549462a2a667a",
            "5b079ca36e1213be",
            "0d31ecaf40b86486",
            "3630761ae2ace26b",
            "95b6b4cddc63287b",
            "57e6bea4eab2fbd7"
        ],
        "x": 654,
        "y": 419
    },
    {
        "id": "2df6f36b010c3d58",
        "type": "group",
        "z": "c4fb366e8c786ca2",
        "name": "Update customdomain",
        "style": {
            "label": true
        },
        "nodes": [
            "e9d15d1764b57feb",
            "c0a54c02c52fcf38",
            "2e183ec7971dd9b1",
            "5dd6e52ee80f3111",
            "48edda0fe603dc15",
            "a9f1d6c5a3ae144c",
            "162b15d2a47e1adc",
            "b8e4f81041b6cf3e",
            "31e2c8646f215def",
            "5c64bc097ac0b1ff",
            "fbe67275a84c44d9",
            "affeb4859a2813a1",
            "839aa874cf6eb6c6"
        ],
        "x": 674,
        "y": 1019
    },
    {
        "id": "9e5c06a3845a7670",
        "type": "group",
        "z": "c4fb366e8c786ca2",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "58b021fbd6239ffd",
            "0ed9aa2f05d0fe40",
            "30171c406d6cb3e5",
            "55d6d77c7ea4733c",
            "89401e2004bada7e",
            "485fe4dadca0716d",
            "2cb3a0f422b2b287",
            "f36ad370458ed68b",
            "fe64d57f73f26a5e",
            "05dbac10427f9443",
            "5afee718d6de0497"
        ],
        "x": 654,
        "y": 119
    },
    {
        "id": "e1ea8da34e503e93",
        "type": "group",
        "z": "c4fb366e8c786ca2",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "94a2de3eecf70f3c",
            "dd427cc70cb21d58",
            "a768a0a4ca73df74",
            "2a2a6ea83ae4bd2d",
            "3df997a7cbc55c24",
            "82bc5a9a977be739"
        ],
        "x": 654,
        "y": 879
    },
    {
        "id": "755c36ba5c070841",
        "type": "group",
        "z": "3efdca799f3d7045",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "ac7109048e1acabd",
            "804a2bbe4bd9f929",
            "aad37fcd27a6d303",
            "7f05698c6dd8fd93",
            "730f864878f4d931",
            "a9b2a50be72e71b9",
            "c7c83e2ce6850eee",
            "65ca629e22b6f1f8",
            "4ce3a1ea1ee33ab6",
            "e58c7f30f5c6d40c",
            "337073dd54037f8d",
            "96d9d5fa94de0503"
        ],
        "x": 614,
        "y": 39
    },
    {
        "id": "9918509df341f9d9",
        "type": "group",
        "z": "3efdca799f3d7045",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "05bfc6465a5cf261",
            "2336636deaca10a6",
            "7706da1dd6e822c0",
            "7a0c2dcd9eb90c27",
            "4bf87d42f0abcbcb",
            "35e1173f13ac1ea5",
            "2f3570e906e6d75b",
            "c0b60a9dcf0f8a9f",
            "6c29c49b83260393",
            "42330a81ae251924"
        ],
        "x": 614,
        "y": 439
    },
    {
        "id": "1ba5cb9d2f020772",
        "type": "group",
        "z": "3efdca799f3d7045",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "89bc5af0266cdf24",
            "4a4f132574406495",
            "b82c280044223fdd",
            "e8a8dd1bba0e1fc0",
            "c2f10c221d18f4a4",
            "dd94b45289ea1a12",
            "66dbedc37a9d623f",
            "b472a393f8796cc0",
            "35e399db9557fb57",
            "a54dc0580ab3cf9f",
            "4684df491d6563bd",
            "ec0f74fd11f07d9e",
            "c034cafbfc86420d",
            "8bf15ec7b645bccf"
        ],
        "x": 614,
        "y": 719
    },
    {
        "id": "96cc1f5ad40b9c94",
        "type": "group",
        "z": "7907e6b5a498bbb3",
        "name": "TABELA_ATRIBUTO",
        "style": {
            "label": true
        },
        "nodes": [
            "163e4ada244a98a1",
            "a02983c141b15225",
            "f047c81ad6d3273a",
            "6ca9439ef030bdbf",
            "b88978cf25ccab6d",
            "9bcbe2ceeb95f442",
            "4d9f095dc2c62b28",
            "4cfe95b873dd8f15",
            "6bb669810cef07ae",
            "12d98ff07452155b"
        ],
        "x": 34,
        "y": 79
    },
    {
        "id": "83b9db0870f65db4",
        "type": "group",
        "z": "7907e6b5a498bbb3",
        "name": "INDICE_ATRIBUTO",
        "style": {
            "label": true
        },
        "nodes": [
            "60a88fae9a47a3e7",
            "159ab33fba317c96",
            "60614d1da3dba76b",
            "cbe329e77bd7c8b1",
            "04568b8a5624c3fa",
            "59949df6c61d3a2e",
            "29d6ec39eb76bf77",
            "2d7746e0c3c719e1",
            "feee420d794382d3",
            "c9558dfc757ec667"
        ],
        "x": 34,
        "y": 359
    },
    {
        "id": "33b99a38d0baf99c",
        "type": "group",
        "z": "7907e6b5a498bbb3",
        "name": "PARAMETERS DATABASE",
        "style": {
            "label": true
        },
        "nodes": [
            "5eeeb02eddc6e3bd",
            "beb6a4a4eb194e6e",
            "bd7f479fabdb666b",
            "89c2a29bf7a0facf",
            "ca572d6dd0a198b7",
            "4eda0338a4ba3767",
            "69b6be02dfb33d3b",
            "5f880c4e879cb0cb",
            "62818635cc57e1c0",
            "57ee43002aaca6f7"
        ],
        "x": 34,
        "y": 619
    },
    {
        "id": "eee1e0a347e3bd3e",
        "type": "group",
        "z": "a3d2ca30e7b9fa92",
        "name": "Add interceptor",
        "style": {
            "label": true
        },
        "nodes": [
            "d9ba4ced2c63cf70",
            "4c555c72c59b4df5",
            "673bcec2b7676667",
            "a80ed3ce0349d5ef",
            "ca6ebe25c66d8f96",
            "6830823db99ae3a1",
            "6b02f5ac357103ec",
            "16e1f4655ea7ec2f",
            "b7573916b6d6f7c8",
            "8eaa88757d8b6b43",
            "1a33aacaf1db9371",
            "32348a7e1aa37082",
            "9879a9c4b89331d0",
            "25554e1e6c735d22",
            "d2587609a5af0b88",
            "246f1e9bc6e34766",
            "7ba5fe3921c71ffa",
            "2e740ff59f2df0c9",
            "025c44a08f58db2c"
        ],
        "x": 54,
        "y": 59
    },
    {
        "id": "2c3089e52fa3c71e",
        "type": "group",
        "z": "a3d2ca30e7b9fa92",
        "name": "Check if object exists",
        "style": {
            "label": true
        },
        "nodes": [
            "9ff8c045928530b6",
            "6a7c51c1611498f4",
            "c098b4f962556d0c",
            "0e3de4d3e5ec3cdc",
            "8788bcb17d40432f",
            "9e38583d72bfcac9",
            "c73d6f88b9b7dd0f",
            "a884b952b20e5a19",
            "01237e56c4861a87",
            "2b045eedd665caa9"
        ],
        "x": 54,
        "y": 759
    },
    {
        "id": "2ba96343227c6957",
        "type": "group",
        "z": "a3d2ca30e7b9fa92",
        "name": "Remove interceptor",
        "style": {
            "label": true
        },
        "nodes": [
            "caf2040c1d2a10c0",
            "155462d9c08b7669",
            "ac1f04d9fa3642c2",
            "893bdd3f4d4b6a69",
            "edbbe68a02484bb3",
            "09edbfb9f6bb38c4",
            "bc398a0d9ad52ea6",
            "81ebbc27f7b7d668",
            "7c703a7353c43847",
            "9d1ef04f566f6a64",
            "3bc573f03ff1fd70",
            "30c4b1cfcdd4c08d",
            "3ea5384e2dfc0cf7",
            "ab5067d6036d216f",
            "32cf2cf8e797f580",
            "fffeadb07ca02a70",
            "9feb59fd3a907464"
        ],
        "x": 54,
        "y": 419
    },
    {
        "id": "423a05067cb3f201",
        "type": "group",
        "z": "d32a443b62e791a4",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "d6cdd2118f200322",
            "e1ce4cc28579223c",
            "6a1b2c31bfb8381d",
            "19a41e71134fd1f2",
            "3243e3af501b9562",
            "c1d107fa7e1194e1",
            "261cea9d9bdc08e3"
        ],
        "x": 754,
        "y": 619
    },
    {
        "id": "b151e691ee1cf6bb",
        "type": "group",
        "z": "d32a443b62e791a4",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "b05d98c1b3b8138f",
            "7ad44cb0c27dbf74",
            "eeb9a93b4b839341",
            "eb43f29a46a4e225",
            "3a72cd4d80c24287",
            "97fd1b31be720d58",
            "d828a784378ffb3b",
            "580030c9e66345e7",
            "e81a90658f3e1ae6",
            "1c6b9e31d8ae8e7d",
            "871aa93f93f2ecf4",
            "6942f1265cf57793",
            "a8cb7e318d6a5aeb"
        ],
        "x": 774,
        "y": 139
    },
    {
        "id": "91c30e173cf33a9d",
        "type": "group",
        "z": "d32a443b62e791a4",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "8e7e36f24cfb9d7c",
            "e1235f5a292e6046",
            "2b6907b9b8e12c9a",
            "69ca83f45abaa189",
            "1db53a9c67546fa4",
            "88080b5c4983decf",
            "9599846a221832e0"
        ],
        "x": 754,
        "y": 859
    },
    {
        "id": "9247181dca5276ec",
        "type": "group",
        "z": "d32a443b62e791a4",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5cf26b24c54ee5c4",
            "6289fa6833f74cb7",
            "2705abef542ca107",
            "73924a62434f968b",
            "b581ca0ae3f7c18d",
            "671acc9f4c86c328",
            "35b82eca8a7921b5",
            "1ce107d71277fa41",
            "52d3145f35d07bcb",
            "e42bb4a029eb9a63",
            "16e9f8735745e517",
            "9df9d76555fa34b5",
            "b37cb6d643520c30",
            "ba89d184f1700690",
            "ee5f0366a0eeee85",
            "611a4a9afe1f4599",
            "683cc194cf7895e3",
            "937d4ae06e56e0dd",
            "c19ee1507aa9d39e",
            "866aaebf62d897bb",
            "4f8327eb3d217ae6",
            "388860a01bd65b00",
            "2fe9b16276b05409",
            "c3fcc494ca28d185"
        ],
        "x": 194,
        "y": 1159
    },
    {
        "id": "356ace33e29d5aac",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "55c15e03d43b8faf",
            "c7fc6fa2e4759a47",
            "40a94d5a1f72adc0",
            "a2e74e6c60303727",
            "7f99c214a2a3acdd",
            "0c2482fce441f435",
            "e4b1869389152f55",
            "66fe80d07f7d17ea",
            "fcb228e6db2a3c81",
            "899208a238f46746",
            "5c9de12bd4f19c5f"
        ],
        "x": 714,
        "y": 1039
    },
    {
        "id": "3728acbb344e4289",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "12ec2be389dc849a",
            "e95c53f4ba8e80c9",
            "2bf8e03b01c31e4b",
            "6781e7bcb4f36bbd",
            "db774a48cab6d9d4",
            "afa9dc0c630dc7cb",
            "7d088f5a4c365591",
            "ff4feee6a0e54a74"
        ],
        "x": 714,
        "y": 1439
    },
    {
        "id": "d0805d62449a5f47",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "b5e9ec2a9d1f0413",
            "843b5f3c61ec35cd",
            "7885b19f7931a1dd",
            "0353c2457e987a8a",
            "423aa764a9d12b14",
            "55bcec5b4b91687c"
        ],
        "x": 714,
        "y": 1679
    },
    {
        "id": "3718913455d9a5f3",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "8b888356d4f2fca8",
            "f8c3eb40d5d20e2c",
            "67aa034d96936261",
            "a86817b28401e6ab",
            "28ccf0ad5db9a507",
            "6c5fdba525a7f051",
            "5624b90477402ab7",
            "a01e4b270fe118ee",
            "aa8650a511516326",
            "6c08553976948305",
            "ab9b1f40582ab841",
            "6bd02800d534153e"
        ],
        "x": 704,
        "y": 2039
    },
    {
        "id": "f4a0cfae3320e8c8",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "acfe9b3e46dbb5e6",
            "56ec4aecae4e66e2",
            "6e2d2478bcc79867",
            "52b4dbe3dcdcedbb",
            "5d889b70b4d6366c",
            "283f2911e7dd78ea",
            "cfa4b5a43e22a470"
        ],
        "x": 694,
        "y": 2439
    },
    {
        "id": "4c4afe0c4ba38ca4",
        "type": "group",
        "z": "1231ed8272120394",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "d6d4123a3d139d4b",
            "597e6edb8f1463c3",
            "9dc8d360388728da",
            "f457a5b3e9329d9f",
            "b877cadb09e3c8c1",
            "7af8296db61f62e9",
            "a2e909b2d368dcf9",
            "8831a597fbb178cc"
        ],
        "x": 694,
        "y": 2679
    },
    {
        "id": "adc486f83d346eee",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "495c7f25bc1c080e",
            "65bc2f7e5534802a",
            "eb952190a120d36e",
            "7932e1945e3c98cc",
            "a4f031b1ad2e5778",
            "97130c07c7a959ef"
        ],
        "x": 814,
        "y": 1699
    },
    {
        "id": "518a90e4a839dc06",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "89ec9cccbeac2137",
            "cb1988f942876397",
            "bde8a78b9779342f",
            "564acc97f8605983",
            "11215e9f16252101",
            "1cc37a8d71a3be59",
            "a378bb4a58bd6e5e",
            "21ce0971dfcf6674",
            "406df799b73fe900",
            "5c4659a74d8de9a2"
        ],
        "x": 834,
        "y": 1219
    },
    {
        "id": "b0e524e65a5ee9e9",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "1b415629bf25d372",
            "812ec3ba01a232fb",
            "f142f216eb87b9c1",
            "85edd6736bd138b9",
            "64d8b9d586b54854",
            "79c0e471d671e097"
        ],
        "x": 814,
        "y": 1939
    },
    {
        "id": "b8ae44978af1d74f",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "807835f53ef585df",
            "28be37970d1bcef5",
            "67862941e502c30a",
            "a80dc249249ea7ee",
            "5c299fb843dd635c",
            "8098aacc76c28133",
            "7450d7120846d6f2",
            "efe74933e9de08e9"
        ],
        "x": 774,
        "y": 2679
    },
    {
        "id": "fdf4fec44b8c443b",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "85f7dcbb843e4ccf",
            "c6866041d3ab041f",
            "0b2830e7d560fcec",
            "633b4fe423968fcc",
            "450b6bb25a8c17db",
            "246a774670732329",
            "e9493e0028dd9d28",
            "d06f9e924dedfe9b",
            "6978e6430239ce7d",
            "de3449bf3f57856b"
        ],
        "x": 774,
        "y": 2279
    },
    {
        "id": "49b648d60eb78ab9",
        "type": "group",
        "z": "3002d13dd904e424",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "c6f7357ba91d03ef",
            "ac22c51765f02565",
            "d817bc13f48f1781",
            "c666fdcc6a851554",
            "139ff7a9a9eaeef1",
            "fd05ca2de7a6d9a5"
        ],
        "x": 754,
        "y": 2919
    },
    {
        "id": "62f3b424a9c065d2",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "a43780b78a7edcd0",
            "e7da7892e07cfbc9",
            "0ab4c1aa1432d6af",
            "ca734653498ccfb7",
            "cadc99eae49b7bd2",
            "a44b9d7d84eef872",
            "b9b67870efe77755"
        ],
        "x": 694,
        "y": 1219
    },
    {
        "id": "9b93f76ab4c98f38",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "dc6d24851855684f",
            "682ee97880c9e136",
            "d15260226afdd89c",
            "c5657025a6a1a813",
            "f7e0fbf173b755d4",
            "267f1dc4a6a3039f",
            "80e546f17a1d6013"
        ],
        "x": 694,
        "y": 979
    },
    {
        "id": "fbef0734b72a74ab",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "c24dc97c5501ea98",
            "4295d45677c17ddf",
            "49d2dd137ed3be50",
            "0468e5c7b73e6c2e",
            "b88afc3c8276bca7",
            "bb5697c492bd0b5b",
            "194546372d272ef4",
            "f3434826c4e50fea",
            "e6879976b3c19ae9",
            "32aa0c197b647d24",
            "f8612a47c3d99ba4"
        ],
        "x": 714,
        "y": 519
    },
    {
        "id": "e7376fc6f9e59a30",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "0666559008aabe8b",
            "841678a80da5b90d",
            "8fa55c59f1f8f86d",
            "379295400f0da6eb",
            "b766efe046f1a407",
            "9636519d9aa7bb06"
        ],
        "x": 734,
        "y": 2299
    },
    {
        "id": "58f6b888c8f35088",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "4e464719884f1a08",
            "c94e7edd837ed63c",
            "0d0dc53b49ab4fad",
            "f0ec7d6fb4ccb9fa",
            "e2ae56f3231df3a0",
            "b822e8337c17f849"
        ],
        "x": 734,
        "y": 2059
    },
    {
        "id": "4406da3f52685afd",
        "type": "group",
        "z": "4009fc37d06f3758",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "8210357576548aa8",
            "5d09f8d81ea66018",
            "9c596c33bfb75907",
            "0df49cadb6eedeb1",
            "f4b11f55531ce06c",
            "8e2b038d2ef292bb",
            "899b9d7913c9642c",
            "e21c0075a27a1e9c",
            "e7d1c3bbe001cfd7",
            "a243e44da2331e69"
        ],
        "x": 734,
        "y": 1659
    },
    {
        "id": "d7ca8bb5969fd276",
        "type": "group",
        "z": "8da70f00d8b8da70",
        "name": "Create",
        "style": {
            "label": true,
            "stroke": "#000000"
        },
        "nodes": [
            "75018870129ee3d7",
            "ed4b125233dfa3c6",
            "57fd4c0cbfee0756",
            "5ed66df1fba3a9b6",
            "9028ecef1bec66c0",
            "ea9e88d62965bf29",
            "133c453b813f3fe9",
            "18513225f8c8751e",
            "453b9c1f9f9f9606",
            "8d15e5453f51c0ab",
            "f7e13c8971923f72"
        ],
        "x": 774,
        "y": 1039
    },
    {
        "id": "2d1d2a7788c33955",
        "type": "group",
        "z": "8da70f00d8b8da70",
        "name": "Delete",
        "style": {
            "label": true
        },
        "nodes": [
            "1d80a13883199c60",
            "2e5fbd2b1283758e",
            "6e9a17edec756d42",
            "c6a165d76547e442",
            "a633e33093089629",
            "cfca064b1922412e",
            "41b2e7be711f0b6b",
            "72f7a2c372049e61",
            "657733374bc58789",
            "834772a36e083bb2",
            "c1317c5433e01628",
            "d8838fc846cd813e",
            "e37a674867ad5e85",
            "f7520a0081eb07bb",
            "39af30a188b387c5",
            "63f4dafcd4e9812f",
            "915e847fa9dfa9ce",
            "5ee909abca91a843"
        ],
        "x": 714,
        "y": 2139
    },
    {
        "id": "2ae1f165a8cda0fd",
        "type": "group",
        "z": "8da70f00d8b8da70",
        "name": "Update",
        "style": {
            "label": true
        },
        "nodes": [
            "beb15122a109147f",
            "635edf6269f4664a",
            "51efcf6fc108001e",
            "0537615abbb57063",
            "f7399e99d7642650",
            "288318f0fa8b0cae",
            "44c3b75dcd4893dc",
            "0b078a11b7cd0d97"
        ],
        "x": 754,
        "y": 1599
    },
    {
        "id": "1d2ecf7c894813e7",
        "type": "group",
        "z": "8da70f00d8b8da70",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "68d7dadcdf1db99b",
            "6d2543a26241836b",
            "b186c6c4c870467c",
            "933c4f5ebd63edbc",
            "09c32936b7be44a0",
            "a94370d494306e43",
            "1b7eef04b794d2dd",
            "d019586dfdd7fd39",
            "2885bd84922ad4f4",
            "45625aa3fa70d280",
            "62718e8dcb5a3a54",
            "1b294d64c91aa19e",
            "ac99574c3d047f0c",
            "1b88803312ad6a6d",
            "f2c5cf6663aa0cc6",
            "ab374399f6984492",
            "d0722c8177f93dec",
            "e059ce2642a7b09a",
            "3b5ac51fca162260",
            "d8f0c2dc72ca4e2d",
            "e56192cae5c5a0ac",
            "89eaba9ad487d94f",
            "8ddef1e34ebd720a",
            "b69dfeef260432b0"
        ],
        "x": 354,
        "y": 2999
    },
    {
        "id": "faa2d72fc024aad9",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "parameters": [],
        "name": "Fetch synonyms Script",
        "func": "const synonyms_list = msg.payload.value.synonyms_list;\nconst synonyms      = msg.payload.value.synonyms;\n\nconst sql = `\n  select  count(1) as synonyms\nfrom    SYS.all_synonyms\nwhere obter_se_valor_contido(upper(synonym_name),'${synonyms_list}') = 'S'\n and owner = 'APP_EXTENSION'  \n having count(1) >= '${synonyms}'`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 360,
        "wires": [
            [
                "3f2ef3df942d8f8c",
                "1ccdf07419ea2a45"
            ]
        ]
    },
    {
        "id": "3f2ef3df942d8f8c",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "",
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "b116548167e8cdad",
                "4c817d7a88aebf5a"
            ]
        ]
    },
    {
        "id": "b116548167e8cdad",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "parameters": [],
        "name": "Response Synonyms",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.synonyms = 0;\n    if (msg.payload) {\n        if (msg.payload.select[0]) {\n            if (msg.payload.select[0].resultSet[0]) {\n                response.synonyms = msg.payload.select[0].resultSet[0].SYNONYMS;\n            }\n        }\n    }\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 360,
        "wires": [
            [
                "f950799832fadbf2",
                "c9c01f7a152596b7"
            ]
        ]
    },
    {
        "id": "f950799832fadbf2",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 440,
        "wires": []
    },
    {
        "id": "1ccdf07419ea2a45",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "c177ad1d2d42d91a",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "4c817d7a88aebf5a",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 440,
        "wires": []
    },
    {
        "id": "567ff715c1a69d3d",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Synonyms Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.SynonymsRequest",
        "groupid": "cmdk-smartlink-validations-synonyms-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 390,
        "y": 360,
        "wires": [
            [
                "98a4feca9f9acffb"
            ]
        ]
    },
    {
        "id": "07fb0b3fedc60808",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Synonyms response",
        "topic": "spinal.cmdk.settings.SynonymsResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1780,
        "y": 360,
        "wires": []
    },
    {
        "id": "98a4feca9f9acffb",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 360,
        "wires": [
            [
                "faa2d72fc024aad9",
                "c177ad1d2d42d91a"
            ]
        ]
    },
    {
        "id": "c9c01f7a152596b7",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1590,
        "y": 360,
        "wires": [
            [
                "f0033015b2be22cb",
                "07fb0b3fedc60808"
            ]
        ]
    },
    {
        "id": "f0033015b2be22cb",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0dd0988c46710605",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 440,
        "wires": []
    },
    {
        "id": "0f5b46a44695ddcf",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 580,
        "wires": [
            [
                "a73ff3c7b70d1db4",
                "87c0703d1ded95f4"
            ]
        ]
    },
    {
        "id": "a73ff3c7b70d1db4",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "parameters": [],
        "name": "Fetch grants Script",
        "func": "const LOG_APP_EXTENSION_TABLE    = msg.payload.value.LOG_APP_EXTENSION_TABLE;\nconst LOG_APP_EXTENSION_LIST     = msg.payload.value.LOG_APP_EXTENSION_LIST;\nconst QT_LIST_LOG_APP_EXTENSION  = msg.payload.value.QT_LIST_LOG_APP_EXTENSION;\n\nconst GENERATE_LOG_APP_EXT_TABLE    = msg.payload.value.GENERATE_LOG_APP_EXT_TABLE;\nconst GENERATE_LOG_APP_EXT_LIST   = msg.payload.value.GENERATE_LOG_APP_EXT_LIST;\nconst QT_LIST_GENERATE_LOG_APP_EXT  = msg.payload.value.QT_LIST_GENERATE_LOG_APP_EXT;\n\nconst CMDK_SYNC_QUEUE_TABLE    = msg.payload.value.CMDK_SYNC_QUEUE_TABLE;\nconst CMDK_SYNC_QUEUE_LIST   = msg.payload.value.CMDK_SYNC_QUEUE_LIST;\nconst QT_LIST_CMDK_SYNC_QUEUE  = msg.payload.value.QT_LIST_CMDK_SYNC_QUEUE;\n\nconst TABLE_PRIVILEGES    = msg.payload.value.TABLE_PRIVILEGES;\nconst QT_LIST_TABLE_PRIVILEGES  = msg.payload.value.QT_LIST_TABLE_PRIVILEGES;\n\nconst sql = `\n\tselect (\n\t    select  nvl(max('S'), 'N')\n\t    from    DBA_TAB_PRIVS\n\t    where   table_name = '${LOG_APP_EXTENSION_TABLE}'\n\t    and     obter_se_valor_contido(privilege, '${LOG_APP_EXTENSION_LIST}') = 'S'\n\t    and     grantee = 'APP_EXTENSION'\n\t    having count(1) >= '${QT_LIST_LOG_APP_EXTENSION}') as COUNT_LOG_APP_EXTENSION,\n\t    (   select  nvl(max('S'), 'N')\n    \t    from    DBA_TAB_PRIVS\n    \t    where   table_name = '${GENERATE_LOG_APP_EXT_TABLE}'\n    \t    and     obter_se_valor_contido(privilege,'${GENERATE_LOG_APP_EXT_LIST}') = 'S'\n    \t    and     grantee = 'APP_EXTENSION'\n\t    having count(1) >= '${QT_LIST_GENERATE_LOG_APP_EXT}') as COUNT_GENERATE_LOG_APP_EXT,\n\t    (   select  nvl(max('S'), 'N')\n            from    DBA_TAB_PRIVS \n            where   table_name = '${CMDK_SYNC_QUEUE_TABLE}'\n            and     obter_se_valor_contido(privilege,'${CMDK_SYNC_QUEUE_LIST}') = 'S' \n            and     grantee = 'APP_EXTENSION'\n\t    having count(1) >= '${QT_LIST_CMDK_SYNC_QUEUE}') as COUNT_CMDK_SYNC_QUEUE,\n\t    (   select  nvl(max('S'), 'N')\n\t        from    table_privileges \n            where   obter_se_valor_contido(table_name, '${TABLE_PRIVILEGES}') = 'S'\n            and     grantee = get_main_schema \n            and     owner = 'APP_EXTENSION'\n\t    having count(1) >= '${QT_LIST_TABLE_PRIVILEGES}') as COUNT_TABLE_PRIV from dual\n`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 580,
        "wires": [
            [
                "64224aa82b11e755",
                "efa1b19f6861866a"
            ]
        ]
    },
    {
        "id": "87c0703d1ded95f4",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 660,
        "wires": []
    },
    {
        "id": "64224aa82b11e755",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "",
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "b9aede379a2bb568",
                "266ef38be8dfc06e"
            ]
        ]
    },
    {
        "id": "b9aede379a2bb568",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "parameters": [],
        "name": "Response Grants",
        "func": "const response = {};\n\nresponse.status = msg.error ? 'ERROR' : 'SUCCESS';\nresponse.error = msg.error? msg.error.message : '';\n\nresponse.grants = msg.payload.select[0].resultSet[0];\n\nresponse.grants = response.grants.COUNT_LOG_APP_EXTENSION == 'S' &&\n                        response.grants.COUNT_GENERATE_LOG_APP_EXT == 'S' &&\n                            response.grants.COUNT_CMDK_SYNC_QUEUE == 'S' &&\n                                response.grants.COUNT_TABLE_PRIV == 'S' ? 'S' : 'N';\n\nmsg.payload = {\n  ...response,\n  headers: msg.headers\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 580,
        "wires": [
            [
                "1617e13f3920af5e",
                "56264f72d43c34a9"
            ]
        ]
    },
    {
        "id": "266ef38be8dfc06e",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 660,
        "wires": []
    },
    {
        "id": "efa1b19f6861866a",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 660,
        "wires": []
    },
    {
        "id": "56264f72d43c34a9",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1590,
        "y": 580,
        "wires": [
            [
                "3d449b83221e14d6",
                "13edbf4f9f65edf5"
            ]
        ]
    },
    {
        "id": "13edbf4f9f65edf5",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Grants response",
        "topic": "spinal.cmdk.settings.GrantsResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1770,
        "y": 580,
        "wires": []
    },
    {
        "id": "3d449b83221e14d6",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 660,
        "wires": []
    },
    {
        "id": "1617e13f3920af5e",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 660,
        "wires": []
    },
    {
        "id": "6ff0a23422cc2cd8",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 800,
        "wires": [
            [
                "e5d2670a9f99f166",
                "5242d75dd0e06c9c"
            ]
        ]
    },
    {
        "id": "e5d2670a9f99f166",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "parameters": [],
        "name": "Fetch sync routine Script",
        "func": "const sql = `\n    select  nvl(max('E'), 'S') as syncRoutine\n    from cmdk_sync_queue\n    where schema_name = 'APP_EXTENSION'\n    and \tstatus = 'E'\n`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 800,
        "wires": [
            [
                "ae52a136cf9b9231",
                "4db601483bd0c80f"
            ]
        ]
    },
    {
        "id": "5242d75dd0e06c9c",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 880,
        "wires": []
    },
    {
        "id": "ae52a136cf9b9231",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "",
        "x": 1090,
        "y": 800,
        "wires": [
            [
                "c335b84306499643",
                "472c9794a6b4832c"
            ]
        ]
    },
    {
        "id": "c335b84306499643",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "parameters": [],
        "name": "Response Sync Routine",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    if (msg.payload.select[0]) {\n        response.syncRoutine = msg.payload.select[0].resultSet[0].SYNCROUTINE;\n    } else {\n        response.syncRoutine = 'E';\n    }\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 800,
        "wires": [
            [
                "d5038fcce2116f4e",
                "3414cf6deecaea01"
            ]
        ]
    },
    {
        "id": "472c9794a6b4832c",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 880,
        "wires": []
    },
    {
        "id": "4db601483bd0c80f",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 880,
        "wires": []
    },
    {
        "id": "3414cf6deecaea01",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1570,
        "y": 800,
        "wires": [
            [
                "1ca4eb7c0fc94934",
                "422dca52a814d576"
            ]
        ]
    },
    {
        "id": "422dca52a814d576",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Sync Routine response",
        "topic": "spinal.cmdk.settings.SyncRoutineResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1770,
        "y": 800,
        "wires": []
    },
    {
        "id": "1ca4eb7c0fc94934",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 880,
        "wires": []
    },
    {
        "id": "d5038fcce2116f4e",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 880,
        "wires": []
    },
    {
        "id": "60d27281c34e368e",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "a97e7a334f2d4c7c",
        "name": "Sync Routine Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.SyncRoutineRequest",
        "groupid": "cmdk-smartlink-validations-sync-routine-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 400,
        "y": 800,
        "wires": [
            [
                "6ff0a23422cc2cd8"
            ]
        ]
    },
    {
        "id": "4802b95dc2017b16",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "c406cf76b45c56d4",
        "name": "Grants Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.GrantsRequest",
        "groupid": "cmdk-smartlink-validations-grants-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 380,
        "y": 580,
        "wires": [
            [
                "0f5b46a44695ddcf"
            ]
        ]
    },
    {
        "id": "1d991cdd32baa7b6",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 1020,
        "wires": [
            [
                "17b347de97192092",
                "d99d3254c4121015"
            ]
        ]
    },
    {
        "id": "17b347de97192092",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "parameters": [],
        "name": "Fetch schema Script",
        "func": "const schema    = msg.payload.value.schema;\n\nconst sql = `\nselect count(*) as SCHEMA \nfrom dba_users where username = '${schema}'\n`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1020,
        "wires": [
            [
                "c9175bd228c84f42",
                "58a855c34d3d2136"
            ]
        ]
    },
    {
        "id": "d99d3254c4121015",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c9175bd228c84f42",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "",
        "x": 1110,
        "y": 1020,
        "wires": [
            [
                "c7005e2255f37cf7",
                "e1675943808a2cb1"
            ]
        ]
    },
    {
        "id": "c7005e2255f37cf7",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "parameters": [],
        "name": "Response Schema",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.schema = 0;\n    if (msg.payload) {\n        if (msg.payload.select[0]) {\n            if (msg.payload.select[0].resultSet[0]) {\n                response.schema = msg.payload.select[0].resultSet[0].SCHEMA;\n            }\n        }\n    }\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1020,
        "wires": [
            [
                "8d35ef8028fe2c5d",
                "ea9b4913b724db2b"
            ]
        ]
    },
    {
        "id": "e1675943808a2cb1",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 1100,
        "wires": []
    },
    {
        "id": "58a855c34d3d2136",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1100,
        "wires": []
    },
    {
        "id": "ea9b4913b724db2b",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1590,
        "y": 1020,
        "wires": [
            [
                "f8310377c0c61693",
                "9136a9cc27aaf326"
            ]
        ]
    },
    {
        "id": "9136a9cc27aaf326",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Schema response",
        "topic": "spinal.cmdk.settings.SchemaCheckResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1770,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f8310377c0c61693",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1100,
        "wires": []
    },
    {
        "id": "8d35ef8028fe2c5d",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 1100,
        "wires": []
    },
    {
        "id": "02ba911d59c9d67c",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "1b363859634c698f",
        "name": "Schema Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.SchemaCheckRequest",
        "groupid": "cmdk-smartlink-validations-schema-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 380,
        "y": 1020,
        "wires": [
            [
                "1d991cdd32baa7b6"
            ]
        ]
    },
    {
        "id": "6c440449c67aad32",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Tasy Application Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.TasyApplicationRequest",
        "groupid": "cmdk-smartlink-validations-tasy-application-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 410,
        "y": 140,
        "wires": [
            [
                "9094dd3a83430987"
            ]
        ]
    },
    {
        "id": "9094dd3a83430987",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "7061ce2d16ae21a6",
                "535f8b18d1a0c091"
            ]
        ]
    },
    {
        "id": "7061ce2d16ae21a6",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "parameters": [],
        "name": "Fetch application Script",
        "func": "const sql = `\n  select  ie_banco as tasyApplication\nfrom    aplicacao_tasy\nwhere lower(cd_aplicacao_tasy) like 'tasy'\nand upper(ie_status_aplicacao) = 'A'`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 140,
        "wires": [
            [
                "b8d15031d898a5e3",
                "3820e693c72fb5ca"
            ]
        ]
    },
    {
        "id": "535f8b18d1a0c091",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 220,
        "wires": []
    },
    {
        "id": "b8d15031d898a5e3",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "",
        "x": 1090,
        "y": 140,
        "wires": [
            [
                "5f8bf19db98837ba",
                "64c30b240d876f4f"
            ]
        ]
    },
    {
        "id": "5f8bf19db98837ba",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "parameters": [],
        "name": "Response Application",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    if (msg.payload) {\n        if (msg.payload.select[0]) {\n            if (msg.payload.select[0].resultSet[0]) {\n                response.tasyApplication = msg.payload.select[0].resultSet[0].TASYAPPLICATION;\n            }\n        }\n    }\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 140,
        "wires": [
            [
                "0dc217d23dd88074",
                "b68e68a0488bc997"
            ]
        ]
    },
    {
        "id": "64c30b240d876f4f",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 220,
        "wires": []
    },
    {
        "id": "3820e693c72fb5ca",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 220,
        "wires": []
    },
    {
        "id": "b68e68a0488bc997",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1550,
        "y": 140,
        "wires": [
            [
                "2afac5927965fd00",
                "d151813d58708425"
            ]
        ]
    },
    {
        "id": "d151813d58708425",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Tasy Application response",
        "topic": "spinal.cmdk.settings.TasyApplicationResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1770,
        "y": 140,
        "wires": []
    },
    {
        "id": "2afac5927965fd00",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 220,
        "wires": []
    },
    {
        "id": "0dc217d23dd88074",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "0e95eb5305524ee5",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 220,
        "wires": []
    },
    {
        "id": "c4aa825f25319263",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Compatible Extension Version API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.CompatibleExtensionVersionRequest",
        "groupid": "cmdk-smartlink-validations-compatible-extension-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 400,
        "y": 1220,
        "wires": [
            [
                "140d03aa092e3ddd"
            ]
        ]
    },
    {
        "id": "140d03aa092e3ddd",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 1220,
        "wires": [
            [
                "d063100a6804ef1c",
                "db5fa7dfbefbf3e0"
            ]
        ]
    },
    {
        "id": "d063100a6804ef1c",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "parameters": [],
        "name": "Fetch Compatible Script",
        "func": "const EXTENSION            = msg.payload.value.EXTENSION;\nconst EXTENSION_VERSION     = msg.payload.value.EXTENSION_VERSION;\n\n// Add AND clauses\nlet extensionCompatibleAttribute = ``;\n\nif (EXTENSION_VERSION) {\n   extensionCompatibleAttribute += ` \n    (select  nvl(max('S'), 'N')\n         from    app_extension.swcf_upgrade_files\n         where  folder_name = 'root'\n         and    obter_se_valor_contido(JSON_VALUE(file_content, '$.guidExtension'), '${EXTENSION}') = 'S') as installedExtensionCompatible,\n    (select  nvl(max('S'), 'N')\n         from    app_extension.swcf_upgrade_files\n         where  folder_name = 'root'\n         and    obter_se_valor_contido(JSON_VALUE(file_content, '$.guidExtension'), '${EXTENSION}') = 'S'\n         and    obter_se_valor_contido(JSON_VALUE(file_content, '$.guidExtensionVersion'), '${EXTENSION_VERSION}') = 'S') installedExtensionVersionCompatible,\n    `;\n} else {\n    extensionCompatibleAttribute = `'S' as installedExtensionCompatible, 'S' as installedExtensionVersionCompatible, `;\n}\n\nconst sql = `select ${extensionCompatibleAttribute}\n                    JSON_VALUE(file_content, '$.guidExtension')         as installedGuidExtension,\n                    JSON_VALUE(file_content, '$.guidExtensionVersion')  as installedGuidExtensionVersion,\n                    JSON_VALUE(file_content, '$.extensionName')         as installedExtensionName,\n                    JSON_VALUE(file_content, '$.version')               as installedExtensionVersion\n            from    app_extension.swcf_upgrade_files\n            where   folder_name = 'root'\n`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT'\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1220,
        "wires": [
            [
                "a966dbd717cbf219",
                "50114e9f6857fd5f"
            ]
        ]
    },
    {
        "id": "a966dbd717cbf219",
        "type": "tasy data access",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "",
        "x": 1090,
        "y": 1220,
        "wires": [
            [
                "2e1ea68ca5e12714",
                "7b7c2fad9d98defd"
            ]
        ]
    },
    {
        "id": "2e1ea68ca5e12714",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "parameters": [],
        "name": "Response Compatible Extension",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.installedExtensionCompatible           = 'N';\n    response.installedExtensionVersionCompatible    = 'N';\n    response.installedGuidExtension                 = '';\n    response.installedGuidExtensionVersion          = '';\n    response.installedExtensionName                 = '';\n    response.installedExtensionVersion              = '';\n    if (msg.payload) {\n        if (msg.payload.select[0]) {\n            if (msg.payload.select[0].resultSet[0]) {\n                response.installedExtensionCompatible           = msg.payload.select[0].resultSet[0].INSTALLEDEXTENSIONCOMPATIBLE;\n                response.installedExtensionVersionCompatible    = msg.payload.select[0].resultSet[0].INSTALLEDEXTENSIONVERSIONCOMPATIBLE;\n                response.installedGuidExtension                 = msg.payload.select[0].resultSet[0].INSTALLEDGUIDEXTENSION;\n                response.installedGuidExtensionVersion          = msg.payload.select[0].resultSet[0].INSTALLEDGUIDEXTENSIONVERSION;\n                response.installedExtensionName                 = msg.payload.select[0].resultSet[0].INSTALLEDEXTENSIONNAME;\n                response.installedExtensionVersion              = msg.payload.select[0].resultSet[0].INSTALLEDEXTENSIONVERSION;\n            }\n        }\n    }\n    \n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1220,
        "wires": [
            [
                "d0517e6b031c0267",
                "184ea25a29e5c753"
            ]
        ]
    },
    {
        "id": "d0517e6b031c0267",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1590,
        "y": 1220,
        "wires": [
            [
                "a3b350efba4ee59d",
                "affd6af3a92c55f2"
            ]
        ]
    },
    {
        "id": "a3b350efba4ee59d",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Compatible Extension response",
        "topic": "spinal.cmdk.settings.CompatibleExtensionVersionResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Spinal producer local mm",
            "host": "localhost:9092",
            "guid": "080217AE7734B6F1E06344FDA8C0B34E"
        },
        "broker": "339",
        "x": 1830,
        "y": 1220,
        "wires": []
    },
    {
        "id": "db5fa7dfbefbf3e0",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1300,
        "wires": []
    },
    {
        "id": "50114e9f6857fd5f",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7b7c2fad9d98defd",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Debug After Data Access",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1300,
        "wires": []
    },
    {
        "id": "184ea25a29e5c753",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 1300,
        "wires": []
    },
    {
        "id": "affd6af3a92c55f2",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "c7ff044ccc0d7d82",
        "name": "Debug Response",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1300,
        "wires": []
    },
    {
        "id": "478c1563f24b2d82",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 630,
        "y": 1420,
        "wires": [
            [
                "7c9da1726ea3c086",
                "f7b9707dbe3977b1"
            ]
        ]
    },
    {
        "id": "7c9da1726ea3c086",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "Debug Incoming Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f7b9707dbe3977b1",
        "type": "function",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "parameters": [],
        "name": "Response Smartlink",
        "func": "msg.headers = msg.payload.headers\n\nconst response = {};\nresponse.status = 'SUCCESS';\nresponse.smartlink = 'OK';\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1420,
        "wires": [
            [
                "b547b0352dac4bfa"
            ]
        ]
    },
    {
        "id": "b547b0352dac4bfa",
        "type": "json",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1030,
        "y": 1420,
        "wires": [
            [
                "7833a4bab7fe46ce",
                "f659a9d7f9b66c7e"
            ]
        ]
    },
    {
        "id": "f659a9d7f9b66c7e",
        "type": "spinal-producer",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "Smartlink response",
        "topic": "spinal.cmdk.settings.SmartlinkResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "339",
        "x": 1270,
        "y": 1420,
        "wires": []
    },
    {
        "id": "7833a4bab7fe46ce",
        "type": "debug",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "Debug Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1500,
        "wires": []
    },
    {
        "id": "7e9ee45112f1b31a",
        "type": "spinal-consumer",
        "z": "2b77eb52527bc1f8",
        "g": "043397b6cecd7b7f",
        "name": "Smartlink Check Consumer API",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.settings.SmartlinkRequest",
        "groupid": "cmdk-smartlink-validations-smartlink-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "341",
        "x": 390,
        "y": 1420,
        "wires": [
            [
                "478c1563f24b2d82"
            ]
        ]
    },
    {
        "id": "f212bf8a5aa640a1",
        "type": "function",
        "z": "b71cc56c201fd4d9",
        "parameters": [],
        "name": "Fetch Function Script",
        "func": "const locale = msg.payload.value.locale ? msg.payload.value.locale : '';\n\nconst sql = `\n    SELECT a.cd_funcao functioncode,\n            MAX(c.ds_expressao) functionname,\n            nvl(a.ds_rota, ' ') functionroute\n    FROM  funcao                 a,\n          dic_expressao          b,\n          dic_expressao_idioma   c\n    WHERE a.ie_situacao IN ('A')\n        AND a.ie_versao_uso IN ('A')\n        AND a.cd_exp_funcao = b.cd_expressao\n        AND b.cd_expressao = c.cd_expressao\n        AND\t(upper(c.ds_locale) = nvl(UPPER('${locale}'),upper('EN_US'))) \n    GROUP BY\n        a.cd_funcao,\n        a.ds_rota\n    ORDER BY\n        functionname\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-FUNCTION-LIST';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [
            [
                "af0d95ec61895d57",
                "2b6b1a931ebb78a4"
            ]
        ]
    },
    {
        "id": "d2f5733456a66f36",
        "type": "function",
        "z": "b71cc56c201fd4d9",
        "parameters": [],
        "name": "Response function",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 120,
        "wires": [
            [
                "79c8895c741e9737",
                "e6f5712d0c54a9f0"
            ]
        ]
    },
    {
        "id": "af0d95ec61895d57",
        "type": "debug",
        "z": "b71cc56c201fd4d9",
        "name": "Debug Built SQL - Function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 220,
        "wires": []
    },
    {
        "id": "ddec011bf68ee7f7",
        "type": "debug",
        "z": "b71cc56c201fd4d9",
        "name": "Debug Incoming Payload - Function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "79c8895c741e9737",
        "type": "debug",
        "z": "b71cc56c201fd4d9",
        "name": "Debug SQL Result - Function",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 220,
        "wires": []
    },
    {
        "id": "2b6b1a931ebb78a4",
        "type": "tasy data access",
        "z": "b71cc56c201fd4d9",
        "name": "",
        "x": 890,
        "y": 120,
        "wires": [
            [
                "d2f5733456a66f36"
            ]
        ]
    },
    {
        "id": "7332696e40edda58",
        "type": "spinal-consumer",
        "z": "b71cc56c201fd4d9",
        "name": "Function Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.extension.FunctionRequest",
        "groupid": "cmdk-smartlink-function-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "b3c1341c4c6b2571"
            ]
        ]
    },
    {
        "id": "b3c1341c4c6b2571",
        "type": "json",
        "z": "b71cc56c201fd4d9",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "f212bf8a5aa640a1",
                "ddec011bf68ee7f7"
            ]
        ]
    },
    {
        "id": "e6f5712d0c54a9f0",
        "type": "json",
        "z": "b71cc56c201fd4d9",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1370,
        "y": 120,
        "wires": [
            [
                "e445f3c99a121942"
            ]
        ]
    },
    {
        "id": "e445f3c99a121942",
        "type": "spinal-producer",
        "z": "b71cc56c201fd4d9",
        "name": "Function Reply",
        "topic": "spinal.cmdk.extension.FunctionReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1560,
        "y": 120,
        "wires": []
    },
    {
        "id": "11d19ea636307016",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "parameters": [],
        "name": "Create type of locator script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sqlInsert = `insert into TIPO_LOCALIZAR( \n\t\t\tNR_SEQUENCIA,                    \n\t\t\tDS_LOCALIZADOR,       \n\t\t\tDT_ATUALIZACAO,                    \n\t\t\tNM_USUARIO,           \n\t\t\tDS_SQL,\n\t\t\tDS_ARVORE,\n\t\t\tIE_LOCALIZADOR_INTERNO,\n\t\t\tIE_APRESENTACAO,         \n\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\tNM_USUARIO_NREC,                \n\t\t\tIE_RESTRINGE_ESTAB,\n\t\t\tDS_LAYER\n\t\t)\n\t\tvalues(\n      ${dataRecord.locatorExternalId},\n     '${dataRecord.locatorDescription}',\n      sysdate,\n     '${dataRecord.createdBy}',\n     '${dataRecord.sql}',\n     '${dataRecord.tree}',\n     '${dataRecord.internalSearchTool}',\n\t '${dataRecord.formPresentation}',\n\t  sysdate,\n\t '${dataRecord.modifiedBy}',\n\t '${dataRecord.establishment}',\n\t '${dataRecord.origin}'\n\t )`;\n\nmsg.topic = sqlInsert;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "a344c9ea02c96b99",
                "a63bdf3aa60cd03a"
            ]
        ]
    },
    {
        "id": "92f57b14b1b023a8",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1290,
        "y": 60,
        "wires": [
            [
                "7c5fb12c4a0e0eae"
            ]
        ]
    },
    {
        "id": "7c08aa4ce7e9ebde",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 60,
        "wires": [
            [
                "92f57b14b1b023a8"
            ]
        ]
    },
    {
        "id": "a344c9ea02c96b99",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "name": "",
        "x": 1050,
        "y": 160,
        "wires": [
            [
                "7c08aa4ce7e9ebde",
                "24116d1578ec9efd"
            ]
        ]
    },
    {
        "id": "7c5fb12c4a0e0eae",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1460,
        "y": 60,
        "wires": []
    },
    {
        "id": "a63bdf3aa60cd03a",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 80,
        "wires": []
    },
    {
        "id": "24116d1578ec9efd",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "d601a56dce12ecce",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 140,
        "wires": []
    },
    {
        "id": "827c88af7027cc9f",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "Get Locator Req",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "f1b9c40231989b10"
            ]
        ]
    },
    {
        "id": "f1b9c40231989b10",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 200,
        "wires": [
            [
                "2cb2986e02456ca6"
            ]
        ]
    },
    {
        "id": "2cb2986e02456ca6",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 200,
        "wires": [
            [
                "11d19ea636307016"
            ],
            [
                "4df3ef0597276d29"
            ],
            [
                "099e34c4e76216b3"
            ]
        ]
    },
    {
        "id": "0ff05f2a9849f7ae",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator filter",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorQueryRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 170,
        "y": 740,
        "wires": [
            [
                "317737f81ec285a6"
            ]
        ]
    },
    {
        "id": "317737f81ec285a6",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 740,
        "wires": [
            [
                "05b93794aa4daa55"
            ]
        ]
    },
    {
        "id": "05b93794aa4daa55",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator",
        "func": "// Get query parameters\n \nconst filterParams            = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\nconst numberOfRecords = filterParams.limit || 15;\nconst nr_sequencia = filterParams.id || null;\nconst origin = filterParams.origin || null;\nconst locator_desc = (filterParams.description !== undefined && filterParams.description !== null) ? `'${filterParams.description}'` : null;\nconst sql_query = filterParams.sql;\nlet restriction = '';\nif(nr_sequencia != null){\n    restriction += `AND nr_sequencia  = ${nr_sequencia} `;\n}\nif(locator_desc != null){\n    restriction += ` AND upper (DS_LOCALIZADOR) like upper('%'|| ${locator_desc} || '%')`;\n}\n \nconst locatorFetchQuery = `\n    SELECT  a.* FROM TIPO_LOCALIZAR a\n    WHERE\n    a.DS_LAYER IS NULL\n    ${restriction}\n    ORDER BY nr_sequencia \n    fetch first ${numberOfRecords} rows only\n     `;\n\nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 740,
        "wires": [
            [
                "98b36379a63f3284",
                "59751320d63192bc"
            ]
        ]
    },
    {
        "id": "092f67479db39bc3",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 720,
        "wires": [
            [
                "f259f8cfa7548059"
            ]
        ]
    },
    {
        "id": "98b36379a63f3284",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 950,
        "y": 740,
        "wires": [
            [
                "092f67479db39bc3",
                "1304d5dce08ea31d"
            ]
        ]
    },
    {
        "id": "f259f8cfa7548059",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1410,
        "y": 720,
        "wires": [
            [
                "04de4f1ab86b3f7d"
            ]
        ]
    },
    {
        "id": "04de4f1ab86b3f7d",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.locatorQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1500,
        "y": 800,
        "wires": []
    },
    {
        "id": "59751320d63192bc",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 840,
        "wires": []
    },
    {
        "id": "1304d5dce08ea31d",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 800,
        "wires": []
    },
    {
        "id": "4df3ef0597276d29",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "parameters": [],
        "name": "Check if locator exists",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\n\nconst fetchLocator = `SELECT * FROM TIPO_LOCALIZAR WHERE nr_sequencia = '${dataRecord.locatorExternalId}' AND ds_layer IS NOT NULL`;\n\nmsg.topic = fetchLocator;\nmsg.Records = dataRecord;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 340,
        "wires": [
            [
                "f24dde30136e2a8b"
            ]
        ]
    },
    {
        "id": "0764eb879308f075",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1810,
        "y": 340,
        "wires": [
            [
                "1d40f3a5017c9ac5"
            ]
        ]
    },
    {
        "id": "555880f58603d037",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 340,
        "wires": [
            [
                "0764eb879308f075"
            ]
        ]
    },
    {
        "id": "f24dde30136e2a8b",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "name": "",
        "x": 910,
        "y": 340,
        "wires": [
            [
                "5e899ba74ec9149f"
            ]
        ]
    },
    {
        "id": "1d40f3a5017c9ac5",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1960,
        "y": 340,
        "wires": []
    },
    {
        "id": "5e899ba74ec9149f",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "efd4e3a9d84de34c"
            ],
            [
                "a54b04c036a59436"
            ]
        ]
    },
    {
        "id": "a54b04c036a59436",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "parameters": [],
        "name": "Create type of locator script",
        "func": "const dataRecord            = msg.Records;\n\nconst sqlInsert = `insert into TIPO_LOCALIZAR( \n\t\t\tNR_SEQUENCIA,                    \n\t\t\tDS_LOCALIZADOR,       \n\t\t\tDT_ATUALIZACAO,                    \n\t\t\tNM_USUARIO,           \n\t\t\tDS_SQL,\n\t\t\tDS_ARVORE,\n\t\t\tIE_LOCALIZADOR_INTERNO,\n\t\t\tIE_APRESENTACAO,         \n\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\tNM_USUARIO_NREC,                \n\t\t\tIE_RESTRINGE_ESTAB,\n\t\t\tDS_LAYER\n\t\t)\n\t\tvalues(\n      ${dataRecord.locatorExternalId},\n     '${dataRecord.locatorDescription}',\n      sysdate,\n     '${dataRecord.createdBy}',\n     '${dataRecord.sql}',\n     '${dataRecord.tree}',\n     '${dataRecord.internalSearchTool}',\n\t '${dataRecord.formPresentation}',\n\t  sysdate,\n\t '${dataRecord.modifiedBy}',\n\t '${dataRecord.establishment}',\n\t '${dataRecord.origin}'\n\t )`;\n\nmsg.topic = sqlInsert;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 360,
        "wires": [
            [
                "f6843e1a890eeb97"
            ]
        ]
    },
    {
        "id": "efd4e3a9d84de34c",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "parameters": [],
        "name": "update type of locator script",
        "func": "const dataRecord = msg.Records;\n\nconst sqlUpdate = `UPDATE TIPO_LOCALIZAR \n                   SET DS_LOCALIZADOR = '${dataRecord.locatorDescription}',\n                       DT_ATUALIZACAO = sysdate,\n                       NM_USUARIO = '${dataRecord.modifiedBy}',\n                       DS_SQL = '${dataRecord.sql}',\n                       DS_ARVORE = '${dataRecord.tree}',\n                       IE_LOCALIZADOR_INTERNO = '${dataRecord.internalSearchTool}',\n                       IE_APRESENTACAO = '${dataRecord.formPresentation}',\n                       IE_RESTRINGE_ESTAB = '${dataRecord.establishment}',\n                       DS_LAYER = '${dataRecord.origin}'\n                   WHERE nr_sequencia = ${dataRecord.locatorExternalId}\n                   AND ds_layer IS NOT NULL`;\n\nmsg.topic = sqlUpdate;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 300,
        "wires": [
            [
                "f6843e1a890eeb97"
            ]
        ]
    },
    {
        "id": "f6843e1a890eeb97",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "bbcb5afe267baaea",
        "name": "",
        "x": 1490,
        "y": 340,
        "wires": [
            [
                "555880f58603d037"
            ]
        ]
    },
    {
        "id": "d190b9d9ea8cb9e1",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator  attribute filter",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorAttributeQueryRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "9a14523d58b04ceb"
            ]
        ]
    },
    {
        "id": "9a14523d58b04ceb",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 1020,
        "wires": [
            [
                "ac253d9afd3695bc"
            ]
        ]
    },
    {
        "id": "ac253d9afd3695bc",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator attributes",
        "func": "\n // Get query parameters\nconst filterParams = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null) ? filterParams.page : 0;\nconst numberOfRecords = filterParams.limit || 15;\nconst locatorId = filterParams.locatorExternalId || null;\n\nconst sql_query = filterParams.sql;\n\nconst locatorFetchQuery = `\n    SELECT  a.* ,\n    substr(obter_desc_expressao(a.cd_exp_item), 1, 254) DS_EXP_ITEM\n    FROM    TIPO_LOCALIZAR_ATRIBUTO a,\n    TIPO_LOCALIZAR  b\n    WHERE 1 = 1 \n    AND a.NR_SEQ_TIPO_LOCALIZAR = ${locatorId}\n    and a.NR_SEQ_TIPO_LOCALIZAR = b.NR_SEQUENCIA\n    and b.DS_LAYER is null\n    ORDER BY 1\n    OFFSET ${pageNumber} ROWS\n    FETCH FIRST ${numberOfRecords} ROWS ONLY`;\n\nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1020,
        "wires": [
            [
                "d9b53683f0d8116e",
                "1abe8b17587785d2"
            ]
        ]
    },
    {
        "id": "d057b8d4150c9f1d",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1020,
        "wires": [
            [
                "cea44d9be2fdac49"
            ]
        ]
    },
    {
        "id": "d9b53683f0d8116e",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "d057b8d4150c9f1d",
                "d148910a4241113f"
            ]
        ]
    },
    {
        "id": "cea44d9be2fdac49",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1290,
        "y": 1020,
        "wires": [
            [
                "7c6271d2295df9c4"
            ]
        ]
    },
    {
        "id": "1abe8b17587785d2",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d148910a4241113f",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1100,
        "wires": []
    },
    {
        "id": "813d9c0da4f3731e",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "Get Locator Attribute Req",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorAttributeRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 150,
        "y": 1240,
        "wires": [
            [
                "7a0afa508e7a948c"
            ]
        ]
    },
    {
        "id": "7a0afa508e7a948c",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 1240,
        "wires": [
            [
                "acbfddbf47b70aec"
            ]
        ]
    },
    {
        "id": "acbfddbf47b70aec",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATEATTRIBUTE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE_ATTRIBUTE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE_ATTRIBUTE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 1240,
        "wires": [
            [
                "eb9483b691a70fc7"
            ],
            [
                "54ec63527f5bcf79"
            ],
            [
                "d2cacf45f4f940e1"
            ]
        ]
    },
    {
        "id": "eb9483b691a70fc7",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "parameters": [],
        "name": "Create type of locator attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sqlInsert = `insert into TIPO_LOCALIZAR_ATRIBUTO(\n\t\t\t\t\t\t\t\t\tNR_SEQUENCIA,\n\t\t\t\t\t\t\t\t\tNR_SEQ_TIPO_LOCALIZAR,\n\t\t\t\t\t\t\t\t\tNM_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tDS_ITEM,\n\t\t\t\t\t\t\t\t\tIE_TIPO_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tNR_SEQ_APRESENT,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\t\t\t\t\t\tNM_USUARIO,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\t\t\t\t\t\t\tNM_USUARIO_NREC,\n                                    IE_GRID,\n                                    IE_RESULTADO,\n                                    IE_TIPO_SELECAO,\n                                    CD_DOMINIO,\n                                    DS_SQL,\n                                    VL_PADRAO,\n                                    QT_TAM_GRID,\n                                    DS_ALIAS_RETORNO,\n                                    IE_FOCUS,\n                                    NR_SEQ_GRID,\n                                    QT_ALTURA,\n                                    NR_COLUNAS,\n                                    QT_DESLOCAMENTO,\n                                    DS_MASCARA,\n                                    IE_IGNORAR_ACENTUACAO,\n                                    IE_OCULTAR_RESTRICAO,\n                                    QT_TAM_ATRIB_DESC,\n                                    IE_TIPO_RESTRICAO,\n                                    IE_DESC_RESULT,\n                                    NM_ATRIBUTO_PESQUISA,\n                                    QT_TAM_COLUNA_GRID,\n                                    QT_MINIMA_CARACTER,\n                                    CD_EXP_ITEM,\n                                    IE_UTILIZA_TARJA_MAGNETICA,\n                                    QT_TAM_SPAN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\nvalues(\n\t${dataRecord.attributeExternalId},\n\t${dataRecord.locatorExternalId},\n\t\n\t'${dataRecord.attribute}',\n\t'${dataRecord.description}',\n\t'${dataRecord.typeOfAttribute}',\n\t${dataRecord.displaySequence},\n\tsysdate,\n\t'${dataRecord.createdBy}',\n\tsysdate,\n\t'${dataRecord.modifiedBy}',\n\t'${dataRecord.grid == null ? \"N\" : dataRecord.grid}',\n\t'${dataRecord.result == null ? \"N\" : dataRecord.result}',\n    '${dataRecord.selectionType}',\n    ${dataRecord.domainType},\n    '${dataRecord.sql}',\n    '${dataRecord.defaultValue}',\n    ${dataRecord.fieldSize},\n    '${dataRecord.aliasRetorno}',\n    '${dataRecord.focus == null ? \"N\" : dataRecord.focus}',\n    ${dataRecord.gridSequence},\n    ${dataRecord.height},\n    ${dataRecord.columns},\n    ${dataRecord.displacement},\n    '${dataRecord.formatMask}',\n    '${dataRecord.ignoreAccentuation == null ? \"N\" : dataRecord.ignoreAccentuation}',\n    '${dataRecord.hideRestriction == null ? \"N\" : dataRecord.hideRestriction}',\n    ${dataRecord.attributeSize},\n    ${dataRecord.restrictionType},\n    '${dataRecord.resultDescription == null ? \"N\" : dataRecord.resultDescription}',\n    '${dataRecord.localizerAttribute}',\n    ${dataRecord.gridColumnSize},\n    ${dataRecord.minimumNumber},\n    ${dataRecord.expression},\n    '${dataRecord.usesMagneticStripe == null ? \"N\" : dataRecord.usesMagneticStripe}',\n    ${dataRecord.gwtSpanSize}\n\t\n\t\n)`;\nmsg.topic = sqlInsert;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1340,
        "wires": [
            [
                "fb96e323bde235e1",
                "b10a8bebcd3e813f"
            ]
        ]
    },
    {
        "id": "ca919b1b3867f042",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1390,
        "y": 1240,
        "wires": [
            [
                "c0276031e774c067"
            ]
        ]
    },
    {
        "id": "e3ed439c36fc62a7",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n         \"attributeExternalId\": msg.Records.attributeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1240,
        "wires": [
            [
                "ca919b1b3867f042"
            ]
        ]
    },
    {
        "id": "fb96e323bde235e1",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "name": "",
        "x": 1150,
        "y": 1340,
        "wires": [
            [
                "e3ed439c36fc62a7",
                "a499fe59366cdb73"
            ]
        ]
    },
    {
        "id": "c0276031e774c067",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorAttributeResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1560,
        "y": 1240,
        "wires": []
    },
    {
        "id": "b10a8bebcd3e813f",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a499fe59366cdb73",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "32f017f00d977692",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 1320,
        "wires": []
    },
    {
        "id": "955dbcb987121a06",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "dc37e4f46b8657b2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1330,
        "y": 540,
        "wires": [
            [
                "9bc9b095fd71d48c"
            ]
        ]
    },
    {
        "id": "a0491d75670bffe5",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "dc37e4f46b8657b2",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecord = msg.Records\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 540,
        "wires": [
            [
                "955dbcb987121a06"
            ]
        ]
    },
    {
        "id": "9bc9b095fd71d48c",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "dc37e4f46b8657b2",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 540,
        "wires": []
    },
    {
        "id": "099e34c4e76216b3",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "dc37e4f46b8657b2",
        "parameters": [],
        "name": "delete type of locator script",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\n\nconst sqlDelete = `DELETE TIPO_LOCALIZAR \n                   WHERE nr_sequencia = ${dataRecord.locatorExternalId}`;\n\nmsg.topic = sqlDelete;\nmsg.event = communicationTopic.eventType;\nmsg.Records = dataRecord;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 540,
        "wires": [
            [
                "1d1aaa136c1e7afc"
            ]
        ]
    },
    {
        "id": "1d1aaa136c1e7afc",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "dc37e4f46b8657b2",
        "name": "",
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "a0491d75670bffe5"
            ]
        ]
    },
    {
        "id": "712c2088ab2f655a",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "parameters": [],
        "name": "Create type of locator attribute script",
        "func": "const dataRecord            = msg.Records;\n\nconst sqlInsert = `insert into TIPO_LOCALIZAR_ATRIBUTO(\n\t\t\t\t\t\t\t\t\tNR_SEQUENCIA,\n\t\t\t\t\t\t\t\t\tNR_SEQ_TIPO_LOCALIZAR,\n\t\t\t\t\t\t\t\t\tNM_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tDS_ITEM,\n\t\t\t\t\t\t\t\t\tIE_TIPO_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tNR_SEQ_APRESENT,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\t\t\t\t\t\tNM_USUARIO,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\t\t\t\t\t\t\tNM_USUARIO_NREC,\n                                    IE_GRID,\n                                    IE_RESULTADO,\n                                    IE_TIPO_SELECAO,\n                                    CD_DOMINIO,\n                                    DS_SQL,\n                                    VL_PADRAO,\n                                    QT_TAM_GRID,\n                                    DS_ALIAS_RETORNO,\n                                    IE_FOCUS,\n                                    NR_SEQ_GRID,\n                                    QT_ALTURA,\n                                    NR_COLUNAS,\n                                    QT_DESLOCAMENTO,\n                                    DS_MASCARA,\n                                    IE_IGNORAR_ACENTUACAO,\n                                    IE_OCULTAR_RESTRICAO,\n                                    QT_TAM_ATRIB_DESC,\n                                    IE_TIPO_RESTRICAO,\n                                    IE_DESC_RESULT,\n                                    NM_ATRIBUTO_PESQUISA,\n                                    QT_TAM_COLUNA_GRID,\n                                    QT_MINIMA_CARACTER,\n                                    CD_EXP_ITEM,\n                                    IE_UTILIZA_TARJA_MAGNETICA,\n                                    QT_TAM_SPAN\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\nvalues(\n\t${dataRecord.attributeExternalId},\n\t${dataRecord.locatorExternalId},\n\t\n\t'${dataRecord.attribute}',\n\t'${dataRecord.description}',\n\t'${dataRecord.typeOfAttribute}',\n\t${dataRecord.displaySequence},\n\tsysdate,\n\t'${dataRecord.createdBy}',\n\tsysdate,\n\t'${dataRecord.modifiedBy}',\n\t'${dataRecord.grid == null ? \"N\" : dataRecord.grid}',\n\t'${dataRecord.result == null ? \"N\" : dataRecord.result}',\n    '${dataRecord.selectionType}',\n    ${dataRecord.domainType},\n    '${dataRecord.sql}',\n    '${dataRecord.defaultValue}',\n    ${dataRecord.fieldSize},\n    '${dataRecord.aliasRetorno}',\n    '${dataRecord.focus == null ? \"N\" : dataRecord.focus}',\n    ${dataRecord.gridSequence},\n    ${dataRecord.height},\n    ${dataRecord.columns},\n    ${dataRecord.displacement},\n    '${dataRecord.formatMask}',\n    '${dataRecord.ignoreAccentuation == null ? \"N\" : dataRecord.ignoreAccentuation}',\n    '${dataRecord.hideRestriction == null ? \"N\" : dataRecord.hideRestriction}',\n    ${dataRecord.attributeSize},\n    ${dataRecord.restrictionType},\n    '${dataRecord.resultDescription == null ? \"N\" : dataRecord.resultDescription}',\n    '${dataRecord.localizerAttribute}',\n    ${dataRecord.gridColumnSize},\n    ${dataRecord.minimumNumber},\n    ${dataRecord.expression},\n    '${dataRecord.usesMagneticStripe == null ? \"N\" : dataRecord.usesMagneticStripe}',\n    ${dataRecord.gwtSpanSize}\n\t\n\t\n)`;\nmsg.topic = sqlInsert;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1580,
        "wires": [
            [
                "cfd614b619caaeb1"
            ]
        ]
    },
    {
        "id": "b7d235441ff2ec54",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2030,
        "y": 1520,
        "wires": [
            [
                "89437509ce8192c9"
            ]
        ]
    },
    {
        "id": "c3a8456994c611cf",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n         \"attributeExternalId\": msg.Records.attributeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1520,
        "wires": [
            [
                "b7d235441ff2ec54"
            ]
        ]
    },
    {
        "id": "cfd614b619caaeb1",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "name": "",
        "x": 1710,
        "y": 1520,
        "wires": [
            [
                "c3a8456994c611cf"
            ]
        ]
    },
    {
        "id": "89437509ce8192c9",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorAttributeResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2200,
        "y": 1520,
        "wires": []
    },
    {
        "id": "54ec63527f5bcf79",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "parameters": [],
        "name": "Check if locator attribute exists",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sql = `select *from TIPO_LOCALIZAR_ATRIBUTO  where NR_SEQUENCIA = ${dataRecord.attributeExternalId};`;\n\nmsg.topic = sql;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1540,
        "wires": [
            [
                "7ce3ad83bf5ccf37"
            ]
        ]
    },
    {
        "id": "7ce3ad83bf5ccf37",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "name": "",
        "x": 1050,
        "y": 1540,
        "wires": [
            [
                "e0473473859c898f"
            ]
        ]
    },
    {
        "id": "e0473473859c898f",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 1540,
        "wires": [
            [
                "89360ad7404a3f9e"
            ],
            [
                "712c2088ab2f655a"
            ]
        ]
    },
    {
        "id": "89360ad7404a3f9e",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "47db16bad5ae245d",
        "parameters": [],
        "name": "update type of locator attribute script",
        "func": "const dataRecord = msg.Records;\n\nconst sqlUpdate = `update TIPO_LOCALIZAR_ATRIBUTO set\n                    NM_ATRIBUTO = '${dataRecord.attribute}',\n                    DS_ITEM = '${dataRecord.description}',\n                    IE_TIPO_ATRIBUTO = '${dataRecord.typeOfAttribute}',\n                    NR_SEQ_APRESENT = ${dataRecord.displaySequence},\n                    DT_ATUALIZACAO = sysdate,\n                    NM_USUARIO = '${dataRecord.modifiedBy}',\n                    IE_GRID = '${dataRecord.grid == null ? \"N\" : dataRecord.grid}',\n                    IE_RESULTADO = '${dataRecord.result == null ? \"N\" : dataRecord.result}',\n                    IE_TIPO_SELECAO = '${dataRecord.selectionType}',\n                    CD_DOMINIO = ${dataRecord.domainType},\n                    DS_SQL = '${dataRecord.sql}',\n                    VL_PADRAO = '${dataRecord.defaultValue}',\n                    QT_TAM_GRID = ${dataRecord.fieldSize},\n                    DS_ALIAS_RETORNO = '${dataRecord.aliasRetorno}',\n                    IE_FOCUS = '${dataRecord.focus == null ? \"N\" : dataRecord.focus}',\n                    NR_SEQ_GRID = ${dataRecord.gridSequence},\n                    QT_ALTURA = ${dataRecord.height},\n                    NR_COLUNAS = ${dataRecord.columns},\n                    QT_DESLOCAMENTO = ${dataRecord.displacement},\n                    DS_MASCARA = '${dataRecord.formatMask}',\n                    IE_IGNORAR_ACENTUACAO = '${dataRecord.ignoreAccentuation == null ? \"N\" : dataRecord.ignoreAccentuation}',\n                    IE_OCULTAR_RESTRICAO = '${dataRecord.hideRestriction == null ? \"N\" : dataRecord.hideRestriction}',\n                    QT_TAM_ATRIB_DESC = ${dataRecord.attributeSize},\n                    IE_TIPO_RESTRICAO = ${dataRecord.restrictionType},\n                    IE_DESC_RESULT = '${dataRecord.resultDescription == null ? \"N\" : dataRecord.resultDescription}',\n                    NM_ATRIBUTO_PESQUISA = '${dataRecord.localizerAttribute}',\n                    QT_TAM_COLUNA_GRID = ${dataRecord.gridColumnSize},\n                    QT_MINIMA_CARACTER = ${dataRecord.minimumNumber},\n                    CD_EXP_ITEM = ${dataRecord.expression},\n                    IE_UTILIZA_TARJA_MAGNETICA = '${dataRecord.usesMagneticStripe == null ? \"N\" : dataRecord.usesMagneticStripe}',\n                    QT_TAM_SPAN = ${dataRecord.gwtSpanSize}\n                    where NR_SEQUENCIA = ${dataRecord.attributeExternalId}\n                    and NR_SEQ_TIPO_LOCALIZAR = ${dataRecord.locatorExternalId}`;\n\nmsg.topic = sqlUpdate;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1480,
        "wires": [
            [
                "cfd614b619caaeb1"
            ]
        ]
    },
    {
        "id": "bf7a7b8e30100dcb",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "Get Locator Properties Req",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertiesRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 190,
        "y": 1920,
        "wires": [
            [
                "2c158e452e76424b"
            ]
        ]
    },
    {
        "id": "2c158e452e76424b",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 1920,
        "wires": [
            [
                "c7d5485863f8a532"
            ]
        ]
    },
    {
        "id": "c7d5485863f8a532",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE_LOCATOR_PROPERTIES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE_LOCATOR_PROPERTIES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE_LOCATOR_PROPERTIES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 1920,
        "wires": [
            [
                "4262da0af90cd459"
            ],
            [
                "6f114223f4790afb"
            ],
            [
                "1e29ecd6de7f6020"
            ]
        ]
    },
    {
        "id": "7c6271d2295df9c4",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.locatorAttributeQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 1020,
        "wires": []
    },
    {
        "id": "07dadd74872cde3c",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "Create Locator Locale Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorLocaleRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 230,
        "y": 2480,
        "wires": [
            [
                "93145a77c5779e4c"
            ]
        ]
    },
    {
        "id": "93145a77c5779e4c",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 2480,
        "wires": [
            [
                "264dbd66ad691b22"
            ]
        ]
    },
    {
        "id": "264dbd66ad691b22",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATELOCALE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATELOCALE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE_LOCALE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 590,
        "y": 2480,
        "wires": [
            [
                "9e2eead7e7c5a3cb"
            ],
            [
                "ad5923ddb2c1b520"
            ],
            [
                "1956636b06ab1d14"
            ]
        ]
    },
    {
        "id": "8ebfd4e449174532",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "threefieldlocator",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.ThreeFieldLocatorRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 100,
        "y": 3080,
        "wires": [
            [
                "0e7674c25d860196"
            ]
        ]
    },
    {
        "id": "0e7674c25d860196",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 3080,
        "wires": [
            [
                "40d883bc7c7a62fb"
            ]
        ]
    },
    {
        "id": "40d883bc7c7a62fb",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch threeFieldLocator",
        "func": "\n // Get query parameters\n const filterParams = msg.payload.value;\n const pageNumber = (filterParams.page !== undefined && filterParams.page !== null) ? filterParams.page : 0;\nconst numberOfRecords = filterParams.limit || 15;\nconst nr_sequencia = filterParams.sequence || null;\nconst locator_desc = (filterParams.description !== undefined && filterParams.description !== null) ? `'${filterParams.description}'` : null;\nlet restriction = '';\nif(nr_sequencia != null){\n    restriction += `WHERE nr_sequencia  = ${nr_sequencia} `;\n}\nif(locator_desc != null){\n    restriction += `WHERE upper (DS_LOCALIZADOR) like upper('%'|| ${locator_desc} || '%')`;\n}\n \nconst locatorFetchQuery = `\n     select a.nr_sequencia ,a.ds_localizador, \n     (SELECT COUNT(*) FROM three_fields_locator) AS total_records\n     from three_fields_locator a\n    ${restriction}\n    ORDER BY nr_sequencia \n    offset (${pageNumber} * ${numberOfRecords}) rows \n    fetch first ${numberOfRecords} rows only `;\n\n\nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3080,
        "wires": [
            [
                "d1334be936d1f52e",
                "a49d7c027f8664d2"
            ]
        ]
    },
    {
        "id": "129af3608274308e",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 3080,
        "wires": [
            [
                "ee521a14a82b04f9"
            ]
        ]
    },
    {
        "id": "d1334be936d1f52e",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 810,
        "y": 3080,
        "wires": [
            [
                "129af3608274308e",
                "12b4fe4b8ff4d457"
            ]
        ]
    },
    {
        "id": "ee521a14a82b04f9",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1290,
        "y": 3080,
        "wires": [
            [
                "a8a0a57c7c7189f6"
            ]
        ]
    },
    {
        "id": "a49d7c027f8664d2",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 3160,
        "wires": []
    },
    {
        "id": "12b4fe4b8ff4d457",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 3160,
        "wires": []
    },
    {
        "id": "a8a0a57c7c7189f6",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.ThreeFieldLocatorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 3080,
        "wires": []
    },
    {
        "id": "9e2eead7e7c5a3cb",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "parameters": [],
        "name": "Create locator locale script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sqlInsert = `insert into LOCATOR_LOCALE(\n\t\t\t\t\t\t\t\t\tNR_SEQUENCIA,\n\t\t\t\t\t\t\t\t\tNM_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tDS_LOCALE,\n\t\t\t\t\t\t\t\t\tNR_SEQ_TIPO_LOCALIZAR,\n\t\t\t\t\t\t\t\t\tCD_LOCALIZADOR_TFL,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\t\t\t\t\t\tNM_USUARIO,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\t\t\t\t\t\t\tNM_USUARIO_NREC,\n\t\t\t\t\t\t\t\t\tCD_LOCALIZADOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\nvalues(\n\t${dataRecord.localeExternalId},\n\t'${dataRecord.locale}',\n\t'${dataRecord.description}',\n\t${dataRecord.locatorExternalId},\n\t${dataRecord.threeFieldLocatorExternalId},\n\t\n\tsysdate,\n\t'${dataRecord.createdBy}',\n\tsysdate,\n\t'${dataRecord.modifiedBy}',\n\t${dataRecord.searchtoolLocatorExternalId}\n\t\n)`;\nmsg.topic = sqlInsert;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2540,
        "wires": [
            [
                "8088d9baff09eee4",
                "f717c6d5cb5f25f1"
            ]
        ]
    },
    {
        "id": "ef2d603bd5bb04f6",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1410,
        "y": 2440,
        "wires": [
            [
                "fe2c13c1ac308d3c"
            ]
        ]
    },
    {
        "id": "c515ec54228aae32",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"localeExternalId\": msg.Records.localeExternalId,\n         \"locatorExternalId\": msg.Records.locatorExternalId\n        \n    };\n    \n\nresponse.dataRecordResult   = dataRecordResult;\n\nconst result = msg.payload;\n \nif(result.hasOwnProperty('error')){\n   response.status = \"ERROR\"\n}\nelse{\n    response.status = \"SUCCESS\"\n     response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 2440,
        "wires": [
            [
                "ef2d603bd5bb04f6",
                "748c1ba5d6cde966"
            ]
        ]
    },
    {
        "id": "8088d9baff09eee4",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "",
        "x": 1170,
        "y": 2540,
        "wires": [
            [
                "c515ec54228aae32",
                "341090024ee6ab72"
            ]
        ]
    },
    {
        "id": "fe2c13c1ac308d3c",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "locatorlocaleresponse",
        "topic": "spinal.cmdk.locator.LocatorLocaleResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1600,
        "y": 2440,
        "wires": []
    },
    {
        "id": "f717c6d5cb5f25f1",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 2460,
        "wires": []
    },
    {
        "id": "341090024ee6ab72",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 2540,
        "wires": []
    },
    {
        "id": "748c1ba5d6cde966",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "450e07eeb5c7f731",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1400,
        "y": 2480,
        "wires": []
    },
    {
        "id": "897c983ef8e5ef54",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "parameters": [],
        "name": "Create locator locale script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sqlInsert = `insert into LOCATOR_LOCALE(\n\t\t\t\t\t\t\t\t\tNR_SEQUENCIA,\n\t\t\t\t\t\t\t\t\tNM_ATRIBUTO,\n\t\t\t\t\t\t\t\t\tDS_LOCALE,\n\t\t\t\t\t\t\t\t\tNR_SEQ_TIPO_LOCALIZAR,\n\t\t\t\t\t\t\t\t\tCD_LOCALIZADOR_TFL,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\t\t\t\t\t\tNM_USUARIO,\n\t\t\t\t\t\t\t\t\tDT_ATUALIZACAO_NREC,                            \n\t\t\t\t\t\t\t\t\tNM_USUARIO_NREC,\n\t\t\t\t\t\t\t\t\tCD_LOCALIZADOR\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t)\n\nvalues(\n\t${dataRecord.localeExternalId},\n\t'${dataRecord.locale}',\n\t'${dataRecord.description}',\n\t${dataRecord.locatorExternalId},\n\t${dataRecord.threeFieldLocatorExternalId},\n\t\n\tsysdate,\n\t'${dataRecord.createdBy}',\n\tsysdate,\n\t'${dataRecord.modifiedBy}',\n\t${dataRecord.searchtoolLocatorExternalId}\n\t\n)`;\nmsg.topic = sqlInsert;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 2800,
        "wires": [
            [
                "c8a41810db9f6ea0"
            ]
        ]
    },
    {
        "id": "65784c8b27ee73f9",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1930,
        "y": 2740,
        "wires": [
            [
                "a925b3e3564f1865"
            ]
        ]
    },
    {
        "id": "b05f08517b57cf6a",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"locatorExternalId\": msg.Records.locatorExternalId,\n\t    \"localeExternalId\": msg.Records.localeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 2740,
        "wires": [
            [
                "65784c8b27ee73f9"
            ]
        ]
    },
    {
        "id": "c8a41810db9f6ea0",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "name": "",
        "x": 1590,
        "y": 2740,
        "wires": [
            [
                "b05f08517b57cf6a"
            ]
        ]
    },
    {
        "id": "a925b3e3564f1865",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "name": "locator locale response",
        "topic": "spinal.cmdk.locator.LocatorLocaleResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2110,
        "y": 2740,
        "wires": []
    },
    {
        "id": "ad5923ddb2c1b520",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "parameters": [],
        "name": "Check if locator locale exists",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\n\nconst sql = `select *from LOCATOR_LOCALE  where NR_SEQUENCIA = ${dataRecord.localeExternalId};`;\n\nmsg.topic = sql;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 2760,
        "wires": [
            [
                "f6b55de8d92dd07b"
            ]
        ]
    },
    {
        "id": "f6b55de8d92dd07b",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "name": "",
        "x": 1050,
        "y": 2660,
        "wires": [
            [
                "4e68d7e0191a47a4"
            ]
        ]
    },
    {
        "id": "4e68d7e0191a47a4",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 2760,
        "wires": [
            [
                "5b1c17ca2860378f"
            ],
            [
                "897c983ef8e5ef54"
            ]
        ]
    },
    {
        "id": "5b1c17ca2860378f",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "b69e07d904404906",
        "parameters": [],
        "name": "update locator locale script",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.Records;\n\nconst sqlUpdate = `UPDATE LOCATOR_LOCALE\n                   SET NM_ATRIBUTO = '${dataRecord.locale}',\n                       DS_LOCALE = '${dataRecord.description}',\n                       NR_SEQ_TIPO_LOCALIZAR = ${dataRecord.locatorExternalId},\n                       CD_LOCALIZADOR_TFL = ${dataRecord.threeFieldLocatorExternalId},\n                       DT_ATUALIZACAO = sysdate,\n                       NM_USUARIO = '${dataRecord.modifiedBy}',\n                       CD_LOCALIZADOR = ${dataRecord.searchtoolLocatorExternalId}\n                   where NR_SEQUENCIA = ${dataRecord.localeExternalId}`;\n\t\t\t\t   \n\t\t\t\t   \nmsg.topic = sqlUpdate;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 2700,
        "wires": [
            [
                "c8a41810db9f6ea0"
            ]
        ]
    },
    {
        "id": "f5ec9fd1c5060cdd",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator finder by locale",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorLocaleQueryRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 120,
        "y": 3340,
        "wires": [
            [
                "71917aa1fee876d4"
            ]
        ]
    },
    {
        "id": "71917aa1fee876d4",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 3340,
        "wires": [
            [
                "0ab8df8c69bbde2f"
            ]
        ]
    },
    {
        "id": "0ab8df8c69bbde2f",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator Finder By Locale",
        "func": "// Get query parameters\nconst filterParams = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null) ? filterParams.page : 0;\nconst numberOfRecords = filterParams.limit || 15;\nconst locatorId = filterParams.locatorExternalId || null;\n \nconst sql_query = filterParams.sql;\n \nconst locatorFetchQuery = `\n    SELECT  a.*\n    FROM    LOCATOR_LOCALE a\n    WHERE   1 = 1 \n    AND     NR_SEQ_TIPO_LOCALIZAR = ${locatorId}\n    ORDER BY 1\n    OFFSET ${pageNumber} ROWS\n    FETCH FIRST ${numberOfRecords} ROWS ONLY`;\n \nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 3340,
        "wires": [
            [
                "c3245f100ca0bf08",
                "8359255dee14623a"
            ]
        ]
    },
    {
        "id": "2212d6a91057596b",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 3340,
        "wires": [
            [
                "09bb17f85ab03e6b",
                "cd03bae86beaee62"
            ]
        ]
    },
    {
        "id": "c3245f100ca0bf08",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 810,
        "y": 3340,
        "wires": [
            [
                "2212d6a91057596b",
                "7ede6fb8c75f16f8"
            ]
        ]
    },
    {
        "id": "09bb17f85ab03e6b",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1290,
        "y": 3340,
        "wires": [
            [
                "69b32ae04eac9b63"
            ]
        ]
    },
    {
        "id": "cd03bae86beaee62",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 3260,
        "wires": []
    },
    {
        "id": "8359255dee14623a",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3260,
        "wires": []
    },
    {
        "id": "7ede6fb8c75f16f8",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 3260,
        "wires": []
    },
    {
        "id": "69b32ae04eac9b63",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.locatorLocaleQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1500,
        "y": 3340,
        "wires": []
    },
    {
        "id": "5a31a5babb4fe20b",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator properties",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertiesQueryRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 100,
        "y": 3560,
        "wires": [
            [
                "715a1bba6a858640"
            ]
        ]
    },
    {
        "id": "715a1bba6a858640",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 3560,
        "wires": [
            [
                "e2e5039abc839889"
            ]
        ]
    },
    {
        "id": "e2e5039abc839889",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator properties",
        "func": "// Get query parameters\nconst filterParams = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null) ? filterParams.page : 0;\nconst numberOfRecords = filterParams.limit || 15;\nconst locatorId = filterParams.locatorExternalId || null;\n \nconst sql_query = filterParams.sql;\n \nconst locatorFetchQuery = `\n    SELECT  a.* ,\n    obter_desc_estab_adicional(a.cd_estabelecimento) as establishment,    \n    obter_desc_funcao(cd_funcao) as function_name,    \n    obter_desc_perfil(cd_perfil) as perfil   \n    FROM   TIPO_LOCALIZADOR_CLIENTE a, TIPO_LOCALIZAR  b   \n    where  1 = 1     \n    and a.NR_SEQ_LOCALIZADOR = ${locatorId}    \n    and a.NR_SEQ_LOCALIZADOR = b.NR_SEQUENCIA   \n    and  b.DS_LAYER is null    \n    ORDER BY 1   \n    OFFSET ${pageNumber} ROWS   \n    FETCH FIRST ${numberOfRecords} ROWS ONLY `;\n \nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 3560,
        "wires": [
            [
                "2ac7f05353e423b6",
                "a4b5288ef1673d01"
            ]
        ]
    },
    {
        "id": "8bd6a5eb7f05efb4",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 3560,
        "wires": [
            [
                "4f63ec8a3c3c2b74",
                "bcc5388c2a19cff7"
            ]
        ]
    },
    {
        "id": "2ac7f05353e423b6",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 750,
        "y": 3560,
        "wires": [
            [
                "8bd6a5eb7f05efb4",
                "3139471ab892ccce"
            ]
        ]
    },
    {
        "id": "4f63ec8a3c3c2b74",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1290,
        "y": 3560,
        "wires": [
            [
                "8c281b829848ce13"
            ]
        ]
    },
    {
        "id": "8c281b829848ce13",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.locatorPropertiesQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1580,
        "y": 3560,
        "wires": []
    },
    {
        "id": "bcc5388c2a19cff7",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 3480,
        "wires": []
    },
    {
        "id": "a4b5288ef1673d01",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 3480,
        "wires": []
    },
    {
        "id": "3139471ab892ccce",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 3480,
        "wires": []
    },
    {
        "id": "41df7c9fa3403406",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2030,
        "y": 1760,
        "wires": [
            [
                "3b35e19978d6695d"
            ]
        ]
    },
    {
        "id": "8c396c5ce6d59479",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n         \"attributeExternalId\": msg.Records.attributeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 1760,
        "wires": [
            [
                "41df7c9fa3403406"
            ]
        ]
    },
    {
        "id": "9b749f77efac8426",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "name": "",
        "x": 1710,
        "y": 1760,
        "wires": [
            [
                "8c396c5ce6d59479"
            ]
        ]
    },
    {
        "id": "3b35e19978d6695d",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorAttributeResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2200,
        "y": 1760,
        "wires": []
    },
    {
        "id": "d2cacf45f4f940e1",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "parameters": [],
        "name": "Check if locator attribute exists",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sql = `select *from TIPO_LOCALIZAR_ATRIBUTO  where NR_SEQUENCIA = ${dataRecord.attributeExternalId};`;\n\nmsg.topic = sql;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1760,
        "wires": [
            [
                "1a99f4847c42b7eb"
            ]
        ]
    },
    {
        "id": "1a99f4847c42b7eb",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "name": "",
        "x": 1050,
        "y": 1760,
        "wires": [
            [
                "ab3e58071d141dcc"
            ]
        ]
    },
    {
        "id": "ab3e58071d141dcc",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "386d887ca77f2dac",
        "parameters": [],
        "name": "delete type of locator attribute script",
        "func": "const dataRecord = msg.Records;\n\nconst sqlDelete = `delete from TIPO_LOCALIZAR_ATRIBUTO\n                   where NR_SEQUENCIA = ${dataRecord.attributeExternalId}\n                   and NR_SEQ_TIPO_LOCALIZAR = ${dataRecord.locatorExternalId}`;\n\nmsg.topic = sqlDelete;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1760,
        "wires": [
            [
                "9b749f77efac8426"
            ]
        ]
    },
    {
        "id": "2a0ec96eb0648247",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1950,
        "y": 2960,
        "wires": [
            [
                "b12e32a695ea9a98"
            ]
        ]
    },
    {
        "id": "be3f67f6bad20daf",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"locatorExternalId\": msg.Records.locatorExternalId,\n         \"localeExternalId\": msg.Records.localeExternalId\n    };\n\n \nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 2960,
        "wires": [
            [
                "2a0ec96eb0648247"
            ]
        ]
    },
    {
        "id": "347e3cf16e3ff6fc",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "name": "",
        "x": 1630,
        "y": 2960,
        "wires": [
            [
                "be3f67f6bad20daf"
            ]
        ]
    },
    {
        "id": "b12e32a695ea9a98",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "name": "locator locale response",
        "topic": "spinal.cmdk.locator.LocatorLocaleResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2150,
        "y": 2960,
        "wires": []
    },
    {
        "id": "1956636b06ab1d14",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "parameters": [],
        "name": "Check if locator locale exists",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n \nconst sql = `select *from LOCATOR_LOCALE  where NR_SEQUENCIA = ${dataRecord.localeExternalId};`;\n \nmsg.topic = sql;\nmsg.Records = dataRecord;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2960,
        "wires": [
            [
                "48c8375f8e755d1a"
            ]
        ]
    },
    {
        "id": "48c8375f8e755d1a",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "name": "",
        "x": 970,
        "y": 2960,
        "wires": [
            [
                "e948e2ac6cd59b9e"
            ]
        ]
    },
    {
        "id": "e948e2ac6cd59b9e",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "c6b921eda57c6b61",
        "parameters": [],
        "name": "delete locator locale script",
        "func": "const dataRecord = msg.Records;\n \nconst sqlDelete = `delete from LOCATOR_LOCALE\n                   where NR_SEQUENCIA = ${dataRecord.localeExternalId}\n                   and NR_SEQ_TIPO_LOCALIZAR = ${dataRecord.locatorExternalId}`;\n \nmsg.topic = sqlDelete;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 2960,
        "wires": [
            [
                "347e3cf16e3ff6fc"
            ]
        ]
    },
    {
        "id": "07f89fef5b5cb268",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2170,
        "y": 2320,
        "wires": [
            [
                "3d737760a4e6b95c"
            ]
        ]
    },
    {
        "id": "c3d3292c48b3fe11",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n         \"attributeExternalId\": msg.Records.attributeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2320,
        "wires": [
            [
                "07f89fef5b5cb268"
            ]
        ]
    },
    {
        "id": "b7500301ff72cb3a",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "name": "",
        "x": 1850,
        "y": 2320,
        "wires": [
            [
                "c3d3292c48b3fe11"
            ]
        ]
    },
    {
        "id": "3d737760a4e6b95c",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorAttributeResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2340,
        "y": 2320,
        "wires": []
    },
    {
        "id": "1e29ecd6de7f6020",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "parameters": [],
        "name": "Check if locator property exists",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n \nconst sql = `select *from TIPO_LOCALIZADOR_CLIENTE  where NR_SEQUENCIA = ${dataRecord.locatorPropertiesExternalId};`;\n \nmsg.topic = sql;\nmsg.Records = dataRecord;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2320,
        "wires": [
            [
                "c12627f26f1af7c3"
            ]
        ]
    },
    {
        "id": "c12627f26f1af7c3",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "name": "",
        "x": 1190,
        "y": 2320,
        "wires": [
            [
                "2fc8ba5830b21230"
            ]
        ]
    },
    {
        "id": "2fc8ba5830b21230",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "9b1e301dfbd05dba",
        "parameters": [],
        "name": "delete locator property script",
        "func": "const dataRecord = msg.Records;\n \nconst sqlDelete = `delete from TIPO_LOCALIZADOR_CLIENTE\n                   where NR_SEQUENCIA = ${dataRecord.locatorPropertiesExternalId}\n                   and NR_SEQ_LOCALIZADOR = ${dataRecord.locatorExternalId}`;\n \nmsg.topic = sqlDelete;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2320,
        "wires": [
            [
                "b7500301ff72cb3a"
            ]
        ]
    },
    {
        "id": "4262da0af90cd459",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "parameters": [],
        "name": "Create locator properties script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sqlInsert = `insert into TIPO_LOCALIZADOR_CLIENTE(\n\t\tNR_SEQUENCIA,\n\t\tCD_FUNCAO,\n\t\tCD_ESTABELECIMENTO,\n\t\tCD_PERFIL,\n\t\tNM_USUARIO_REG,\n\t\tNR_SEQ_LOCALIZADOR,\n\t\tDT_ATUALIZACAO,\n\t\tNM_USUARIO\n)\nVALUES(\n\t${dataRecord.locatorPropertiesExternalId},\n\t${dataRecord.CD_FUNCAO},\n\t${dataRecord.CD_ESTABELECIMENTO},\n\t${dataRecord.CD_PERFIL},\n\t'${dataRecord.NM_USUARIO_REG}',\n\t${dataRecord.locatorExternalId},\n\tsysdate,\n\t'${dataRecord.modifiedBy}'\n)`;\n\nmsg.topic = sqlInsert;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1960,
        "wires": [
            [
                "193fc7329cb92772",
                "174830058ce4369c"
            ]
        ]
    },
    {
        "id": "4e188b6f5ee28cb6",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1410,
        "y": 1860,
        "wires": [
            [
                "918523158d90a3da"
            ]
        ]
    },
    {
        "id": "3a52c7a0f6f06a84",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n        \"locatorPropertiesExternalId\": msg.Records.locatorPropertiesExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1860,
        "wires": [
            [
                "4e188b6f5ee28cb6"
            ]
        ]
    },
    {
        "id": "193fc7329cb92772",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "name": "",
        "x": 1170,
        "y": 1960,
        "wires": [
            [
                "3a52c7a0f6f06a84",
                "09b935c8667e54af"
            ]
        ]
    },
    {
        "id": "918523158d90a3da",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "name": "locator properties response",
        "topic": "spinal.cmdk.locator.LocatorPropertiesResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1620,
        "y": 1860,
        "wires": []
    },
    {
        "id": "174830058ce4369c",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1880,
        "wires": []
    },
    {
        "id": "09b935c8667e54af",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "f840ae2ad985c926",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1940,
        "wires": []
    },
    {
        "id": "75398f96c4823915",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator establishment fetch",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertyEstablishmentRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 170,
        "y": 3700,
        "wires": [
            [
                "afc956e2c7190ddd"
            ]
        ]
    },
    {
        "id": "afc956e2c7190ddd",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 3840,
        "wires": [
            [
                "b031d9d5e89b24b8"
            ]
        ]
    },
    {
        "id": "b031d9d5e89b24b8",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator ",
        "func": "// Get query parameters\n \nconst filterParams            = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\nconst numberOfRecords = filterParams.limit || 15;\n\nconst locatorFetchQuery = `\n    select obter_desc_estab_adicional(cd_estabelecimento) as nm_fantasia_estab,cd_estabelecimento\nFROM estabelecimento\nwhere nm_fantasia_estab IN (SELECT  distinct nm_fantasia_estab  \n                        FROM estabelecimento\n                        group by nm_fantasia_estab )\norder by cd_estabelecimento `;\n    \n\nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 502,
        "y": 3700,
        "wires": [
            [
                "44bb984ab2b33a18",
                "e290547e87340f77"
            ]
        ]
    },
    {
        "id": "624c25cb68695502",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1062,
        "y": 3700,
        "wires": [
            [
                "ac1ba262702d393d"
            ]
        ]
    },
    {
        "id": "44bb984ab2b33a18",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 770,
        "y": 3700,
        "wires": [
            [
                "624c25cb68695502",
                "75d354bc18d68197"
            ]
        ]
    },
    {
        "id": "ac1ba262702d393d",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1125,
        "y": 3783,
        "wires": [
            [
                "bf454bf32c804154"
            ]
        ]
    },
    {
        "id": "bf454bf32c804154",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.LocatorPropertyEstablishmentResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1355,
        "y": 3783,
        "wires": []
    },
    {
        "id": "e290547e87340f77",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 635,
        "y": 3843,
        "wires": []
    },
    {
        "id": "75d354bc18d68197",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 955,
        "y": 3843,
        "wires": []
    },
    {
        "id": "0eba7f58db1d7813",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator user fetch",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertyUserRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 160,
        "y": 4060,
        "wires": [
            [
                "d52cab51789c41e5"
            ]
        ]
    },
    {
        "id": "d52cab51789c41e5",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 4120,
        "wires": [
            [
                "daeee3782f2f7367"
            ]
        ]
    },
    {
        "id": "daeee3782f2f7367",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator",
        "func": "// Get query parameters\n \nconst filterParams            = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\nconst numberOfRecords = filterParams.limit || 15;\n\nconst locatorFetchQuery = `\nselect distinct obter_desc_usuario(nm_usuario) as NM_USUARIO \nfrom usuario\norder by NM_USUARIO `;\n    \nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 4040,
        "wires": [
            [
                "d15c1577fb9f541a",
                "70121ce34e21105c"
            ]
        ]
    },
    {
        "id": "f0c4ac5d5065173a",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 4000,
        "wires": [
            [
                "adca06b242612630"
            ]
        ]
    },
    {
        "id": "d15c1577fb9f541a",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 870,
        "y": 4020,
        "wires": [
            [
                "f0c4ac5d5065173a",
                "2ab1e1a05c9527f1"
            ]
        ]
    },
    {
        "id": "adca06b242612630",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1270,
        "y": 4100,
        "wires": [
            [
                "f7107d7cdec022ee"
            ]
        ]
    },
    {
        "id": "f7107d7cdec022ee",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.LocatorPropertyUserResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 4040,
        "wires": []
    },
    {
        "id": "70121ce34e21105c",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 4120,
        "wires": []
    },
    {
        "id": "2ab1e1a05c9527f1",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 4120,
        "wires": []
    },
    {
        "id": "1f0dfd99c28fdfe7",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator function fetch",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertyFunctionRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 170,
        "y": 4340,
        "wires": [
            [
                "95980eb894ae583e"
            ]
        ]
    },
    {
        "id": "95980eb894ae583e",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 410,
        "y": 4400,
        "wires": [
            [
                "5ac8e850bb2ae33a"
            ]
        ]
    },
    {
        "id": "5ac8e850bb2ae33a",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator",
        "func": "// Get query parameters\n \nconst filterParams            = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\nconst numberOfRecords = filterParams.limit || 15;\n\nconst locatorFetchQuery = `\nselect obter_desc_funcao(cd_funcao) as DS_FUNCAO,cd_funcao\nFROM funcao\nwhere DS_FUNCAO IN (SELECT  distinct DS_FUNCAO  \n                        FROM funcao\n                        group by ds_funcao )\norder by ds_funcao `;\n    \nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 4320,
        "wires": [
            [
                "9c9296825e89de0a",
                "44f0c1c357098126"
            ]
        ]
    },
    {
        "id": "49a411b72ec779a1",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 4280,
        "wires": [
            [
                "e6d0b9520c84c4bd"
            ]
        ]
    },
    {
        "id": "9c9296825e89de0a",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 870,
        "y": 4300,
        "wires": [
            [
                "49a411b72ec779a1",
                "ee9f8812fa73da20"
            ]
        ]
    },
    {
        "id": "e6d0b9520c84c4bd",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1270,
        "y": 4380,
        "wires": [
            [
                "13f56d0fc6ddb51f"
            ]
        ]
    },
    {
        "id": "13f56d0fc6ddb51f",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.LocatorPropertyFunctionResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 4320,
        "wires": []
    },
    {
        "id": "44f0c1c357098126",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 4400,
        "wires": []
    },
    {
        "id": "ee9f8812fa73da20",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 4400,
        "wires": []
    },
    {
        "id": "11457c81450500cf",
        "type": "spinal-consumer",
        "z": "7aa3339f7ef8fc70",
        "name": "locator profile fetch",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.locator.LocatorPropertyProfileRequest",
        "groupid": "",
        "connection": {},
        "broker": "0",
        "x": 170,
        "y": 4640,
        "wires": [
            [
                "9f4c5fb2d3ce4414"
            ]
        ]
    },
    {
        "id": "9f4c5fb2d3ce4414",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 4640,
        "wires": [
            [
                "16feafe9b90ba25c"
            ]
        ]
    },
    {
        "id": "16feafe9b90ba25c",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "fetch Locator",
        "func": "// Get query parameters\n \nconst filterParams            = msg.payload.value;\nconst pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\nconst numberOfRecords = filterParams.limit || 15;\n\nconst locatorFetchQuery = `\nselect obter_desc_perfil(cd_perfil) as ds_perfil,cd_perfil\nFROM perfil\nwhere ds_perfil IN (SELECT  distinct DS_perfil  \n                        FROM perfil\n                        group by ds_perfil )\norder by ds_perfil\n`;\n    \nmsg.topic = locatorFetchQuery;\nmsg.execute = locatorFetchQuery;\nmsg.headers = msg.payload.headers;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 4640,
        "wires": [
            [
                "0d64c7aa6c626966",
                "ed45e322774fc4c8"
            ]
        ]
    },
    {
        "id": "a88fe87503a38df0",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 4600,
        "wires": [
            [
                "1d165e13a57f2bcd"
            ]
        ]
    },
    {
        "id": "0d64c7aa6c626966",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "x": 870,
        "y": 4640,
        "wires": [
            [
                "a88fe87503a38df0",
                "9c2d5093cbf5b020"
            ]
        ]
    },
    {
        "id": "1d165e13a57f2bcd",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1270,
        "y": 4680,
        "wires": [
            [
                "cf36a967ac49e942"
            ]
        ]
    },
    {
        "id": "cf36a967ac49e942",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "name": "",
        "topic": "spinal.cmdk.locator.LocatorPropertyProfileResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 4620,
        "wires": []
    },
    {
        "id": "ed45e322774fc4c8",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 4700,
        "wires": []
    },
    {
        "id": "9c2d5093cbf5b020",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 4700,
        "wires": []
    },
    {
        "id": "cbc834c750e2893b",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "parameters": [],
        "name": "Create type of locator properties script",
        "func": "const dataRecord            = msg.Records;\n\nconst sqlInsert = `insert into TIPO_LOCALIZADOR_CLIENTE(\n\t\tNR_SEQUENCIA,\n\t\tCD_FUNCAO,\n\t\tCD_ESTABELECIMENTO,\n\t\tCD_PERFIL,\n\t\tNM_USUARIO_REG,\n\t\tNR_SEQ_LOCALIZADOR,\n\t\tDT_ATUALIZACAO,\n\t\tNM_USUARIO\n)\nVALUES(\n\t${dataRecord.locatorPropertiesExternalId},\n\t${dataRecord.CD_FUNCAO},\n\t${dataRecord.CD_ESTABELECIMENTO},\n\t${dataRecord.CD_PERFIL},\n\t'${dataRecord.NM_USUARIO_REG}',\n\t${dataRecord.locatorExternalId},\n\tsysdate,\n\t'${dataRecord.modifiedBy}'\n)`;\n\nmsg.topic = sqlInsert;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2160,
        "wires": [
            [
                "d7a29232b81f9936",
                "c1c462154bce30fe"
            ]
        ]
    },
    {
        "id": "85570377db65cbbd",
        "type": "json",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2170,
        "y": 2100,
        "wires": [
            [
                "e087088c15605126"
            ]
        ]
    },
    {
        "id": "8a02a445e6a8ca70",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "parameters": [],
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.locatorExternalId,\n         \"attributeExternalId\": msg.Records.attributeExternalId\n        \n    };\n    \n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2100,
        "wires": [
            [
                "85570377db65cbbd"
            ]
        ]
    },
    {
        "id": "d7a29232b81f9936",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "",
        "x": 1850,
        "y": 2100,
        "wires": [
            [
                "8a02a445e6a8ca70"
            ]
        ]
    },
    {
        "id": "e087088c15605126",
        "type": "spinal-producer",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "locatorresponse",
        "topic": "spinal.cmdk.locator.LocatorAttributeResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2340,
        "y": 2100,
        "wires": []
    },
    {
        "id": "6f114223f4790afb",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "parameters": [],
        "name": "Check if locator properties exists",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst sql = `select * from TIPO_LOCALIZADOR_CLIENTE  where NR_SEQUENCIA = ${dataRecord.locatorPropertiesExternalId};`;\n\nmsg.topic = sql;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2120,
        "wires": [
            [
                "01f756ed3eb398a2",
                "c1c462154bce30fe"
            ]
        ]
    },
    {
        "id": "01f756ed3eb398a2",
        "type": "tasy data access",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "",
        "x": 1190,
        "y": 2120,
        "wires": [
            [
                "b891e11400b7f4e2"
            ]
        ]
    },
    {
        "id": "b891e11400b7f4e2",
        "type": "switch",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 2120,
        "wires": [
            [
                "8a15f7f1581ab476"
            ],
            [
                "cbc834c750e2893b"
            ]
        ]
    },
    {
        "id": "8a15f7f1581ab476",
        "type": "function",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "parameters": [],
        "name": "update type of locator properties script",
        "func": "const dataRecord = msg.Records;\n\nconst sqlUpdate = `update TIPO_LOCALIZADOR_CLIENTE set\n                    CD_FUNCAO = ${dataRecord.CD_FUNCAO},\n                    CD_ESTABELECIMENTO = ${dataRecord.CD_ESTABELECIMENTO},\n                    CD_PERFIL = ${dataRecord.CD_PERFIL},\n                    NM_USUARIO_REG = '${dataRecord.NM_USUARIO_REG}',\n                    DT_ATUALIZACAO = sysdate,\n                    NM_USUARIO = '${dataRecord.modifiedBy}'\n                    where NR_SEQUENCIA = ${dataRecord.locatorPropertiesExternalId}\n                    and NR_SEQ_LOCALIZADOR = ${dataRecord.locatorExternalId}`;\n\nmsg.topic = sqlUpdate;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1570,
        "y": 2060,
        "wires": [
            [
                "d7a29232b81f9936",
                "c1c462154bce30fe"
            ]
        ]
    },
    {
        "id": "c1c462154bce30fe",
        "type": "debug",
        "z": "7aa3339f7ef8fc70",
        "g": "04608bc313f59378",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 2100,
        "wires": []
    },
    {
        "id": "8bb0f3de3e3e5588",
        "type": "http in",
        "z": "a9d694c6c8826f9a",
        "name": "Versions Endpoint",
        "url": "/plsql/versions",
        "method": "get",
        "usetls": false,
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "fbbee8fc458f638b"
            ]
        ]
    },
    {
        "id": "fbbee8fc458f638b",
        "type": "function",
        "z": "a9d694c6c8826f9a",
        "parameters": [],
        "name": "Versions List Function",
        "func": "const dsLayer           = msg.payload.layer\n\nconst sql = `\n    select  distinct ds_version ds, ds_version cd from cmdk_tasy_version\n    order by 1 desc\n    `;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-VERSION-TASY';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "a185479976a854d8"
            ]
        ]
    },
    {
        "id": "664b54d15641969b",
        "type": "function",
        "z": "a9d694c6c8826f9a",
        "parameters": [],
        "name": "Versions List Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = response;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 60,
        "wires": [
            [
                "f9afbb166dd813aa",
                "3eb40e7feb9ab178"
            ]
        ]
    },
    {
        "id": "f9afbb166dd813aa",
        "type": "debug",
        "z": "a9d694c6c8826f9a",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 140,
        "wires": []
    },
    {
        "id": "3eb40e7feb9ab178",
        "type": "http response",
        "z": "a9d694c6c8826f9a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1120,
        "y": 60,
        "wires": []
    },
    {
        "id": "a185479976a854d8",
        "type": "tasy data access",
        "z": "a9d694c6c8826f9a",
        "name": "",
        "x": 630,
        "y": 60,
        "wires": [
            [
                "664b54d15641969b",
                "3a582832026de175"
            ]
        ]
    },
    {
        "id": "3a582832026de175",
        "type": "debug",
        "z": "a9d694c6c8826f9a",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 140,
        "wires": []
    },
    {
        "id": "d442f523c4886995",
        "type": "function",
        "z": "08f7d3f3cff92c9d",
        "parameters": [],
        "name": "Get Applications Function",
        "func": "const layer = msg.payload.value.layer;\n\nconst sql = `\n    select  cd_aplicacao_tasy || ' - '|| obter_desc_expressao_idioma(cd_exp_aplicacao,null, 5) description, cd_aplicacao_tasy value\n    from    aplicacao_tasy\n    where   upper(cd_aplicacao_tasy) like decode('${layer}', null, '%%', 'CORE', '%%', 'TASY%')\n    order by 1\n    `;\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-APPLICATION-LIST';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 80,
        "wires": [
            [
                "7859edb066e1d376",
                "0c733ee0aaeeb058"
            ]
        ]
    },
    {
        "id": "751671317ba92ac1",
        "type": "function",
        "z": "08f7d3f3cff92c9d",
        "parameters": [],
        "name": "Get Applications Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 80,
        "wires": [
            [
                "04069001adabb510",
                "bcd70155445504a0"
            ]
        ]
    },
    {
        "id": "7859edb066e1d376",
        "type": "tasy data access",
        "z": "08f7d3f3cff92c9d",
        "name": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "751671317ba92ac1",
                "8faa4623616489e0"
            ]
        ]
    },
    {
        "id": "8faa4623616489e0",
        "type": "debug",
        "z": "08f7d3f3cff92c9d",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "0c733ee0aaeeb058",
        "type": "debug",
        "z": "08f7d3f3cff92c9d",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "0d14f20671e02438",
        "type": "spinal-consumer",
        "z": "08f7d3f3cff92c9d",
        "name": "Get Applications",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.GetApplicationsRequest",
        "groupid": "cmdk-smartlink-applications-get-applications-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "5942d4f1202713d3"
            ]
        ]
    },
    {
        "id": "04069001adabb510",
        "type": "debug",
        "z": "08f7d3f3cff92c9d",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 160,
        "wires": []
    },
    {
        "id": "5942d4f1202713d3",
        "type": "json",
        "z": "08f7d3f3cff92c9d",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 300,
        "y": 80,
        "wires": [
            [
                "d442f523c4886995"
            ]
        ]
    },
    {
        "id": "bcd70155445504a0",
        "type": "json",
        "z": "08f7d3f3cff92c9d",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1220,
        "y": 80,
        "wires": [
            [
                "2543e6b7116833e4"
            ]
        ]
    },
    {
        "id": "2543e6b7116833e4",
        "type": "spinal-producer",
        "z": "08f7d3f3cff92c9d",
        "name": "",
        "topic": "spinal.cmdk.object.GetApplicationsReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1410,
        "y": 80,
        "wires": []
    },
    {
        "id": "cc7c2e052b565413",
        "type": "spinal-consumer",
        "z": "c4fb366e8c786ca2",
        "name": "Get Domain Reques",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.domain.DomainsRequest",
        "groupid": "cmdk-smartlink-domain-get-domain-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 90,
        "y": 700,
        "wires": [
            [
                "969d88f68841df5b"
            ]
        ]
    },
    {
        "id": "969d88f68841df5b",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 270,
        "y": 700,
        "wires": [
            [
                "125ca2a302041fbd"
            ]
        ]
    },
    {
        "id": "125ca2a302041fbd",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CUSTOM_DOMAIN_DESCRIPTION",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CUSTOM_DOMAIN_DESCRIPTION_DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 430,
        "y": 700,
        "wires": [
            [
                "0ed9aa2f05d0fe40"
            ],
            [
                "5b079ca36e1213be"
            ],
            [
                "94a2de3eecf70f3c"
            ],
            [
                "a9f1d6c5a3ae144c"
            ],
            [
                "997f9bb23cc0db6f"
            ]
        ]
    },
    {
        "id": "997f9bb23cc0db6f",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "parameters": [],
        "name": "custom value delete",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\n\nconst deletecustom = \n    `DELETE FROM valor_dominio_custom\n    WHERE\n      NR_SEQUENCIA = ${dataRecord.customId} `\n\n\nmsg.topic = deletecustom;\nmsg.event = communicationTopic.eventType;\nmsg.Records = dataRecord;\n\nreturn msg; \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1320,
        "wires": [
            [
                "3d4e573af69d5235"
            ]
        ]
    },
    {
        "id": "3b068d9fb2331c41",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1450,
        "y": 1320,
        "wires": [
            [
                "25a66eefe74b7e5a"
            ]
        ]
    },
    {
        "id": "25a66eefe74b7e5a",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "name": "Creation domain response",
        "topic": "spinal.cmdk.domain.DomainResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "some broker",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1660,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3977a4bb001144f8",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const response = {};\nconst dataRecord = msg.Records\nconst dataRecordResult = \n    {\n        \"customID\": msg.Records.customID\n        \n    };\n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1320,
        "wires": [
            [
                "3b068d9fb2331c41",
                "f3ad536f8e2a7499"
            ]
        ]
    },
    {
        "id": "3d4e573af69d5235",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "name": "",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "3977a4bb001144f8"
            ]
        ]
    },
    {
        "id": "1f182b4266a876ff",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "update domain",
        "func": "//const communicationTopic = msg.payload.event.communicationTopic;\nconst dataRecord = msg.value;\nconst updateQuery = `\n    UPDATE dominio\n        SET\n            NM_DOMINIO = '${dataRecord.domainName}',\n            DS_DOMINIO = '${dataRecord.domainDescription}',\n            DT_ATUALIZACAO = sysdate,\n            NM_USUARIO = '${dataRecord.createdBy}',\n            CD_EXP_DOMINIO = '${dataRecord.domainExpId}',\n            CD_EXP_DESC_DOMINIO = '${dataRecord.domainDescExpId}'\n        WHERE\n            CD_DOMINIO = ${dataRecord.externalId}\n            AND ds_layer IS NOT NULL`;\n\nmsg.topic = updateQuery;\nmsg.Records = dataRecord;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 740,
        "wires": [
            [
                "c0a1c1068a73707a"
            ]
        ]
    },
    {
        "id": "186ac3013c1886bc",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2650,
        "y": 660,
        "wires": [
            [
                "e41e0bcb3fbc199e"
            ]
        ]
    },
    {
        "id": "e41e0bcb3fbc199e",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "Creation domain response",
        "topic": "spinal.cmdk.domain.DomainResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2840,
        "y": 660,
        "wires": []
    },
    {
        "id": "c0a1c1068a73707a",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "x": 2170,
        "y": 740,
        "wires": [
            [
                "934f50393b0e5f3f"
            ]
        ]
    },
    {
        "id": "ed454dd9bb975759",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "switch - Contains domain",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 760,
        "wires": [
            [
                "1f182b4266a876ff"
            ],
            [
                "ca5113d9c455fb95"
            ]
        ]
    },
    {
        "id": "ca5113d9c455fb95",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "Insert domain",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.value;\nconst insertQuery = `\n      insert into dominio( \n\t\tcd_dominio,\n\t\tnm_dominio,\n\t\tds_dominio,\n\t\tcd_exp_dominio,\n\t\tcd_exp_desc_dominio,\n\t\tds_layer,\n\t\tnm_usuario,\n\t\tdt_atualizacao,\n\t\tIE_ALTERAR,\n\t\tIE_IMPLANTAR,\n\t\tNR_SEQ_MODULO\n\t\t)\n\t\tvalues(\n     '${dataRecord.externalId}',\n     '${dataRecord.domainName}',\n     '${dataRecord.domainDescription}',\n     '${dataRecord.domainExpId}',\n     '${dataRecord.domainDescExpId}',\n\t '${dataRecord.createdBy}',\n     sysdate,\n\t sysdate,\n\t 'Y',\n\t 'N',\n\t 15)`;\n\nmsg.topic = insertQuery;\nmsg.Records = dataRecord;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 800,
        "wires": [
            [
                "830e0365228fdadc",
                "b6bb752aa62a2de8"
            ]
        ]
    },
    {
        "id": "830e0365228fdadc",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "x": 2170,
        "y": 800,
        "wires": [
            [
                "934f50393b0e5f3f"
            ]
        ]
    },
    {
        "id": "b28573493ce0c857",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "get domainValue",
        "func": "//const dataRecord            = msg.payload.value.dataRecord;\nconst dataRecord =  msg.Records;\nconst domainValue = dataRecord.domainValues;\n\nconst getDomainValue = \n    `SELECT * FROM valor_dominio\n    WHERE cd_dominio =  ${dataRecord.externalId}\n    AND VL_DOMINIO = '${domainValue[0].currentDomainValue}'\n    AND ds_layer IS NOT NULL`;\n\nmsg.topic = getDomainValue;\n//msg.event = communicationTopic.eventType;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 640,
        "wires": [
            [
                "09fe042018e4bc6b"
            ]
        ]
    },
    {
        "id": "4f2b8a72bc190d5f",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "switch - Contains domainValues",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 540,
        "wires": [
            [
                "23b3dee481fb60ab"
            ],
            [
                "4c6912a43faa40cd"
            ]
        ]
    },
    {
        "id": "09fe042018e4bc6b",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "x": 1390,
        "y": 540,
        "wires": [
            [
                "4f2b8a72bc190d5f",
                "95b6b4cddc63287b"
            ]
        ]
    },
    {
        "id": "23b3dee481fb60ab",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "update domainValues",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\n//const dataRecord = msg.payload.value.dataRecord;\n//const domainValue = msg.payload.value.dataRecord.domainValues;\nconst dataRecord =  msg.Records;\nconst domainValue = msg.Records.domainValues;\nconst updateQuery = `\n        UPDATE valor_dominio\n        SET\n            VL_DOMINIO = '${domainValue[0].domainVal}',\n            DS_VALOR_DOMINIO = '${domainValue[0].domainValueDesc}',\n            DT_ATUALIZACAO = sysdate,\n            NM_USUARIO =  '${domainValue[0].createdBy}',\n            IE_SITUACAO = 'A',\n            CD_EXP_VALOR_DOMINIO = '${domainValue[0].domainValueExpId}'\n        WHERE\n            CD_DOMINIO = ${dataRecord.externalId}\n            AND vl_dominio = '${domainValue[0].currentDomainValue}'\n            AND ds_layer IS NOT NULL`;\n\nmsg.topic = updateQuery;\n//msg.Records = dataRecord;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 460,
        "wires": [
            [
                "0fb47f58c8b49da1",
                "0bf289ce2d305f2e"
            ]
        ]
    },
    {
        "id": "4c6912a43faa40cd",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "Insert domain",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\n//const dataRecord = msg.payload.value.dataRecord;\n//const domainValue = msg.payload.value.dataRecord.domainValues;\nconst dataRecord =  msg.Records;\nconst domainValue   = msg.Records.domainValues;\nconst domainValuesLength     = msg.domainValuesLength == null ? domainValue.length : msg.domainValuesLength;\nlet index    = msg.index == null ? 0 : msg.index;\nconst insertQuery =\n      `INSERT INTO valor_dominio( \n\t\tCD_DOMINIO,\n\t\tVL_DOMINIO,\n\t\tDS_VALOR_DOMINIO,\n        DT_ATUALIZACAO,\n        NM_USUARIO,\n        IE_SITUACAO,\n        CD_EXP_VALOR_DOMINIO,\n\t\tDS_LAYER\t\t\t\t\n\t\t)\n\t\tVALUES (\n         ${dataRecord.externalId},\n\t    '${domainValue[index].domainVal}',\n\t    '${domainValue[index].domainValueDesc}',\n        sysdate,\n        '${domainValue[index].createdBy}',\n        'A',\n\t    '${domainValue[index].domainValueExpId}',\n        '${domainValue[index].origin}'\n\t    )`;\n\nmsg.topic = insertQuery;\n//msg.Records = dataRecord;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 620,
        "wires": [
            [
                "0fb47f58c8b49da1",
                "b6bb752aa62a2de8"
            ]
        ]
    },
    {
        "id": "0fb47f58c8b49da1",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "x": 2150,
        "y": 540,
        "wires": [
            [
                "b3a2c84282f305f7",
                "9d0b49e6c7674609"
            ]
        ]
    },
    {
        "id": "b3a2c84282f305f7",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.externalId\n        \n    };\n    \n        if(msg.Records.domainValues.length > 0){\n        dataRecordResult.domainValue = msg.Records.domainValues[0].domainVal;\n    }\n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2390,
        "y": 540,
        "wires": [
            [
                "186ac3013c1886bc"
            ]
        ]
    },
    {
        "id": "e9d15d1764b57feb",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "parameters": [],
        "name": "custom value  update",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.Records;\n\nlet updateQuery;\n    updateQuery = `\n        UPDATE valor_dominio_custom\n        SET\n        DT_ATUALIZACAO = sysdate,             \n        NM_USUARIO = '${dataRecord.createdBy}',      \n        DT_ATUALIZACAO_NREC = sysdate,        \n        NM_USUARIO_NREC =  '${dataRecord.modifiedBy}',\n        IE_SITUACAO = '${dataRecord.isActive}',\n        CD_EXP_DOMAIN_VALUE = '${dataRecord.domainValueExpId}',\n        DS_LAYER = '${dataRecord.origin}',\n        DS_DOMAIN_CLIENT_VALUE = '${dataRecord.customDesc}'\n        WHERE\n           NR_SEQUENCIA = ${dataRecord.customId} `;   \n\nmsg.topic = updateQuery;\n//msg.Records = dataRecord;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1060,
        "wires": [
            [
                "48edda0fe603dc15",
                "8822d080ce79e031"
            ]
        ]
    },
    {
        "id": "c0a54c02c52fcf38",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2310,
        "y": 1100,
        "wires": [
            [
                "2e183ec7971dd9b1"
            ]
        ]
    },
    {
        "id": "2e183ec7971dd9b1",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "Creation domain response",
        "topic": "spinal.cmdk.domain.DomainResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "some broker",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2520,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5dd6e52ee80f3111",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const result = msg.payload;\nconst response = {};\nconst dataRecordResult = \n    {\n         \"externalId\": msg.Records.externalId,\n        \"domainValue\": msg.Records.domainValue\n        \n    };\n    \n\n\nresponse.dataRecordResult   = dataRecordResult;\nresponse.eventType = msg.event;\n\nif(result.hasOwnProperty('error')){\n    response.status = 'ERROR'\n}\nelse {\n    response.status = 'SUCCESS';\n\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 1100,
        "wires": [
            [
                "c0a54c02c52fcf38",
                "839aa874cf6eb6c6"
            ]
        ]
    },
    {
        "id": "48edda0fe603dc15",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "",
        "x": 1790,
        "y": 1060,
        "wires": [
            [
                "5dd6e52ee80f3111"
            ]
        ]
    },
    {
        "id": "a9f1d6c5a3ae144c",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "parameters": [],
        "name": "check custom domain",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\nconst fetchdata = \n    `SELECT * FROM valor_dominio_custom\n    WHERE  NR_SEQUENCIA = ${dataRecord.customId} `\n\nmsg.topic = fetchdata;\nmsg.event = communicationTopic.eventType;\nmsg.Records = dataRecord;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1120,
        "wires": [
            [
                "162b15d2a47e1adc"
            ]
        ]
    },
    {
        "id": "162b15d2a47e1adc",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "",
        "x": 1030,
        "y": 1120,
        "wires": [
            [
                "31e2c8646f215def",
                "fbe67275a84c44d9"
            ]
        ]
    },
    {
        "id": "b8e4f81041b6cf3e",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "parameters": [],
        "name": "custom value  insert",
        "func": "//const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.Records;\n\nconst  insertQuery = `\n    insert into valor_dominio_custom( \n    NR_SEQUENCIA,\n    NM_USUARIO,\n    NM_USUARIO_NREC,\n    DT_ATUALIZACAO,\n    VL_DOMAIN,\n    CD_DOMAIN,\n    CD_EXP_DOMAIN_VALUE,\n    IE_SITUACAO,\n    DT_ATUALIZACAO_NREC,\n    DS_LAYER,\n    DS_DOMAIN_CLIENT_VALUE\n\t\t)\n\t\tvalues(\n\t  ${dataRecord.customId},\n      '${dataRecord.createdBy}',\n      '${dataRecord.modifiedBy}', \n      sysdate,\n      '${dataRecord.domainValue}',\n      ${dataRecord.externalId},\n      ${dataRecord.domainValueExpId},\n      '${dataRecord.isActive}',\n      sysdate,\n      '${dataRecord.origin}',\n      '${dataRecord.customDesc}'\n    )`;\nmsg.topic = insertQuery;\nmsg.Records = dataRecord;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1160,
        "wires": [
            [
                "5c64bc097ac0b1ff",
                "8822d080ce79e031"
            ]
        ]
    },
    {
        "id": "31e2c8646f215def",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "switch - Contains domainValues",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 1120,
        "wires": [
            [
                "e9d15d1764b57feb",
                "affeb4859a2813a1"
            ],
            [
                "b8e4f81041b6cf3e"
            ]
        ]
    },
    {
        "id": "5c64bc097ac0b1ff",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "",
        "x": 1790,
        "y": 1160,
        "wires": [
            [
                "5dd6e52ee80f3111"
            ]
        ]
    },
    {
        "id": "58b021fbd6239ffd",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "parameters": [],
        "name": "Create domain script",
        "func": "const dataRecord            = msg.value;\nconst sqlInsert = `insert into dominio( \n\t\tcd_dominio,\n\t\tnm_dominio,\n\t\tds_dominio,\n\t\tcd_exp_dominio,\n\t\tcd_exp_desc_dominio,\n\t\tds_layer,\n\t\tnm_usuario,\n\t\tdt_atualizacao,\n\t\tIE_ALTERAR,\n\t\tIE_IMPLANTAR,\n\t\tNR_SEQ_MODULO\n\t\t)\n\t\tvalues(\n     '${dataRecord.externalId}',\n     '${dataRecord.domainName}',\n     '${dataRecord.domainDescription}',\n     '${dataRecord.domainExpId}',\n     '${dataRecord.domainDescExpId}',\n\t '${dataRecord.createdBy}',\n     sysdate,\n\t sysdate,\n\t 'Y',\n\t 'N',\n\t 15)`;\n\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 320,
        "wires": [
            [
                "f36ad370458ed68b",
                "4f23aa7626d26231"
            ]
        ]
    },
    {
        "id": "0ed9aa2f05d0fe40",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "parameters": [],
        "name": "check domain",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst domainValue = msg.payload.value.dataRecord.domainValues;\n\nconst getDomain = \n    `SELECT * FROM dominio\n    WHERE cd_dominio =\n     ${dataRecord.externalId}`;\n\nmsg.topic = getDomain;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\nmsg.Records = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 240,
        "wires": [
            [
                "2cb3a0f422b2b287",
                "5afee718d6de0497"
            ]
        ]
    },
    {
        "id": "30171c406d6cb3e5",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "switch - Contains domain",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 240,
        "wires": [
            [
                "89401e2004bada7e"
            ],
            [
                "58b021fbd6239ffd"
            ]
        ]
    },
    {
        "id": "55d6d77c7ea4733c",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 2030,
        "y": 220,
        "wires": [
            [
                "05dbac10427f9443"
            ]
        ]
    },
    {
        "id": "89401e2004bada7e",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "parameters": [],
        "name": "Create domain custom script",
        "func": "const dataRecord            = msg.value;\nconst domainValue           = msg.value.domainValues;\nconst domainValuesLength     = msg.domainValuesLength == null ? domainValue.length : msg.domainValuesLength;\nlet indexCustom             = msg.indexCustom == null ? 0 : msg.indexCustom;\nlet dsValorDominio = domainValue.domainValueDesc == null ? null : `'${domainValue.domainValueDesc}'`;\n\n\nconst scriptInsertDomainValue = \n`INSERT INTO valor_dominio( \n\t\tCD_DOMINIO,\n\t\tVL_DOMINIO,\n\t\tDS_VALOR_DOMINIO,\n        DT_ATUALIZACAO,\n        NM_USUARIO,\n        IE_SITUACAO,\n        CD_EXP_VALOR_DOMINIO,\n\t\tDS_LAYER\t\t\t\t\n\t\t)\n\t\tVALUES (\n         ${dataRecord.externalId},\n\t    '${domainValue[indexCustom].domainVal}',\n\t      ${dsValorDominio} ,\n        sysdate,\n        '${domainValue[indexCustom].createdBy}',\n        'A',\n\t    ${domainValue[indexCustom].domainValueExpId},\n        '${domainValue[indexCustom].origin}'\n\t    )`;\n\nmsg.topic = scriptInsertDomainValue;\nmsg.event = msg.event;\nmsg.value = msg.value\nmsg.domainValuesLength   = domainValuesLength;\nmsg.indexCustom         = indexCustom+1;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "fe64d57f73f26a5e",
                "4f23aa7626d26231"
            ]
        ]
    },
    {
        "id": "485fe4dadca0716d",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const result = msg.payload;\nconst response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.externalId\n        \n    };\n    \n        if(msg.Records.domainValues.length > 0){\n        dataRecordResult.domainValue = msg.Records.domainValues[0].domainVal;\n    }\n\n\nresponse.dataRecordResult   = dataRecordResult;\n\nif(result.hasOwnProperty('error')){\n    response.status = 'ERROR'\n}\nelse {\n    response.status = 'SUCCESS';\n\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 220,
        "wires": [
            [
                "55d6d77c7ea4733c"
            ]
        ]
    },
    {
        "id": "2cb3a0f422b2b287",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "",
        "x": 950,
        "y": 240,
        "wires": [
            [
                "30171c406d6cb3e5",
                "64d1c66837eed71e"
            ]
        ]
    },
    {
        "id": "f36ad370458ed68b",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "",
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "485fe4dadca0716d"
            ]
        ]
    },
    {
        "id": "fe64d57f73f26a5e",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "",
        "x": 1650,
        "y": 160,
        "wires": [
            [
                "485fe4dadca0716d"
            ]
        ]
    },
    {
        "id": "94a2de3eecf70f3c",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "parameters": [],
        "name": "delete domain & domain values",
        "func": "const communicationTopic = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\nconst domainValue = msg.payload.value.dataRecord.domainValues;\nlet deleteQuery;\n\nif (dataRecord.domainValues.length > 0) {\n    deleteQuery = `\n       DELETE from  valor_dominio\n        WHERE\n            CD_DOMINIO = ${dataRecord.externalId}\n            AND vl_dominio = '${domainValue[0].domainVal}'\n            AND ds_layer IS NOT NULL`;\n} else {\n    deleteQuery = `\n        DELETE from dominio\n        WHERE\n            CD_DOMINIO = ${dataRecord.externalId}\n            AND ds_layer IS NOT NULL`;\n}\n\n\nmsg.topic = deleteQuery;\nmsg.Records = dataRecord;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 920,
        "wires": [
            [
                "3df997a7cbc55c24"
            ]
        ]
    },
    {
        "id": "dd427cc70cb21d58",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1510,
        "y": 920,
        "wires": [
            [
                "a768a0a4ca73df74"
            ]
        ]
    },
    {
        "id": "a768a0a4ca73df74",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "name": "Creation domain response",
        "topic": "spinal.cmdk.domain.DomainResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "some broker",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1700,
        "y": 920,
        "wires": []
    },
    {
        "id": "2a2a6ea83ae4bd2d",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.externalId\n        \n    };\n    \n        if(msg.Records.domainValues.length > 0){\n        dataRecordResult.domainValue = msg.Records.domainValues[0].domainVal;\n    }\n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 920,
        "wires": [
            [
                "dd427cc70cb21d58"
            ]
        ]
    },
    {
        "id": "3df997a7cbc55c24",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "name": "",
        "x": 1070,
        "y": 920,
        "wires": [
            [
                "2a2a6ea83ae4bd2d",
                "82bc5a9a977be739"
            ]
        ]
    },
    {
        "id": "05dbac10427f9443",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "",
        "topic": "spinal.cmdk.domain.DomainResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2200,
        "y": 220,
        "wires": []
    },
    {
        "id": "934f50393b0e5f3f",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "Responsedomain",
        "func": "const result = msg.payload;\nconst response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.Records.externalId\n        \n    };\n    \n        if(msg.Records.domainValues.length > 0){\n        dataRecordResult.domainValue = msg.Records.domainValues[0].domainVal;\n    }\n\n\nresponse.dataRecordResult   = dataRecordResult;\n\nif(result.hasOwnProperty('error')){\n    response.status = 'ERROR'\n}\nelse {\n    response.status = 'SUCCESS';\n\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 760,
        "wires": [
            [
                "186ac3013c1886bc"
            ]
        ]
    },
    {
        "id": "c60549462a2a667a",
        "type": "switch",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "switch - Contains domain",
        "property": "msg.payload.value.dataRecord.domainValues",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 700,
        "wires": [
            [
                "b28573493ce0c857"
            ],
            [
                "3630761ae2ace26b"
            ]
        ]
    },
    {
        "id": "5b079ca36e1213be",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "get domain",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst domainValue = msg.payload.value.dataRecord.domainValues;\n\n\nconst getDomain = \n    `SELECT * FROM dominio\n    WHERE cd_dominio =\n     ${dataRecord.externalId} AND ds_layer IS NOT NULL`;\n\nmsg.topic = getDomain;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\nmsg.Records = dataRecord;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 700,
        "wires": [
            [
                "c60549462a2a667a"
            ]
        ]
    },
    {
        "id": "3630761ae2ace26b",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "parameters": [],
        "name": "get domain",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst domainValue = msg.payload.value.dataRecord.domainValues;\n\nconst getDomain = \n    `SELECT * FROM dominio\n    WHERE cd_dominio =\n     ${dataRecord.externalId} AND ds_layer IS NOT NULL`;\n\nmsg.topic = getDomain;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 760,
        "wires": [
            [
                "0d31ecaf40b86486"
            ]
        ]
    },
    {
        "id": "0d31ecaf40b86486",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "",
        "x": 1370,
        "y": 760,
        "wires": [
            [
                "ed454dd9bb975759",
                "57e6bea4eab2fbd7"
            ]
        ]
    },
    {
        "id": "95b6b4cddc63287b",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 460,
        "wires": []
    },
    {
        "id": "0bf289ce2d305f2e",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2159,
        "y": 462.3333435058594,
        "wires": []
    },
    {
        "id": "9d0b49e6c7674609",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2359,
        "y": 458.3333435058594,
        "wires": []
    },
    {
        "id": "82bc5a9a977be739",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "e1ea8da34e503e93",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 960,
        "wires": []
    },
    {
        "id": "57e6bea4eab2fbd7",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "a90b7f5bf7c37ab5",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1520,
        "y": 660,
        "wires": []
    },
    {
        "id": "b6bb752aa62a2de8",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2039,
        "y": 680.6666259765625,
        "wires": []
    },
    {
        "id": "fbe67275a84c44d9",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1060,
        "wires": []
    },
    {
        "id": "8822d080ce79e031",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1664,
        "y": 1115.6666259765625,
        "wires": []
    },
    {
        "id": "affeb4859a2813a1",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 1180,
        "wires": []
    },
    {
        "id": "f3ad536f8e2a7499",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "131825c58a358917",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1380,
        "wires": []
    },
    {
        "id": "839aa874cf6eb6c6",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "2df6f36b010c3d58",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 1160,
        "wires": []
    },
    {
        "id": "5afee718d6de0497",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "g": "9e5c06a3845a7670",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 320,
        "wires": []
    },
    {
        "id": "64d1c66837eed71e",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1113.5234375,
        "y": 178.5234375,
        "wires": []
    },
    {
        "id": "4f23aa7626d26231",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1628.5234375,
        "y": 247.5234375,
        "wires": []
    },
    {
        "id": "cbd546a85072160d",
        "type": "spinal-consumer",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.domain.DomainsQueryRequest",
        "groupid": "cmdk-smartlink-domain-query-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 200,
        "y": 1640,
        "wires": [
            [
                "891c8ea390fda6b3"
            ]
        ]
    },
    {
        "id": "891c8ea390fda6b3",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 1640,
        "wires": [
            [
                "5f9fd2d6ac38dfcb"
            ]
        ]
    },
    {
        "id": "5f9fd2d6ac38dfcb",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "parameters": [],
        "name": "fetch Domain Values",
        "func": "// Get query parameters\nconst filterParams            = msg.payload.value.dataRecord;\nlet pageNumber = (filterParams.page !== undefined && filterParams.page !== null && filterParams.page !== 0) ? filterParams.page : 1;\npageNumber = pageNumber-1;\nconst numberOfRecords = filterParams.limit || 15;\nconst cd_domain = filterParams.domainExternalId || null;\nconst origin = filterParams.origin || null;\nconst domain_name = (filterParams.domainName !== undefined && filterParams.domainName !== null) ? `'${filterParams.domainName}'` : null;\n\nlet restriction = '';\n\n\nrestriction += `AND (${cd_domain} is null OR a.cd_dominio = ${cd_domain})`;\nrestriction += `AND (${domain_name} is null OR (lower(a.nm_dominio) like lower('%' || ${domain_name} || '%')) OR (lower(obter_desc_expressao(a.cd_exp_dominio)) like lower('%' || ${domain_name} || '%')))`;\n\nconst domainFetchQuery = `\n    SELECT  a.*, \n                decode(ds_layer, null, 'CORE', 'CMDK') ORIGIN, \n            substr(obter_desc_expressao(cd_exp_dominio, nm_dominio), 1, 254) NM_DOMINIO_GRID,\n            SUBSTR(Obter_Desc_Expressao(cd_exp_dominio), 1, 254) DS_EXP_DOMINIO,\n            SUBSTR(Obter_Desc_Expressao(CD_EXP_DESC_DOMINIO), 1, 254) DS_EXP_DESC_DOMINIO,\n            SWCF_GET_PROTECTED_OBJECT('D', CD_DOMINIO, null) IE_PROTECTED_OBJECT\n    FROM DOMINIO a\n    WHERE 1 = 1 \n        AND (null is null OR exists (\n            SELECT x.nr_sequencia\n            FROM modulo_tasy x\n            WHERE x.cd_aplicacao_tasy = null \n                AND x.nr_sequencia = a.nr_seq_modulo))\n        and a.ds_layer is null\n    ${restriction}\n    ORDER BY NM_DOMINIO offset ${pageNumber} rows fetch first ${numberOfRecords} rows only \n`;\n\nmsg.topic = domainFetchQuery;\nmsg.execute = domainFetchQuery;\nmsg.headers = msg.payload.headers;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 605.2777709960938,
        "y": 1643.17138671875,
        "wires": [
            [
                "a49419533c1e0fc6",
                "b91a19921826970d"
            ]
        ]
    },
    {
        "id": "2f098538f6f07eee",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n    response.correlationId = msg.headers.kafka_correlationId;\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1640,
        "wires": [
            [
                "78f2f346f0a88d3a"
            ]
        ]
    },
    {
        "id": "a49419533c1e0fc6",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "x": 830,
        "y": 1640,
        "wires": [
            [
                "2f098538f6f07eee",
                "0a8efa307dd42f73"
            ]
        ]
    },
    {
        "id": "78f2f346f0a88d3a",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1250,
        "y": 1640,
        "wires": [
            [
                "1f97edab3fd05d87"
            ]
        ]
    },
    {
        "id": "1f97edab3fd05d87",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "topic": "spinal.cmdk.domain.DomainsQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1400,
        "y": 1640,
        "wires": []
    },
    {
        "id": "35374631f7f20975",
        "type": "spinal-consumer",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.domain.DomainValuesQueryRequest",
        "groupid": "cmdk-smartlink-domain-values-query-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 220,
        "y": 1760,
        "wires": [
            [
                "5e5943f7d47fbf69"
            ]
        ]
    },
    {
        "id": "5e5943f7d47fbf69",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 1760,
        "wires": [
            [
                "05c25cae086e31e0"
            ]
        ]
    },
    {
        "id": "05c25cae086e31e0",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "parameters": [],
        "name": "fetch Domain Values",
        "func": "\nconst filterParams            = msg.payload.value.dataRecord;\n\n// Get query parameters\nconst page = filterParams && filterParams.page !== undefined ? filterParams.page : 1;\nconst pageSize = filterParams && filterParams.limit !== undefined ? filterParams.limit : 50;\nconst cd_domain = filterParams && filterParams.domainExternalId !== undefined ? filterParams.domainExternalId : null;\nconst origin = filterParams && filterParams.layer !== undefined ? filterParams.layer : null;\n\nlet restriction = '';\n\nlet orderBy = ' ORDER BY NR_SEQ_APRESENT,VL_DOMINIO';\n\nrestriction += `AND CD_DOMINIO = ${cd_domain} and a.ds_layer is null`;\n\nconst sql = `\n\t\t\t\tSELECT a.* \n                       from valor_dominio a\n                       WHERE 1 = 1 \n                            ${restriction}\n                            ${orderBy}\n                             \n\t\t\t`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT';\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1760,
        "wires": [
            [
                "424e6d8cd3cdbc38"
            ]
        ]
    },
    {
        "id": "8d1a65d29909c2b8",
        "type": "function",
        "z": "c4fb366e8c786ca2",
        "parameters": [],
        "name": "send the response back",
        "func": "const result = msg.payload;\n\nlet response ={};\n\nif(result.hasOwnProperty('error')){\n   \n   response.status = \"ERROR\"\n}\nelse{\n    \n    response.status = \"SUCCESS\"\n    response.rows = result.select[0].resultSet;\n    response.correlationId = msg.headers.kafka_correlationId;\n}\n\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1760,
        "wires": [
            [
                "478e5d6f03a495f0"
            ]
        ]
    },
    {
        "id": "424e6d8cd3cdbc38",
        "type": "tasy data access",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "x": 790,
        "y": 1760,
        "wires": [
            [
                "8d1a65d29909c2b8"
            ]
        ]
    },
    {
        "id": "478e5d6f03a495f0",
        "type": "json",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1250,
        "y": 1760,
        "wires": [
            [
                "7cacf00b418d9ccf"
            ]
        ]
    },
    {
        "id": "7cacf00b418d9ccf",
        "type": "spinal-producer",
        "z": "c4fb366e8c786ca2",
        "name": "",
        "topic": "spinal.cmdk.domain.DomainValuesQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1420,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b91a19921826970d",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1560,
        "wires": []
    },
    {
        "id": "0a8efa307dd42f73",
        "type": "debug",
        "z": "c4fb366e8c786ca2",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1560,
        "wires": []
    },
    {
        "id": "5f6c944a4255c680",
        "type": "spinal-consumer",
        "z": "3efdca799f3d7045",
        "name": "ExpressionRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.expression.ExpressionRequest",
        "groupid": "cmdk-smartlink-expression-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 110,
        "y": 440,
        "wires": [
            [
                "1a1bd834017836d2"
            ]
        ]
    },
    {
        "id": "1a1bd834017836d2",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 290,
        "y": 440,
        "wires": [
            [
                "2e8d845fc8d74505"
            ]
        ]
    },
    {
        "id": "2e8d845fc8d74505",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "65ca629e22b6f1f8"
            ],
            [
                "05bfc6465a5cf261"
            ],
            [
                "89bc5af0266cdf24"
            ]
        ]
    },
    {
        "id": "ac7109048e1acabd",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "ResponseExpression",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"externalId\": msg.value.externalId\n    };\n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 360,
        "wires": [
            [
                "730f864878f4d931"
            ]
        ]
    },
    {
        "id": "804a2bbe4bd9f929",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "Creation expression response",
        "topic": "spinal.cmdk.expression.ExpressionResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2150,
        "y": 360,
        "wires": []
    },
    {
        "id": "aad37fcd27a6d303",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "Create expression custom script",
        "func": "const dataRecord            = msg.value;\nconst translation           = msg.value.translation;\nconst translationLength     = msg.translationLength == null ? translation.length : msg.translationLength;\nlet indexCustom             = msg.indexCustom == null ? 0 : msg.indexCustom;\n\nconst scriptInsertCustom = \n`INSERT INTO dic_expressao_custom( \n\t\tcd_expressao,\n\t\tds_expressao,\n\t\tds_idioma,\n        ds_locale,\n        ds_layer,\n        nr_sequencia,\n        ie_situacao,\n\t\tnm_usuario,\t\t\t\t\n\t\tnm_usuario_nrec,\n\t\tdt_atualizacao,\n\t\tdt_atualizacao_nrec)\n\t\tVALUES (\n     ${dataRecord.externalId},\n\t '${translation[indexCustom].expression}',\n\t '${translation[indexCustom].language}',\n     '${translation[indexCustom].locale}',\n     '${translation[indexCustom].layer}',\n     '${translation[indexCustom].customExpressionExternalId}',\n     'A',\n     '${translation[indexCustom].modifiedBy}',\n\t '${translation[indexCustom].createdBy}',\n     sysdate,\n\t sysdate)`;\n\nmsg.topic = scriptInsertCustom;\nmsg.event = msg.event;\nmsg.value = msg.value\nmsg.translationLength   = translationLength;\nmsg.indexCustom         = indexCustom+1;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 80,
        "wires": [
            [
                "96d9d5fa94de0503"
            ]
        ]
    },
    {
        "id": "7f05698c6dd8fd93",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "switch - Status result",
        "property": "statusResult",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1160,
        "y": 220,
        "wires": [
            [
                "aad37fcd27a6d303"
            ],
            [
                "ac7109048e1acabd"
            ]
        ]
    },
    {
        "id": "730f864878f4d931",
        "type": "json",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1790,
        "y": 360,
        "wires": [
            [
                "804a2bbe4bd9f929"
            ]
        ]
    },
    {
        "id": "05bfc6465a5cf261",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "Update expressao script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord = msg.payload.value.dataRecord;\nconst sqlUpdate = `UPDATE dic_expressao\nSET\n    DS_GLOSSARIO = '${dataRecord.glossary}',\n    NM_USUARIO = '${dataRecord.modifiedBy}',\n    DT_ATUALIZACAO =  sysdate\nWHERE CD_EXPRESSAO = ${dataRecord.externalId}`;\n\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 540,
        "wires": [
            [
                "6c29c49b83260393"
            ]
        ]
    },
    {
        "id": "2336636deaca10a6",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "Update expression response",
        "topic": "spinal.cmdk.expression.ExpressionResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1660,
        "y": 640,
        "wires": []
    },
    {
        "id": "7706da1dd6e822c0",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "Response",
        "func": "const response = {};\nconst dataRecordResult = \n {\n \"expressionExternalId\": msg.value.externalId,\n \"externalId\" : msg.value.externalId\n };\n \nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n response.success = `Rows affected ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 640,
        "wires": [
            [
                "7a0c2dcd9eb90c27"
            ]
        ]
    },
    {
        "id": "7a0c2dcd9eb90c27",
        "type": "json",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1450,
        "y": 640,
        "wires": [
            [
                "2336636deaca10a6"
            ]
        ]
    },
    {
        "id": "4bf87d42f0abcbcb",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "switch - Status result",
        "property": "statusResult",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 540,
        "wires": [
            [
                "35e1173f13ac1ea5"
            ],
            [
                "7706da1dd6e822c0"
            ]
        ]
    },
    {
        "id": "35e1173f13ac1ea5",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "Update expression custom script",
        "func": "const dataRecord            = msg.value;\nconst translation           = msg.value.translation;\nconst translationLength     = msg.translationLength == null ? translation.length : msg.translationLength;\nlet index                   = msg.index == null ? 0 : msg.index;\n\nconst sqlUpdate = `UPDATE dic_expressao_custom\nSET\n\tcd_expressao\t= ${dataRecord.externalId},\n    ds_expressao\t= '${translation[index].expression}',\n\tds_idioma\t\t= '${translation[index].language}',\n    ds_locale \t\t=  '${translation[index].locale}',\n\tds_layer\t\t= '${translation[index].layer}',\n    nm_usuario \t\t= '${translation[index].modifiedBy}',\n    dt_atualizacao =  sysdate\nWHERE NR_SEQUENCIA = ${translation[index].customExpressionExternalId}`;\n\nmsg.topic               = sqlUpdate;\nmsg.event               = msg.event;\nmsg.value               = msg.value;\nmsg.translationLength   = translationLength;\nmsg.index               = index+1;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 480,
        "wires": [
            [
                "42330a81ae251924"
            ]
        ]
    },
    {
        "id": "4a4f132574406495",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "ResponseExpression",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"customExpressionsExternal\": msg.value.translation\n    };\n\nresponse.eventType          = msg.event;\nresponse.dataRecordResult   = dataRecordResult;\n\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.success = `Rows affected  ${msg.payload.rowsAffected}`;\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1060,
        "wires": [
            [
                "e8a8dd1bba0e1fc0"
            ]
        ]
    },
    {
        "id": "b82c280044223fdd",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "Delete expression response",
        "topic": "spinal.cmdk.expression.ExpressionResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2160,
        "y": 1000,
        "wires": []
    },
    {
        "id": "e8a8dd1bba0e1fc0",
        "type": "json",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1950,
        "y": 1000,
        "wires": [
            [
                "b82c280044223fdd"
            ]
        ]
    },
    {
        "id": "89bc5af0266cdf24",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "Delete expression custom Script",
        "func": "let indexCustom             = msg.indexCustom == null ? 0 : msg.indexCustom;\nconst communicationTopic    = msg.event == null ? msg.payload.value.communicationTopic.eventType : msg.event;\nconst dataRecord            = msg.value == null ? msg.payload.value.dataRecord : msg.value;\nconst translation           = dataRecord.translation;\nconst translationLength     = msg.translationLength == null ? translation.length : msg.translationLength;\n\nconst scriptDelete = \n    `DELETE FROM dic_expressao_custom \n    WHERE nr_sequencia =\n     ${translation[indexCustom].customExpressionExternalId}`;\n\nmsg.topic = scriptDelete;\nmsg.event = communicationTopic;\nmsg.value = dataRecord;\nmsg.indexCustom = indexCustom+1;\nmsg.translationLength   = translationLength;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 760,
        "wires": [
            [
                "4684df491d6563bd"
            ]
        ]
    },
    {
        "id": "2f3570e906e6d75b",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "switch - Loop records custom ",
        "property": "translationLength",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "index",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "index",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2160,
        "y": 580,
        "wires": [
            [
                "35e1173f13ac1ea5"
            ],
            [
                "7706da1dd6e822c0"
            ]
        ]
    },
    {
        "id": "a9b2a50be72e71b9",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "parameters": [],
        "name": "Create expressao script",
        "func": "const dataRecord            = msg.value;\nconst sqlInsert = `insert into dic_expressao( \n\t\tcd_expressao,\n\t\tds_glossario,\n\t\tnm_usuario,\t\t\t\t\n\t\tnm_usuario_nrec,\n\t\tdt_atualizacao,\n\t\tdt_atualizacao_nrec)\n\t\tvalues(\n     ${dataRecord.externalId},\n     '${dataRecord.glossary}',\n     '${dataRecord.modifiedBy}',\n\t '${dataRecord.createdBy}',\n     sysdate,\n\t sysdate)`;\n\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 340,
        "wires": [
            [
                "337073dd54037f8d"
            ]
        ]
    },
    {
        "id": "c7c83e2ce6850eee",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "switch - Loop records custom ",
        "property": "translationLength",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "indexCustom",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "indexCustom",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2160,
        "y": 180,
        "wires": [
            [
                "aad37fcd27a6d303"
            ],
            [
                "ac7109048e1acabd"
            ]
        ]
    },
    {
        "id": "c0b60a9dcf0f8a9f",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "switch - Status result custom",
        "property": "statusResult",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1880,
        "y": 480,
        "wires": [
            [
                "2f3570e906e6d75b"
            ],
            [
                "7706da1dd6e822c0"
            ]
        ]
    },
    {
        "id": "dc053316ad3952b2",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Fetch translations Script",
        "func": "// Get query parameters\nconst page          \t= msg.payload.value.page || 1;\nconst pageSize      \t= msg.payload.value.limit || 50;\nconst orderDirection   \t= msg.payload.value.direction || 'ASC';\nconst language      \t= msg.payload.value.language;\nconst locale        \t= msg.payload.value.locale;\nconst layer         \t= msg.payload.value.layer;\nconst isLike        \t= msg.payload.value.isLike;\nconst id            \t= msg.payload.value.id;\nconst description   \t= msg.payload.value.description;\nconst entry             = msg.payload.value.entry;\n\n// Add AND clauses\nlet restriction = '';\nlet expression = '';\n\nif (language) {\n\trestriction += ` AND (DS_IDIOMA IS NULL OR DS_IDIOMA = '${language}') `;\n}\n\nif (locale) {\n\trestriction += ` AND (DS_LOCALE IS NULL OR DS_LOCALE = '${locale}') `;\n}\n\nif (id) {\n\trestriction += ` AND (CD_EXPRESSAO = '${id}') `;\n}\n\nif (description) {\n    expression = description;\n\tif (isLike == \"true\") {\n\t\trestriction += ` AND (UPPER(DS_EXPRESSAO) LIKE UPPER('%${expression}%'))`;\n\t} else {\n\t\trestriction += ` AND (UPPER(DS_EXPRESSAO) = UPPER('${expression}'))`;\n\t}\n}\n\n// Add ORDER BY clauses\nlet orderBy = ' ORDER BY ';\n\nif (entry) {\n    orderBy += `ORDER_PRIORITY, ${entry} ${orderDirection} `;\n}else{\n    orderBy += 'SIMILARITY desc, ORDER_PRIORITY ';\n}\n\nif (orderDirection) {\n\torderBy += ` , DS_EXPRESSAO ${orderDirection} `;\n}\n\n// Default SQL\nconst expressionSql = `\n    SELECT t.*, \n           count(t.nr_sequencia) OVER() AS total\n\tFROM (\n\t\tSELECT  1 ORDER_PRIORITY,\n\t\t        NR_SEQUENCIA,\n\t\t        CD_EXPRESSAO,\n\t\t        DS_EXPRESSAO,\n\t\t        DS_LOCALE,\n\t\t        DS_IDIOMA,\n\t\t        DS_LAYER,\n\t\t        'CUSTOM' ORIGIN,\n\t\t        IE_SITUACAO,\n\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\tDT_ATUALIZACAO_NREC,\n\t\t\t\tNM_USUARIO,\n\t\t\t\tNM_USUARIO_NREC,\n\t\t\t\tROUND(UTL_MATCH.JARO_WINKLER(DS_EXPRESSAO, '${expression}') * 100, 6) SIMILARITY\n\t\tFROM dic_expressao_custom\n\t\tWHERE 1 = 1\n\t\t${restriction}\n\t\tUNION ALL\n\t\tSELECT  2 ORDER_PRIORITY,\n\t\t        NR_SEQUENCIA,\n\t\t        CD_EXPRESSAO,\n\t\t        DS_EXPRESSAO,\n\t\t        DS_LOCALE,\n\t\t        DS_IDIOMA,\n\t\t        'CORE' DS_LAYER,\n\t\t        'CORE' ORIGIN,\n\t\t\t\t'NA' IE_SITUACAO,\n\t\t\t\tDT_ATUALIZACAO,\n\t\t\t\tDT_ATUALIZACAO_NREC,\n\t\t\t\tNM_USUARIO,\n\t\t\t\tNM_USUARIO_NREC,\n\t\t\t\tROUND(UTL_MATCH.JARO_WINKLER(DS_EXPRESSAO, '${expression}') * 100, 6) SIMILARITY\n\t\tFROM   dic_expressao_idioma\n\t\tWHERE 1 = 1\n\t\t${restriction}\n\t) t ${orderBy}\n`;\n\n\nlet beginPage;\n\nif (page <= 1) {\n    beginPage = 1;\n} else {\n    beginPage = (parseInt(page) * parseInt(pageSize)) + 1;\n}\n\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${expressionSql}) PAGING WHERE (ROWNUM < \n\t${endPage}\n))\nWHERE (PAGING_RN >= \n\t${beginPage}\n)`;\n\nmsg.topic = paging;\nmsg.event = 'SELECT';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1380,
        "wires": [
            [
                "a80f64fb29763998",
                "2b5f6e0a37544fe4"
            ]
        ]
    },
    {
        "id": "426c3c32e7268176",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Response translations",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1380,
        "wires": [
            [
                "fe5ed7e48c40b140",
                "88815251375dd1bb"
            ]
        ]
    },
    {
        "id": "a80f64fb29763998",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Built SQL - Translations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1480,
        "wires": []
    },
    {
        "id": "7ba1da787889fdda",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Incoming Payload - Translations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1480,
        "wires": []
    },
    {
        "id": "dc276eeec9b6eeb3",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug SQL Result - Translations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1480,
        "wires": []
    },
    {
        "id": "acae956254d17056",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Fetch expression  Script",
        "func": "// Get query parameters\nconst expressionIds = msg.payload.value.expressionIds;\n\nconst sql = `\n  SELECT CD_EXPRESSAO,\n         DS_GLOSSARIO,\n         NM_USUARIO,\n         NM_USUARIO_NREC,\n         DT_ATUALIZACAO,\n         DT_ATUALIZACAO_NREC\n  FROM   DIC_EXPRESSAO\n  WHERE  CD_EXPRESSAO IN (${expressionIds})\n`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-EXPRESSION';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1620,
        "wires": [
            [
                "3a61e5038d0c145b",
                "5ba78d77b9b4fa6b"
            ]
        ]
    },
    {
        "id": "796b7e6e5ba82f9b",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Response expression",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1620,
        "wires": [
            [
                "c76a4245be2270f0",
                "9271a6dea0b486a1"
            ]
        ]
    },
    {
        "id": "3a61e5038d0c145b",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Built SQL - Expression",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1720,
        "wires": []
    },
    {
        "id": "cebefcd07e693f64",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Incoming Payload - Expression",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c76a4245be2270f0",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug SQL Result - Expression",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1770,
        "y": 1720,
        "wires": []
    },
    {
        "id": "c2f10c221d18f4a4",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "switch - Contains expression language",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 840,
        "wires": [
            [
                "35e399db9557fb57"
            ],
            [
                "4a4f132574406495"
            ]
        ]
    },
    {
        "id": "dd94b45289ea1a12",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "Delete expression Script",
        "func": "const dataRecord            = msg.value;\nconst scriptDeleteExpression = \n    `DELETE FROM dic_expressao \n    WHERE cd_expressao =\n     ${dataRecord.expressionExternalId}`;\n\nmsg.topic = scriptDeleteExpression;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 760,
        "wires": [
            [
                "8bf15ec7b645bccf"
            ]
        ]
    },
    {
        "id": "65ca629e22b6f1f8",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "parameters": [],
        "name": "Count expression script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptExpression = \n    `SELECT * FROM dic_expressao\n    WHERE cd_expressao =\n     ${dataRecord.externalId}`;\n\nmsg.topic = scriptExpression;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 80,
        "wires": [
            [
                "e58c7f30f5c6d40c"
            ]
        ]
    },
    {
        "id": "4ce3a1ea1ee33ab6",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "switch - Contains expression",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 800,
        "y": 240,
        "wires": [
            [
                "aad37fcd27a6d303"
            ],
            [
                "a9b2a50be72e71b9"
            ]
        ]
    },
    {
        "id": "c62a4b7254fbe18d",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Fetch expression  Script",
        "func": "// Get query parameters\nconst expression = msg.payload.value.expression;\nconst minSimilarity = msg.payload.value.minSimilarity;\nconst expressionExternalId = msg.payload.value.expressionExternalId;\nconst locale = msg.payload.value.locale;\n\nlet restriction = '';\n\nif (expressionExternalId != 0) {\n\trestriction += ` and e.cd_expressao <> ${expressionExternalId} `;\n}\n\nlet parsedExpression = '';\n\nif (expression) {\n    parsedExpression = expression;\n}\n\nconst sql = `\n  SELECT * FROM ( (SELECT e.CD_EXPRESSAO customExpressionExternalId, i.DS_EXPRESSAO expression, i.ds_locale locale, i.ds_idioma language, '' layer,\n        e.DS_GLOSSARIO glossary,\n        ROUND(UTL_MATCH.JARO_WINKLER(i.DS_EXPRESSAO, '${parsedExpression}') * 100, 6) SIMILARITY\n        FROM DIC_EXPRESSAO e, DIC_EXPRESSAO_IDIOMA i\n        WHERE UTL_MATCH.JARO_WINKLER_SIMILARITY(i.DS_EXPRESSAO, '${parsedExpression}') >= ${minSimilarity}\n        and e.cd_expressao = i.cd_expressao\n        and i.ds_locale = '${locale}'\n        ${restriction}\n        )\n    UNION\n        (SELECT e.CD_EXPRESSAO customExpressionExternalId, c.DS_EXPRESSAO expression, c.ds_locale locale, c.ds_idioma language, c.ds_layer layer,\n        e.DS_GLOSSARIO glossary,\n        ROUND(UTL_MATCH.JARO_WINKLER(c.DS_EXPRESSAO, '${parsedExpression}') * 100, 6) SIMILARITY\n        FROM DIC_EXPRESSAO e, DIC_EXPRESSAO_CUSTOM c\n        WHERE UTL_MATCH.JARO_WINKLER_SIMILARITY(c.DS_EXPRESSAO, '${parsedExpression}') >= ${minSimilarity}\n        and e.cd_expressao = c.cd_expressao\n        and c.ds_locale = '${locale}'\n        ${restriction}\n        )\n        )\n        where ROWNUM <= 5 ORDER BY SIMILARITY DESC, expression`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-EXPRESSION-SIMILARITY';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1880,
        "wires": [
            [
                "16ee72e75993967e",
                "660bd6c1bbf28b7b"
            ]
        ]
    },
    {
        "id": "77dc4e7eaa7d0315",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Incoming Payload - Similarity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1980,
        "wires": []
    },
    {
        "id": "16ee72e75993967e",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Built SQL - Similarity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1980,
        "wires": []
    },
    {
        "id": "1b26c1add67a5889",
        "type": "function",
        "z": "3efdca799f3d7045",
        "parameters": [],
        "name": "Response expression",
        "func": "const response = {};\nif(msg.error){\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1880,
        "wires": [
            [
                "34419830360a520c",
                "429263b437ee7b20"
            ]
        ]
    },
    {
        "id": "34419830360a520c",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug SQL Result - Similarity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 1980,
        "wires": []
    },
    {
        "id": "66dbedc37a9d623f",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "switch - Loop delete records custom ",
        "property": "translationLength",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "indexCustom",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "indexCustom",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "89bc5af0266cdf24"
            ],
            [
                "b472a393f8796cc0"
            ]
        ]
    },
    {
        "id": "b472a393f8796cc0",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "Count expression language script",
        "func": "const dataRecord            = msg.value;\nconst scriptIdioma = \n    `SELECT * FROM dic_expressao_idioma\n    WHERE cd_expressao =\n     ${dataRecord.expressionExternalId}`;\n\nmsg.topic = scriptIdioma;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 1000,
        "wires": [
            [
                "ec0f74fd11f07d9e"
            ]
        ]
    },
    {
        "id": "a54dc0580ab3cf9f",
        "type": "switch",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "switch - Contains expression custom",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 920,
        "wires": [
            [
                "dd94b45289ea1a12"
            ],
            [
                "4a4f132574406495"
            ]
        ]
    },
    {
        "id": "35e399db9557fb57",
        "type": "function",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "Count expression custom Script",
        "func": "const dataRecord            = msg.value;\nconst scriptCustom = \n    `SELECT * FROM dic_expressao_custom\n    WHERE cd_expressao =\n     ${dataRecord.expressionExternalId}`;\n\nmsg.topic = scriptCustom;\nmsg.value = dataRecord;\nmsg.indexCustom = msg.indexCustom+1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 760,
        "wires": [
            [
                "c034cafbfc86420d"
            ]
        ]
    },
    {
        "id": "e58c7f30f5c6d40c",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "",
        "x": 770,
        "y": 160,
        "wires": [
            [
                "4ce3a1ea1ee33ab6"
            ]
        ]
    },
    {
        "id": "337073dd54037f8d",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "",
        "x": 1030,
        "y": 340,
        "wires": [
            [
                "7f05698c6dd8fd93"
            ]
        ]
    },
    {
        "id": "96d9d5fa94de0503",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "755c36ba5c070841",
        "name": "",
        "x": 1630,
        "y": 80,
        "wires": [
            [
                "c7c83e2ce6850eee"
            ]
        ]
    },
    {
        "id": "6c29c49b83260393",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "",
        "x": 910,
        "y": 620,
        "wires": [
            [
                "4bf87d42f0abcbcb"
            ]
        ]
    },
    {
        "id": "42330a81ae251924",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "9918509df341f9d9",
        "name": "",
        "x": 1630,
        "y": 480,
        "wires": [
            [
                "c0b60a9dcf0f8a9f"
            ]
        ]
    },
    {
        "id": "4684df491d6563bd",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "",
        "x": 830,
        "y": 880,
        "wires": [
            [
                "66dbedc37a9d623f"
            ]
        ]
    },
    {
        "id": "ec0f74fd11f07d9e",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "",
        "x": 1150,
        "y": 920,
        "wires": [
            [
                "c2f10c221d18f4a4"
            ]
        ]
    },
    {
        "id": "c034cafbfc86420d",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "",
        "x": 1530,
        "y": 840,
        "wires": [
            [
                "a54dc0580ab3cf9f"
            ]
        ]
    },
    {
        "id": "8bf15ec7b645bccf",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "g": "1ba5cb9d2f020772",
        "name": "",
        "x": 1930,
        "y": 840,
        "wires": [
            [
                "4a4f132574406495"
            ]
        ]
    },
    {
        "id": "2b5f6e0a37544fe4",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "name": "",
        "x": 1230,
        "y": 1380,
        "wires": [
            [
                "426c3c32e7268176",
                "dc276eeec9b6eeb3"
            ]
        ]
    },
    {
        "id": "5ba78d77b9b4fa6b",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "name": "",
        "x": 1210,
        "y": 1620,
        "wires": [
            [
                "796b7e6e5ba82f9b"
            ]
        ]
    },
    {
        "id": "660bd6c1bbf28b7b",
        "type": "tasy data access",
        "z": "3efdca799f3d7045",
        "name": "",
        "x": 1230,
        "y": 1880,
        "wires": [
            [
                "1b26c1add67a5889"
            ]
        ]
    },
    {
        "id": "b44a3b12511141d3",
        "type": "spinal-consumer",
        "z": "3efdca799f3d7045",
        "name": "Expression Similarity Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.expression.ExpressionSimilarityRequest",
        "groupid": "cmdk-smartlink-expression-similarity-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 460,
        "y": 1880,
        "wires": [
            [
                "bbc0cd7657a46f98"
            ]
        ]
    },
    {
        "id": "bbc0cd7657a46f98",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 1880,
        "wires": [
            [
                "c62a4b7254fbe18d",
                "77dc4e7eaa7d0315"
            ]
        ]
    },
    {
        "id": "429263b437ee7b20",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1710,
        "y": 1880,
        "wires": [
            [
                "2c475eb9825a0ff0"
            ]
        ]
    },
    {
        "id": "2c475eb9825a0ff0",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "name": "Expression Similarity Reply",
        "topic": "spinal.cmdk.expression.ExpressionSimilarityReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1940,
        "y": 1880,
        "wires": []
    },
    {
        "id": "e16b2188dc3df179",
        "type": "spinal-consumer",
        "z": "3efdca799f3d7045",
        "name": "Expression Data Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.expression.ExpressionsQueryRequest",
        "groupid": "cmdk-smartlink-expression-data-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 450,
        "y": 1620,
        "wires": [
            [
                "5d68347bafa7a7a2"
            ]
        ]
    },
    {
        "id": "5d68347bafa7a7a2",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 1620,
        "wires": [
            [
                "acae956254d17056",
                "cebefcd07e693f64"
            ]
        ]
    },
    {
        "id": "9271a6dea0b486a1",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1690,
        "y": 1620,
        "wires": [
            [
                "be1afea7a8422dc1"
            ]
        ]
    },
    {
        "id": "be1afea7a8422dc1",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "name": "Expression Data Reply",
        "topic": "spinal.cmdk.expression.ExpressionsQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1900,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cd6ade8c46d7441c",
        "type": "spinal-consumer",
        "z": "3efdca799f3d7045",
        "name": "Translations Data Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.expression.TranslationsQueryRequest",
        "groupid": "cmdk-smartlink-expression-translations-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "b2fb83c7f1fa47f0"
            ]
        ]
    },
    {
        "id": "b2fb83c7f1fa47f0",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 690,
        "y": 1380,
        "wires": [
            [
                "dc053316ad3952b2",
                "7ba1da787889fdda"
            ]
        ]
    },
    {
        "id": "fe5ed7e48c40b140",
        "type": "json",
        "z": "3efdca799f3d7045",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1890,
        "y": 1380,
        "wires": [
            [
                "29b506443b665676"
            ]
        ]
    },
    {
        "id": "29b506443b665676",
        "type": "spinal-producer",
        "z": "3efdca799f3d7045",
        "name": "Translations Data Reply",
        "topic": "spinal.cmdk.expression.TranslationsQueryReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2110,
        "y": 1380,
        "wires": []
    },
    {
        "id": "88815251375dd1bb",
        "type": "debug",
        "z": "3efdca799f3d7045",
        "name": "Debug Response Translations",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 1480,
        "wires": []
    },
    {
        "id": "163e4ada244a98a1",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "parameters": [],
        "name": "Attribute Tables Tasy Function",
        "func": "const tableName = msg.payload.value.tableName;\n\nconst sql = `\n    select * \n    from tabela_atributo \n    where nm_tabela in (${tableName})\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-ATTRIBUTE-TABLES-TASY';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 120,
        "wires": [
            [
                "f047c81ad6d3273a",
                "b88978cf25ccab6d"
            ]
        ]
    },
    {
        "id": "a02983c141b15225",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "parameters": [],
        "name": "Attibute Tables Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "4d9f095dc2c62b28",
                "6bb669810cef07ae"
            ]
        ]
    },
    {
        "id": "f047c81ad6d3273a",
        "type": "tasy data access",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "",
        "x": 810,
        "y": 120,
        "wires": [
            [
                "a02983c141b15225",
                "6ca9439ef030bdbf"
            ]
        ]
    },
    {
        "id": "6ca9439ef030bdbf",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 200,
        "wires": []
    },
    {
        "id": "b88978cf25ccab6d",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 200,
        "wires": []
    },
    {
        "id": "9bcbe2ceeb95f442",
        "type": "spinal-consumer",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "Get Attribute Tables",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.logset.AttributeTablesRequest",
        "groupid": "cmdk-smartlink-logset-attribute-tables-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "4cfe95b873dd8f15"
            ]
        ]
    },
    {
        "id": "4d9f095dc2c62b28",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "4cfe95b873dd8f15",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 120,
        "wires": [
            [
                "163e4ada244a98a1"
            ]
        ]
    },
    {
        "id": "6bb669810cef07ae",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 120,
        "wires": [
            [
                "12d98ff07452155b"
            ]
        ]
    },
    {
        "id": "12d98ff07452155b",
        "type": "spinal-producer",
        "z": "7907e6b5a498bbb3",
        "g": "96cc1f5ad40b9c94",
        "name": "",
        "topic": "spinal.cmdk.logset.AttributeTablesReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1440,
        "y": 120,
        "wires": []
    },
    {
        "id": "60a88fae9a47a3e7",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "parameters": [],
        "name": "Attribute Index Tables Tasy Function",
        "func": "const tableName = msg.payload.value.tableName;\n\nconst sql = `\n    select a.* from indice i, indice_atributo a\n    where ie_tipo = 'PK'\n    and i.nm_tabela = a.nm_tabela\n    and i.nm_indice = a.nm_indice\n    and i.nm_tabela in (${tableName})\n    order by a.nm_tabela, a.nm_indice, a.nr_sequencia\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-ATTRIBUTE-INDEX-TASY';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "60614d1da3dba76b",
                "04568b8a5624c3fa"
            ]
        ]
    },
    {
        "id": "159ab33fba317c96",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "parameters": [],
        "name": "Attibute Index Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 400,
        "wires": [
            [
                "29d6ec39eb76bf77",
                "feee420d794382d3"
            ]
        ]
    },
    {
        "id": "60614d1da3dba76b",
        "type": "tasy data access",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "",
        "x": 850,
        "y": 400,
        "wires": [
            [
                "159ab33fba317c96",
                "cbe329e77bd7c8b1"
            ]
        ]
    },
    {
        "id": "cbe329e77bd7c8b1",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 480,
        "wires": []
    },
    {
        "id": "04568b8a5624c3fa",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 480,
        "wires": []
    },
    {
        "id": "59949df6c61d3a2e",
        "type": "spinal-consumer",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "Get Attribute Index",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.logset.AttributeIndexRequest",
        "groupid": "cmdk-smartlink-logset-attribute-index-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "2d7746e0c3c719e1"
            ]
        ]
    },
    {
        "id": "29d6ec39eb76bf77",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 480,
        "wires": []
    },
    {
        "id": "2d7746e0c3c719e1",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 400,
        "wires": [
            [
                "60a88fae9a47a3e7"
            ]
        ]
    },
    {
        "id": "feee420d794382d3",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 400,
        "wires": [
            [
                "c9558dfc757ec667"
            ]
        ]
    },
    {
        "id": "c9558dfc757ec667",
        "type": "spinal-producer",
        "z": "7907e6b5a498bbb3",
        "g": "83b9db0870f65db4",
        "name": "",
        "topic": "spinal.cmdk.logset.AttributeIndexReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1480,
        "y": 400,
        "wires": []
    },
    {
        "id": "5eeeb02eddc6e3bd",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "parameters": [],
        "name": "Parameters DB Tasy Function",
        "func": "\nconst sql = `\n    select  sys_context('USERENV', 'INSTANCE_NAME') instance_name,\n            sys_context('USERENV', 'LANGUAGE') charset,\n            SUBSTR(version, 1,INSTR(version,'.', 3, 2)-1) database_version\n    from v$instance\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-PARAMETERS-DATABASE-TASY';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "bd7f479fabdb666b",
                "ca572d6dd0a198b7"
            ]
        ]
    },
    {
        "id": "beb6a4a4eb194e6e",
        "type": "function",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "parameters": [],
        "name": "Parameters DB Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 660,
        "wires": [
            [
                "69b6be02dfb33d3b",
                "62818635cc57e1c0"
            ]
        ]
    },
    {
        "id": "bd7f479fabdb666b",
        "type": "tasy data access",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "",
        "x": 810,
        "y": 660,
        "wires": [
            [
                "beb6a4a4eb194e6e",
                "89c2a29bf7a0facf"
            ]
        ]
    },
    {
        "id": "89c2a29bf7a0facf",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 740,
        "wires": []
    },
    {
        "id": "ca572d6dd0a198b7",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 740,
        "wires": []
    },
    {
        "id": "4eda0338a4ba3767",
        "type": "spinal-consumer",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "Get Parameters Database",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.logset.ParametersDbRequest",
        "groupid": "cmdk-smartlink-logset-parameters-db-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "5f880c4e879cb0cb"
            ]
        ]
    },
    {
        "id": "69b6be02dfb33d3b",
        "type": "debug",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 740,
        "wires": []
    },
    {
        "id": "5f880c4e879cb0cb",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 660,
        "wires": [
            [
                "5eeeb02eddc6e3bd"
            ]
        ]
    },
    {
        "id": "62818635cc57e1c0",
        "type": "json",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 660,
        "wires": [
            [
                "57ee43002aaca6f7"
            ]
        ]
    },
    {
        "id": "57ee43002aaca6f7",
        "type": "spinal-producer",
        "z": "7907e6b5a498bbb3",
        "g": "33b99a38d0baf99c",
        "name": "",
        "topic": "spinal.cmdk.logset.ParametersDbReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1440,
        "y": 660,
        "wires": []
    },
    {
        "id": "caf2040c1d2a10c0",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "[CONDITIONAL] Is object intercepted ?",
        "func": "const objectName = msg.payload.value.objectName;\n\nif (!objectName || !/\\w/g.test(objectName)) {\n    msg.error = \"Invalid object name\";\n    return msg;\n}\n\nconst sql = `select IE_INTERCEPTED from cmdk_object_interceptor where NM_OBJECT = '${objectName}'`;\n\nconst requestValue = {\n    objectName,\n    username : msg.payload.value.username\n};\n\nmsg.topic = sql;\nmsg.event = \"CHECK_OBJECT_INTERCEPTOR\";\nmsg.req = msg.req;\nmsg.headers = msg.payload.headers;\nmsg.requestValue = requestValue;\nmsg.lastPayload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 580,
        "wires": [
            [
                "155462d9c08b7669",
                "35861ecacbe9b5ca"
            ]
        ]
    },
    {
        "id": "155462d9c08b7669",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "x": 530,
        "y": 580,
        "wires": [
            [
                "ac1f04d9fa3642c2",
                "72356aacd6693167"
            ]
        ]
    },
    {
        "id": "ac1f04d9fa3642c2",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "Response structure",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (Array.isArray(msg.payload.select) && msg.payload.select.length > 0) {\n    const resultSet = msg.payload.select[0].resultSet;\n    response.status = 'SUCCESS';\n    if (Array.isArray(resultSet) && resultSet.length > 0) {\n        const isIntercepted = resultSet[0].IE_INTERCEPTED;\n        response.isIntercepted = isIntercepted === 'Y';\n    } else {\n        response.isIntercepted = 'N';    \n    }\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response,\n    headers: msg.headers,\n    requestValue : msg.requestValue\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 580,
        "wires": [
            [
                "edbbe68a02484bb3"
            ]
        ]
    },
    {
        "id": "d9ba4ced2c63cf70",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "[CONDITIONAL] Is object intercepted ?",
        "func": "const objectName = msg.payload.value.objectName;\nif (!objectName || !/\\w/g.test(objectName)) {\n    msg.error = \"Invalid object name\";\n    return msg;\n}\n\nconst sql = `select IE_INTERCEPTED from cmdk_object_interceptor where NM_OBJECT = '${objectName}'`;\n\nmsg.topic = sql\nmsg.event = \"CHECK_OBJECT_INTERCEPTOR\"\nmsg.lastPayload = msg.payload\nmsg.headers = msg.payload.headers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 300,
        "wires": [
            [
                "4c555c72c59b4df5"
            ]
        ]
    },
    {
        "id": "4c555c72c59b4df5",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "673bcec2b7676667"
            ]
        ]
    },
    {
        "id": "673bcec2b7676667",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "Response structure",
        "func": "const response = {};\nconst payload = msg.payload;\n\nif (payload.error && payload.error.length > 0 && payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = payload.error[0].message;\n} else if (payload.select && payload.select.length > 0 && payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    const hasValues = payload.select[0].resultSet.length > 0;\n    const values = payload.select[0].resultSet;\n    const isIntercepted = (hasValues && values[0].IE_INTERCEPTED) || 'N';\n    response.isIntercepted = isIntercepted === 'Y';\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response,\n    ...msg.lastPayload,\n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "ca6ebe25c66d8f96"
            ]
        ]
    },
    {
        "id": "9ff8c045928530b6",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "parameters": [],
        "name": "Object Exists Function",
        "func": "const objectName = msg.payload.value.objectName;\n\nconst sql = `\n    select   * \n    from     all_objects \n    where    object_name = '${objectName}' \n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-CHECK-OBJECT-EXISTS';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 800,
        "wires": [
            [
                "c098b4f962556d0c",
                "8788bcb17d40432f"
            ]
        ]
    },
    {
        "id": "6a7c51c1611498f4",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "parameters": [],
        "name": "Object Exists Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 800,
        "wires": [
            [
                "c73d6f88b9b7dd0f",
                "01237e56c4861a87"
            ]
        ]
    },
    {
        "id": "c098b4f962556d0c",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "",
        "x": 810,
        "y": 800,
        "wires": [
            [
                "6a7c51c1611498f4",
                "0e3de4d3e5ec3cdc"
            ]
        ]
    },
    {
        "id": "0e3de4d3e5ec3cdc",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 880,
        "wires": []
    },
    {
        "id": "8788bcb17d40432f",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 880,
        "wires": []
    },
    {
        "id": "9e38583d72bfcac9",
        "type": "spinal-consumer",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "Check Object Exists",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectExistsRequest",
        "groupid": "cmdk-smartlink-object-interceptor-object-exists-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "a884b952b20e5a19"
            ]
        ]
    },
    {
        "id": "c73d6f88b9b7dd0f",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 880,
        "wires": []
    },
    {
        "id": "a884b952b20e5a19",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 350,
        "y": 800,
        "wires": [
            [
                "9ff8c045928530b6"
            ]
        ]
    },
    {
        "id": "01237e56c4861a87",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1270,
        "y": 800,
        "wires": [
            [
                "2b045eedd665caa9"
            ]
        ]
    },
    {
        "id": "2b045eedd665caa9",
        "type": "spinal-producer",
        "z": "a3d2ca30e7b9fa92",
        "g": "2c3089e52fa3c71e",
        "name": "",
        "topic": "spinal.cmdk.object.ObjectExistsReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1460,
        "y": 800,
        "wires": []
    },
    {
        "id": "a80ed3ce0349d5ef",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Debug payload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 320,
        "wires": []
    },
    {
        "id": "ca6ebe25c66d8f96",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "Run function",
        "func": "const nmObject = msg.payload.value.objectName;\nconst userName = msg.payload.value.username;\nconst isIntercepted = msg.payload.isIntercepted\nconst externalId = msg.payload.value.externalId\n\nif (!nmObject) {\n    msg.error = 'objectName is required.'\n    return msg;\n}\n\nif (!/^[a-zA-Z0-9_]+$/.test(nmObject)) {\n    msg.error = 'Invalid object name.'\n    return msg;\n}\n\nif (isIntercepted) {\n    msg.error = 'Object already have an interceptor'\n    return msg;\n}\n\nlet procedure = `call CMDK_INTERCEPTOR_PCK.ADD_INTERCEPTOR('${nmObject}', '${externalId}','${userName}')`\n\nmsg.topic = procedure;\nmsg.event = 'SQL-OBJECT-INTERCEPTOR-ADD';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 200,
        "wires": [
            [
                "a80ed3ce0349d5ef",
                "16e1f4655ea7ec2f"
            ]
        ]
    },
    {
        "id": "6830823db99ae3a1",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Debug SQL output",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 320,
        "wires": []
    },
    {
        "id": "6b02f5ac357103ec",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "Map Responses",
        "func": "const response = {};\nconst payload = msg.payload;\n\nif (payload.error) {\n    if (Array.isArray(payload.error) && payload.error.length > 0) {\n        response.status = 'ERROR';\n        response.error = payload.error[0].message;    \n    } else {\n        response.status = 'ERROR';\n        response.error = payload.error;\n    }\n} else if (Array.isArray(payload.select)) {\n    const resultSet = payload.select[0].resultSet;\n    if (Array.isArray(resultSet) && resultSet.length > 0  && resultSet[0].IE_INTERCEPTED === 'Y'){\n        response.status = 'SUCCESS';\n        response.rows = [];   \n    } else {\n        response.status = 'ERROR';\n        response.error = 'Failed to added the interceptor to the object.'\n    }\n} else if (msg.error) {\n    response.status = 'ERROR';\n    response.error = msg.error;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 160,
        "wires": [
            [
                "32348a7e1aa37082",
                "2e740ff59f2df0c9"
            ]
        ]
    },
    {
        "id": "16e1f4655ea7ec2f",
        "type": "switch",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 140,
        "wires": [
            [
                "6b02f5ac357103ec"
            ],
            [
                "b7573916b6d6f7c8"
            ]
        ]
    },
    {
        "id": "b7573916b6d6f7c8",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "x": 1350,
        "y": 220,
        "wires": [
            [
                "6830823db99ae3a1",
                "9879a9c4b89331d0"
            ]
        ]
    },
    {
        "id": "8eaa88757d8b6b43",
        "type": "spinal-consumer",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Add Interceptor Consumer",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.interceptor.AddInterceptorRequest",
        "groupid": "cmdk-smartlink-object-interceptor-add-interceptor-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 230,
        "y": 160,
        "wires": [
            [
                "1a33aacaf1db9371"
            ]
        ]
    },
    {
        "id": "1a33aacaf1db9371",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 160,
        "wires": [
            [
                "d9ba4ced2c63cf70"
            ]
        ]
    },
    {
        "id": "025c44a08f58db2c",
        "type": "spinal-producer",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Add Interceptor Reply Producer",
        "topic": "spinal.cmdk.object.interceptor.AddInterceptorReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2310,
        "y": 160,
        "wires": []
    },
    {
        "id": "893bdd3f4d4b6a69",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "Debug topic",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 580,
        "wires": []
    },
    {
        "id": "edbbe68a02484bb3",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "Build delete procedure call",
        "func": "const isIntercepted = msg.payload.isIntercepted\nconst objectName = msg.requestValue.objectName;\nconst userName = msg.requestValue.username || '';\n\nif (!objectName || !/^[a-zA-Z0-9_]+$/.test(objectName)) {\n    msg.error = 'Invalid object name.';\n}\n\nif (!isIntercepted) {\n    msg.error = 'Object does not have an interceptor to remove it';\n    return msg;\n}\n\nconst sql = `CALL CMDK_INTERCEPTOR_PCK.remove_interceptor('${objectName}', '${userName}')`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-OBJECT-DELETION';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 460,
        "wires": [
            [
                "893bdd3f4d4b6a69",
                "81ebbc27f7b7d668"
            ]
        ]
    },
    {
        "id": "09edbfb9f6bb38c4",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "Map Responses",
        "func": "const response = {};\nconst payload = msg.payload;\n\nif (payload.error) {\n    if (Array.isArray(payload.error) && payload.error.length > 0) {\n        response.status = 'ERROR';\n        response.error = payload.error[0].message;    \n    } else {\n        response.status = 'ERROR';\n        response.error = payload.error;\n    }\n} else if (Array.isArray(payload.select)) {\n    const resultSet = payload.select[0].resultSet;\n    if (Array.isArray(resultSet) && resultSet.length > 0  && resultSet[0].IE_INTERCEPTED === 'N'){\n        response.status = 'SUCCESS';\n        response.rows = [];   \n    } else {\n        response.status = 'ERROR';\n        response.error = 'Failed to remove the interceptor from the object.'\n    }\n} else if (msg.error) {\n    response.status = 'ERROR';\n    response.error = msg.error;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 460,
        "wires": [
            [
                "3ea5384e2dfc0cf7"
            ]
        ]
    },
    {
        "id": "bc398a0d9ad52ea6",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "x": 1290,
        "y": 580,
        "wires": [
            [
                "7c703a7353c43847",
                "ab5067d6036d216f"
            ]
        ]
    },
    {
        "id": "81ebbc27f7b7d668",
        "type": "switch",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "property": "error",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 460,
        "wires": [
            [
                "09edbfb9f6bb38c4"
            ],
            [
                "bc398a0d9ad52ea6"
            ]
        ]
    },
    {
        "id": "7c703a7353c43847",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "Debug SQL output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.data",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 520,
        "wires": []
    },
    {
        "id": "9d1ef04f566f6a64",
        "type": "spinal-consumer",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "Remove Interceptor Consumer",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.interceptor.RemoveInterceptorRequest",
        "groupid": "cmdk-smartlink-object-interceptor-remove-interceptor-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "3bc573f03ff1fd70"
            ]
        ]
    },
    {
        "id": "3bc573f03ff1fd70",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "caf2040c1d2a10c0"
            ]
        ]
    },
    {
        "id": "30c4b1cfcdd4c08d",
        "type": "spinal-producer",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "Remove Interceptor Reply Producer",
        "topic": "spinal.cmdk.object.interceptor.RemoveInterceptorReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 2200,
        "y": 460,
        "wires": []
    },
    {
        "id": "32348a7e1aa37082",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2230,
        "y": 120,
        "wires": [
            [
                "025c44a08f58db2c"
            ]
        ]
    },
    {
        "id": "3ea5384e2dfc0cf7",
        "type": "json",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1930,
        "y": 460,
        "wires": [
            [
                "30c4b1cfcdd4c08d"
            ]
        ]
    },
    {
        "id": "35861ecacbe9b5ca",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "name": "Debug payload",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 660,
        "wires": []
    },
    {
        "id": "72356aacd6693167",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "name": "Debug payload after SQL",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 660,
        "wires": []
    },
    {
        "id": "9879a9c4b89331d0",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "[CONDITIONAL] Check again if was intercepted",
        "func": "const objectName = msg.lastPayload.value.objectName;\nif (!objectName || !/\\w/g.test(objectName)) {\n    msg.error = \"Invalid object name\";\n    return msg;\n}\n\nconst sql = `select IE_INTERCEPTED from cmdk_object_interceptor where NM_OBJECT = '${objectName}'`;\n\nmsg.topic = sql\nmsg.event = \"CHECK_OBJECT_INTERCEPTOR\"\nmsg.headers = msg.lastPayload.headers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 180,
        "wires": [
            [
                "25554e1e6c735d22"
            ]
        ]
    },
    {
        "id": "25554e1e6c735d22",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "x": 1730,
        "y": 260,
        "wires": [
            [
                "d2587609a5af0b88",
                "246f1e9bc6e34766"
            ]
        ]
    },
    {
        "id": "d2587609a5af0b88",
        "type": "switch",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "payload.select[0].resultSet",
                "vt": "msg"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 260,
        "wires": [
            [
                "6b02f5ac357103ec"
            ],
            [
                "7ba5fe3921c71ffa"
            ]
        ]
    },
    {
        "id": "246f1e9bc6e34766",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Debug SQL output",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 320,
        "wires": []
    },
    {
        "id": "7ba5fe3921c71ffa",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "parameters": [],
        "name": "Create error Function",
        "func": "const response = {};\n\nresponse.status = 'ERROR'\nresponse.error = 'Failed to added the interceptor to the object.'\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 260,
        "wires": [
            [
                "6b02f5ac357103ec"
            ]
        ]
    },
    {
        "id": "2e740ff59f2df0c9",
        "type": "debug",
        "z": "a3d2ca30e7b9fa92",
        "g": "eee1e0a347e3bd3e",
        "name": "Debug Response 2",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 100,
        "wires": []
    },
    {
        "id": "ab5067d6036d216f",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "[CONDITIONAL] Check again if was intercepted",
        "func": "const objectName = msg.lastPayload.value.objectName;\nif (!objectName || !/\\w/g.test(objectName)) {\n    msg.error = \"Invalid object name\";\n    return msg;\n}\n\nconst sql = `select IE_INTERCEPTED from cmdk_object_interceptor where NM_OBJECT = '${objectName}'`;\n\nmsg.topic = sql\nmsg.event = \"CHECK_OBJECT_INTERCEPTOR\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 640,
        "wires": [
            [
                "32cf2cf8e797f580"
            ]
        ]
    },
    {
        "id": "32cf2cf8e797f580",
        "type": "tasy data access",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "x": 1710,
        "y": 640,
        "wires": [
            [
                "9feb59fd3a907464",
                "7c703a7353c43847"
            ]
        ]
    },
    {
        "id": "fffeadb07ca02a70",
        "type": "function",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "parameters": [],
        "name": "Create error Function",
        "func": "const response = {};\n\nresponse.status = 'ERROR'\nresponse.error = 'Failed to remove the interceptor from the object.'\n\nmsg.payload = { \n    ...response\n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 580,
        "wires": [
            [
                "09edbfb9f6bb38c4"
            ]
        ]
    },
    {
        "id": "9feb59fd3a907464",
        "type": "switch",
        "z": "a3d2ca30e7b9fa92",
        "g": "2ba96343227c6957",
        "name": "",
        "property": "payload.select[0].resultSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "payload.select[0].resultSet",
                "vt": "msg"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "09edbfb9f6bb38c4"
            ],
            [
                "fffeadb07ca02a70"
            ]
        ]
    },
    {
        "id": "26a7e4149289936b",
        "type": "json",
        "z": "d32a443b62e791a4",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "433d00c45fce5c04"
            ]
        ]
    },
    {
        "id": "433d00c45fce5c04",
        "type": "switch",
        "z": "d32a443b62e791a4",
        "name": "event",
        "property": "payload.value.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 510,
        "y": 400,
        "wires": [
            [
                "eb43f29a46a4e225"
            ],
            [
                "d6cdd2118f200322"
            ],
            [
                "8e7e36f24cfb9d7c"
            ]
        ]
    },
    {
        "id": "d6cdd2118f200322",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "parameters": [],
        "name": "Update object script",
        "func": "const dataRecord = msg.payload.value.dataRecord;\nconst isObjectFlow = true;\n\nif(dataRecord.creationScript){\n\tobjectScript = dataRecord.creationScript.replaceAll(/'/g, \"''\");\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlUpdate = `UPDATE OBJETO_SISTEMA SET IE_TIPO_OBJETO = '${dataRecord.objectType}' , DS_APLICACAO = '${dataRecord.applicationName}', DS_SCRIPT_CRIACAO = '${objectScript}' WHERE NR_SEQUENCIA = '${dataRecord.objectExternalId}' `;\nmsg.topic = sqlUpdate;\nmsg.isObjectFlow = isObjectFlow;\nmsg.value = dataRecord;\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 740,
        "wires": [
            [
                "3243e3af501b9562"
            ]
        ]
    },
    {
        "id": "e1ce4cc28579223c",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "parameters": [],
        "name": "Object Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"OBJECT\",\n\t    \"objectName\": msg.value.objectName,\n\t    \"objectType\": msg.value.objectType\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nresponse.correlationId = msg.headers ? msg.headers.kafka_correlationId : '';\nmsg.payload = {\n    ...response, \n    headers: msg.headers \n};\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 740,
        "wires": [
            [
                "6a1b2c31bfb8381d",
                "19a41e71134fd1f2"
            ]
        ]
    },
    {
        "id": "6a1b2c31bfb8381d",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1590,
        "y": 740,
        "wires": [
            [
                "c1d107fa7e1194e1"
            ]
        ]
    },
    {
        "id": "19a41e71134fd1f2",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "name": "Update Object Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 660,
        "wires": []
    },
    {
        "id": "3243e3af501b9562",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "name": "",
        "x": 1150,
        "y": 740,
        "wires": [
            [
                "e1ce4cc28579223c",
                "261cea9d9bdc08e3"
            ]
        ]
    },
    {
        "id": "c1d107fa7e1194e1",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "name": "Update object response",
        "topic": "spinal.cmdk.object.PlSqlObjectReply",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1830,
        "y": 740,
        "wires": []
    },
    {
        "id": "b05d98c1b3b8138f",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "parameters": [],
        "name": "Object Response",
        "func": "const response = {};\nresponse.objectName = msg.value.objectName\nresponse.objectType = msg.value.objectType\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.message = msg.payload.error.message || msg.payload.error[0].message;\n}\nelse{\n    response.status = 'SUCCESS';\n    response.message = 'PLSQl object saved successfully.'\n}\n\nresponse.correlationId = msg.headers ? msg.headers.kafka_correlationId : '';\nmsg.payload = {\n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 420,
        "wires": [
            [
                "7ad44cb0c27dbf74",
                "3a72cd4d80c24287"
            ]
        ]
    },
    {
        "id": "7ad44cb0c27dbf74",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1610,
        "y": 420,
        "wires": [
            [
                "1c6b9e31d8ae8e7d"
            ]
        ]
    },
    {
        "id": "eeb9a93b4b839341",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "parameters": [],
        "name": "Create object script",
        "func": "const dataRecord = msg.value;\nconst isObjectFlow = true;\nlet objectScript = '';\n \nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n \nif (dataRecord.dtCreated != null) {\n    dataRecord.dtCreated = `to_date('${dataRecord.dtCreated}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\nif(dataRecord.creationScript){\n\tobjectScript = dataRecord.creationScript.replaceAll(/'/g, \"''\");\n}\n \nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n \nconst sqlObjectInsert = `insert into OBJETO_SISTEMA( NR_SEQUENCIA,NM_OBJETO,DS_LAYER,IE_BANCO,IE_TIPO_OBJETO,DS_APLICACAO,NM_USUARIO,DT_ATUALIZACAO,DT_CRIACAO,DS_SCRIPT_CRIACAO,IE_GERAR_SCRIPT) values (${dataRecord.objectExternalId},'${dataRecord.objectName}','${dataRecord.layerName}','${dataRecord.oracleVersion || 'Oracle'}',${checkIsNull(dataRecord.objectType)},'${dataRecord.applicationName}','${dataRecord.createdBy}',${dataRecord.createdOn},${dataRecord.dtCreated},'${objectScript}','N')`;\nmsg.topic = sqlObjectInsert;\nmsg.isObjectFlow = isObjectFlow;\nmsg.value = dataRecord;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 420,
        "wires": [
            [
                "e81a90658f3e1ae6",
                "6942f1265cf57793"
            ]
        ]
    },
    {
        "id": "eb43f29a46a4e225",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "parameters": [],
        "name": "Count Object script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst scriptCountObject =  `SELECT nvl(max(1), 0) CNT FROM OBJETO_SISTEMA WHERE NM_OBJETO = '${dataRecord.objectName}'`;\n\nmsg.topic = scriptCountObject;\nmsg.event = msg.payload.value.eventType;\nmsg.value = dataRecord;\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 180,
        "wires": [
            [
                "580030c9e66345e7"
            ]
        ]
    },
    {
        "id": "3a72cd4d80c24287",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "Response Object debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 320,
        "wires": []
    },
    {
        "id": "97fd1b31be720d58",
        "type": "switch",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "switch - Contains Object",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 320,
        "wires": [
            [
                "d828a784378ffb3b"
            ],
            [
                "eeb9a93b4b839341"
            ]
        ]
    },
    {
        "id": "d828a784378ffb3b",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "parameters": [],
        "name": "Duplicate object ",
        "func": "\nmsg.payload.error = {\n    message: 'object name is already available in system.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 320,
        "wires": [
            [
                "b05d98c1b3b8138f"
            ]
        ]
    },
    {
        "id": "580030c9e66345e7",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "",
        "x": 970,
        "y": 240,
        "wires": [
            [
                "97fd1b31be720d58",
                "a8cb7e318d6a5aeb"
            ]
        ]
    },
    {
        "id": "e81a90658f3e1ae6",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "",
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "b05d98c1b3b8138f",
                "871aa93f93f2ecf4"
            ]
        ]
    },
    {
        "id": "1c6b9e31d8ae8e7d",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "Create object response",
        "topic": "spinal.cmdk.object.PlSqlObjectReply",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1870,
        "y": 420,
        "wires": []
    },
    {
        "id": "8e7e36f24cfb9d7c",
        "type": "function",
        "z": "d32a443b62e791a4",
        "d": true,
        "g": "91c30e173cf33a9d",
        "parameters": [],
        "name": "Delete object Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteObject = `DELETE FROM OBJETO_SISTEMA WHERE NR_SEQUENCIA = '${dataRecord.objectExternalId}' `;\nmsg.topic = scriptDeleteObject;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 980,
        "wires": [
            [
                "1db53a9c67546fa4"
            ]
        ]
    },
    {
        "id": "e1235f5a292e6046",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "parameters": [],
        "name": "Object Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"OBJECT\",\n\t    \"objectName\": msg.value.objectName,\n\t    \"objectType\": msg.value.objectType\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 980,
        "wires": [
            [
                "2b6907b9b8e12c9a",
                "69ca83f45abaa189"
            ]
        ]
    },
    {
        "id": "2b6907b9b8e12c9a",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1590,
        "y": 980,
        "wires": [
            [
                "88080b5c4983decf"
            ]
        ]
    },
    {
        "id": "69ca83f45abaa189",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "name": "Delete Object Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 900,
        "wires": []
    },
    {
        "id": "1db53a9c67546fa4",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "name": "",
        "x": 1130,
        "y": 980,
        "wires": [
            [
                "e1235f5a292e6046",
                "9599846a221832e0"
            ]
        ]
    },
    {
        "id": "88080b5c4983decf",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "name": "Delete object response",
        "topic": "spinal.cmdk.object.PlSqlObjectReply",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1800,
        "y": 980,
        "wires": []
    },
    {
        "id": "5e9d45e7b9e6ab2e",
        "type": "spinal-consumer",
        "z": "d32a443b62e791a4",
        "name": "ObjectRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.PlSqlObjectRequest",
        "groupid": "cmdk-smartlink-object-crud-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 180,
        "y": 400,
        "wires": [
            [
                "26a7e4149289936b"
            ]
        ]
    },
    {
        "id": "261cea9d9bdc08e3",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "423a05067cb3f201",
        "name": "update db debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 660,
        "wires": []
    },
    {
        "id": "9599846a221832e0",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "91c30e173cf33a9d",
        "name": "delete db debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 920,
        "wires": []
    },
    {
        "id": "871aa93f93f2ecf4",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "db debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 480,
        "wires": []
    },
    {
        "id": "6942f1265cf57793",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "creation script debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 480,
        "wires": []
    },
    {
        "id": "a8cb7e318d6a5aeb",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "b151e691ee1cf6bb",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 220,
        "wires": []
    },
    {
        "id": "5cf26b24c54ee5c4",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Synchronization Errors Response",
        "topic": "spinal.cmdk.object.ObjectSyncErrorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1520,
        "y": 1320,
        "wires": []
    },
    {
        "id": "6289fa6833f74cb7",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 1320,
        "wires": [
            [
                "5cf26b24c54ee5c4",
                "73924a62434f968b"
            ]
        ]
    },
    {
        "id": "2705abef542ca107",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "function 4",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1320,
        "wires": [
            [
                "6289fa6833f74cb7"
            ]
        ]
    },
    {
        "id": "73924a62434f968b",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "debug 29",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b581ca0ae3f7c18d",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "x": 930,
        "y": 1320,
        "wires": [
            [
                "2705abef542ca107"
            ]
        ]
    },
    {
        "id": "671acc9f4c86c328",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "Select Errors",
        "func": "const response = {};\nconst objectName = msg.payload.value.objectName;\n\n  \nconst sql = `SELECT e.*, s.ds_script, s.status\nfrom CMDK_SYNC_QUEUE_ERRORS e , CMDK_SYNC_QUEUE s\nwhere e.nr_seq_sync = s.nr_sequencia \nand s.object_name = '${objectName}'`;\n    \nmsg.topic = sql;\nmsg.event = 'SQL-GET-OBJECT-ERRORS';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1320,
        "wires": [
            [
                "b581ca0ae3f7c18d"
            ]
        ]
    },
    {
        "id": "35b82eca8a7921b5",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 610,
        "y": 1320,
        "wires": [
            [
                "671acc9f4c86c328"
            ]
        ]
    },
    {
        "id": "1ce107d71277fa41",
        "type": "spinal-consumer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Synchronization Errors - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectSyncErrorRequest",
        "groupid": "cmdk-smartlink-object-sync-errors-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 380,
        "y": 1320,
        "wires": [
            [
                "35b82eca8a7921b5"
            ]
        ]
    },
    {
        "id": "52d3145f35d07bcb",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 1240,
        "wires": []
    },
    {
        "id": "e42bb4a029eb9a63",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "function 5",
        "func": "const response = {};\n\nresponse.status = 'SUCCESS' \n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} \n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1200,
        "wires": [
            [
                "9df9d76555fa34b5",
                "52d3145f35d07bcb"
            ]
        ]
    },
    {
        "id": "16e9f8735745e517",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "x": 950,
        "y": 1200,
        "wires": [
            [
                "e42bb4a029eb9a63"
            ]
        ]
    },
    {
        "id": "9df9d76555fa34b5",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1290,
        "y": 1200,
        "wires": [
            [
                "ba89d184f1700690"
            ]
        ]
    },
    {
        "id": "b37cb6d643520c30",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "Sync Object",
        "func": "const seqObject = msg.payload.value.seqObject;\nconst objectName = msg.payload.value.objectName;\nconst objectType = msg.payload.value.objectType;\n\nconst sql = `CALL APP_EXTENSION.cmdk_sync_object(${seqObject},'${objectName}','${objectType}')`;\n\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-SYNC-OBJECT';\nmsg.headers = msg.payload.headers;\nmsg.value = objectName;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1200,
        "wires": [
            [
                "16e9f8735745e517"
            ]
        ]
    },
    {
        "id": "ba89d184f1700690",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Synchronization Response",
        "topic": "spinal.cmdk.object.ObjectSynchronizationResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1500,
        "y": 1200,
        "wires": []
    },
    {
        "id": "ee5f0366a0eeee85",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 570,
        "y": 1200,
        "wires": [
            [
                "b37cb6d643520c30"
            ]
        ]
    },
    {
        "id": "611a4a9afe1f4599",
        "type": "spinal-consumer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Synchronization - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectSynchronizationRequest",
        "groupid": "cmdk-smartlink-object-sync-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 350,
        "y": 1200,
        "wires": [
            [
                "ee5f0366a0eeee85"
            ]
        ]
    },
    {
        "id": "683cc194cf7895e3",
        "type": "spinal-producer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Script Response",
        "topic": "spinal.cmdk.object.ObjectScriptResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1470,
        "y": 1460,
        "wires": []
    },
    {
        "id": "937d4ae06e56e0dd",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1250,
        "y": 1460,
        "wires": [
            [
                "683cc194cf7895e3",
                "866aaebf62d897bb"
            ]
        ]
    },
    {
        "id": "c19ee1507aa9d39e",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "function 6",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1460,
        "wires": [
            [
                "937d4ae06e56e0dd"
            ]
        ]
    },
    {
        "id": "866aaebf62d897bb",
        "type": "debug",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1540,
        "wires": []
    },
    {
        "id": "4f8327eb3d217ae6",
        "type": "tasy data access",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "x": 930,
        "y": 1460,
        "wires": [
            [
                "c19ee1507aa9d39e"
            ]
        ]
    },
    {
        "id": "388860a01bd65b00",
        "type": "function",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "parameters": [],
        "name": "Select Script",
        "func": "const response = {};\nconst objectName = msg.payload.value.objectName;\n\n  \nconst sql = `\n    SELECT s.ds_script DS_SCRIPT\n    from CMDK_SYNC_QUEUE s\n    where s.object_name = '${objectName}'\n`;\n    \nmsg.topic = sql;\nmsg.event = 'SQL-GET-OBJECT-SCRIPT';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1460,
        "wires": [
            [
                "4f8327eb3d217ae6"
            ]
        ]
    },
    {
        "id": "2fe9b16276b05409",
        "type": "json",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 550,
        "y": 1460,
        "wires": [
            [
                "388860a01bd65b00"
            ]
        ]
    },
    {
        "id": "c3fcc494ca28d185",
        "type": "spinal-consumer",
        "z": "d32a443b62e791a4",
        "g": "9247181dca5276ec",
        "name": "Object Script - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectScriptRequest",
        "groupid": "cmdk-smartlink-object-sync-script-request",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 320,
        "y": 1460,
        "wires": [
            [
                "2fe9b16276b05409"
            ]
        ]
    },
    {
        "id": "fcf6cf93fd5db240",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object List Function",
        "func": "const page              = msg.payload.value.page || 1;\nconst pageSize          = msg.payload.value.limit || 2;\nconst orderDirection    = msg.payload.value.direction || 'ASC';\nconst entry             = msg.payload.value.entry;\nconst id                = msg.payload.value.id;\nconst description       = msg.payload.value.description;\nconst application       = msg.payload.value.application;\nconst objType           = msg.payload.value.objType;\nconst dsLayer           = msg.payload.value.layer\nconst intercepted       = msg.payload.value.intercepted\n\nlet restriction = '';\nlet objName = '';\nlet objTypeName = '';\nlet applicationType = '';\n\nlet beginPage = (parseInt(page) * parseInt(pageSize)) + parseInt(1) - parseInt(pageSize);\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\n\nif (application) {\n    applicationType = application;\n    restriction += `AND (DS_APLICACAO in '${applicationType}')`\n}\n\n\nif (objType) {\n    objTypeName = objType.toUpperCase();\n    restriction += `AND (upper(OS.IE_TIPO_OBJETO) in ('${objTypeName}'))`;\n} else {\n    restriction += `AND (upper(OS.ie_tipo_objeto) in ('FUNCTION') OR upper(OS.ie_tipo_objeto) in ('TRIGGER') OR upper(OS.ie_tipo_objeto) in ('PROCEDURE'))`;\n}\n\nif (description) {\n    objName = description;\n    restriction += ` AND (UPPER(OS.NM_OBJETO) LIKE UPPER('%${objName}%'))`;\n}\n\nif (id) {\n    restriction += ` AND (OS.nr_sequencia = '${id}') `;\n}\n\nif (intercepted) {\n    if (intercepted === 'Y') {\n        restriction += ` AND (coi.IE_INTERCEPTED = 'Y') `;    \n    } else if (intercepted === 'N') {\n        restriction += ` AND (coi.IE_INTERCEPTED = 'N' or coi.IE_INTERCEPTED IS NULL) `\n    }\n    \n}\n\n// Add ORDER BY clauses\nlet orderBy = ' ORDER BY ';\n\nif (entry) {\n    orderBy += `SIMILARITY DESC, ORDER_PRIORITY, ${entry} ${orderDirection} `;\n}else{\n    orderBy += 'SIMILARITY DESC, IE_GERAR_SCRIPT DESC,NM_OBJETO ';\n}\n\nif (orderDirection) {\n    orderBy += ` , NM_OBJETO ${orderDirection} `;\n}\n\nif (dsLayer) {\n   restriction += ` AND (('${dsLayer}' = 'CORE' AND DS_LAYER IS NULL) OR ('${dsLayer}' != 'CORE' AND DS_LAYER = '${dsLayer}')) `;\n}\n\n\nconst sql = `\nSELECT OS.NM_OBJETO,\n       OS.DS_APLICACAO,\n       UPPER(OS.IE_TIPO_OBJETO) IE_TIPO_OBJETO,\n       OS.NM_USUARIO,\n       OS.DT_ATUALIZACAO,\n       OS.IE_GERAR_SCRIPT,\n       OS.IE_BANCO,\n       OS.IE_MEMORIA,\n       OS.DT_CRIACAO,\n       OS.IE_SITUACAO,\n       OS.nr_sequencia,\n       OS.DS_SCRIPT_CRIACAO,\n       NVL(OS.DS_LAYER, 'CORE') DS_LAYER, \n       COUNT(*) OVER () total,\n       NVL(coi.ie_intercepted, 'N') ie_intercepted,\n       NVL(coi.nr_sequencia, 0) interceptor_sequence,\n       utl_match.jaro_winkler_similarity(os.nm_objeto, '${objName}') SIMILARITY\nFROM OBJETO_SISTEMA OS\nLEFT JOIN CMDK_OBJECT_INTERCEPTOR COI ON COI.NM_OBJECT = OS.NM_OBJETO\nWHERE\n    ((IE_BANCO       = 'null' AND 'null' <> 'null')\n    OR ('null' = 'null' AND IE_BANCO is not null))\n    ${restriction}\n    ${orderBy}`;\n\n\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${sql}) PAGING WHERE (ROWNUM < \n    ${endPage}\n))\nWHERE (PAGING_RN >= ${beginPage})\n`;\n\nmsg.topic = paging;\nmsg.event = 'SQL-OBJECT-LIST';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 120,
        "wires": [
            [
                "a5f4baf546cf9bdf",
                "b1c54671800d8cfd"
            ]
        ]
    },
    {
        "id": "0c222dfeb33d705d",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object List Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "abc074775568f174",
                "bd85cf01b264aa7e"
            ]
        ]
    },
    {
        "id": "a5f4baf546cf9bdf",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "0c222dfeb33d705d",
                "ce52f0199148b751"
            ]
        ]
    },
    {
        "id": "ce52f0199148b751",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 200,
        "wires": []
    },
    {
        "id": "b1c54671800d8cfd",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "716900719f7e70e1",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object List",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectRequest",
        "groupid": "cmdk-smartlink-plsql-data-get-object-list-request",
        "connection": {},
        "broker": "0",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "15f8affcf9a01f70"
            ]
        ]
    },
    {
        "id": "d2163caccf12809a",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.reply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "srv-dck-kosmos.whebdc.com.br:9092"
        },
        "broker": "0",
        "x": 1420,
        "y": 120,
        "wires": []
    },
    {
        "id": "abc074775568f174",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 200,
        "wires": []
    },
    {
        "id": "15f8affcf9a01f70",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "fcf6cf93fd5db240"
            ]
        ]
    },
    {
        "id": "bd85cf01b264aa7e",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1230,
        "y": 120,
        "wires": [
            [
                "d2163caccf12809a"
            ]
        ]
    },
    {
        "id": "3499632e702910d5",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Owner Function",
        "func": "const objectName = msg.payload.value.objectName;\n\n/*\n\n    The NVL function below is used to find the most specific object owner.\n    If present, the owner 'APP_EXTENSION' should be used when querying \n    object data such as it's arguments.\n    \n    The owner retrieved from this flow is used when searching for the object's arguments.\n\n*/\nconst sql = `\n    select nvl(\n        (\n            select  max(owner)\n            from    all_objects\n            where   object_name = '${objectName}'\n            and     owner = 'APP_EXTENSION'\n            and     exists \n                (\n                    select  1\n                    from    all_arguments\n                    where   object_name = '${objectName}'\n                    and     owner = 'APP_EXTENSION'\n                )\n        ),\n        (\n            select  max(owner)\n            from    all_objects\n            where   object_name = '${objectName}'\n        )\n    ) obj_owner\n    from dual\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-OBJECT-OWNER';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 320,
        "wires": [
            [
                "61b1fa6a160e7546",
                "1bd423c2b735c50c"
            ]
        ]
    },
    {
        "id": "e09edb4d3ed53adf",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Owner Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "830640193be4bd80",
                "7a49dac84b122dc4"
            ]
        ]
    },
    {
        "id": "61b1fa6a160e7546",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 770,
        "y": 320,
        "wires": [
            [
                "e09edb4d3ed53adf",
                "278f4f14dca02836"
            ]
        ]
    },
    {
        "id": "278f4f14dca02836",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 400,
        "wires": []
    },
    {
        "id": "1bd423c2b735c50c",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 400,
        "wires": []
    },
    {
        "id": "e06f53d389e1a06c",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object Owner",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectOwnerRequest",
        "groupid": "cmdk-smartlink-plsql-data-get-object-owner-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "6be89976ede1947c"
            ]
        ]
    },
    {
        "id": "830640193be4bd80",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 400,
        "wires": []
    },
    {
        "id": "6be89976ede1947c",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "3499632e702910d5"
            ]
        ]
    },
    {
        "id": "7a49dac84b122dc4",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1230,
        "y": 320,
        "wires": [
            [
                "91dfc51578261523"
            ]
        ]
    },
    {
        "id": "91dfc51578261523",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.ObjectOwnerReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1420,
        "y": 320,
        "wires": []
    },
    {
        "id": "d3dd6359a5462c7b",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Arguments Function",
        "func": "const objectName = msg.payload.value.objectName;\nconst objectOwner = msg.payload.value.objectOwner;\n\nconst sql = `\n    select   *\n    from     all_arguments\n    where    owner = '${objectOwner}'\n    and      argument_name is not null \n    and      object_id = (\n                        select  max(object_id)\n                        from    all_objects\n                        where   object_name = '${objectName}'\n                        and     owner = '${objectOwner}'\n                        )\n    order by sequence\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-OBJECT-ARGUMENTS';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 520,
        "wires": [
            [
                "27bfdba905bc2404",
                "286e27ee30150e4f"
            ]
        ]
    },
    {
        "id": "abf93520ba95296e",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Arguments Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "46eceb91ef889152",
                "60f3a4002c4dec64"
            ]
        ]
    },
    {
        "id": "27bfdba905bc2404",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 770,
        "y": 520,
        "wires": [
            [
                "abf93520ba95296e",
                "4a7cb597212c47d7"
            ]
        ]
    },
    {
        "id": "4a7cb597212c47d7",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 600,
        "wires": []
    },
    {
        "id": "286e27ee30150e4f",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 600,
        "wires": []
    },
    {
        "id": "bc6f33bdb0519111",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object Arguments",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.ObjectArgumentsRequest",
        "groupid": "cmdk-smartlink-plsql-data-get-object-arguments-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "2bab680444e0c6fa"
            ]
        ]
    },
    {
        "id": "46eceb91ef889152",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 600,
        "wires": []
    },
    {
        "id": "2bab680444e0c6fa",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "d3dd6359a5462c7b"
            ]
        ]
    },
    {
        "id": "60f3a4002c4dec64",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1230,
        "y": 520,
        "wires": [
            [
                "9061d198abaea295"
            ]
        ]
    },
    {
        "id": "9061d198abaea295",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.ObjectArgumentsReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1420,
        "y": 520,
        "wires": []
    },
    {
        "id": "97a7225813445b6e",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Trigger Validation Count",
        "func": "const dataRecord = msg.payload.value.dataRecord;\n\nconst sql = `\n    select  count(*) quantity\nfrom       user_triggers a\nwhere      (a.triggering_event = '${dataRecord.paramUp}'\n           or a.triggering_event = '${dataRecord.paramInsUp}')\nand        Upper(a.trigger_name) = upper('${dataRecord.triggerName}')\nand        a.table_name in (select  distinct a.nm_tabela\nfrom    integridade_atributo b,\n       integridade_referencial a\nwhere  a.nm_tabela   = b.nm_tabela\nand  a.nm_integridade_referencial = b.nm_integridade_referencial\nand  a.nm_tabela_referencia   = 'PESSOA_FISICA')\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-OBJECT-TRIGGER-VALIDATION';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 720,
        "wires": [
            [
                "ea5fb839c81be6c0",
                "9d98d6f7ce241b8a"
            ]
        ]
    },
    {
        "id": "146b5a0af9b167ab",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Trigger Validation Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.quantity = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 720,
        "wires": [
            [
                "d3f163c297c97f4f",
                "41f394c897392cf9"
            ]
        ]
    },
    {
        "id": "ea5fb839c81be6c0",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 810,
        "y": 720,
        "wires": [
            [
                "146b5a0af9b167ab",
                "c0856347829efe4a"
            ]
        ]
    },
    {
        "id": "c0856347829efe4a",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "trigger db debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 800,
        "wires": []
    },
    {
        "id": "9d98d6f7ce241b8a",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "trigger validation debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 800,
        "wires": []
    },
    {
        "id": "2d3a38c6a6d8ce98",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object Trigger Count",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.TriggerCountRequest",
        "groupid": "cmdk-smartlink-plsql-data-get-object-trigger-request",
        "connection": {},
        "broker": "0",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "8042da1391c2ca5f"
            ]
        ]
    },
    {
        "id": "d3f163c297c97f4f",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "trigger repsonse debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 800,
        "wires": []
    },
    {
        "id": "8042da1391c2ca5f",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 720,
        "wires": [
            [
                "97a7225813445b6e"
            ]
        ]
    },
    {
        "id": "41f394c897392cf9",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 720,
        "wires": [
            [
                "d9387a724d835f5f"
            ]
        ]
    },
    {
        "id": "d9387a724d835f5f",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.TriggerCountReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 720,
        "wires": []
    },
    {
        "id": "ed3ca5cb5cd87d85",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Dependency Count",
        "func": "const dataRecord = msg.payload.value.dataRecord;\n\nconst sql = `\nSELECT nvl(MAX(1), 0) dependencyCount\nFROM  all_dependencies A \nWHERE A.referenced_name = UPPER('${dataRecord.objectName}')\nAND A.referenced_owner in ('TASY','APP_EXTENSION')\nand A.type <> 'SYNONYM'\n`;\n\nmsg.topic = sql;\nmsg.event = 'SQL-OBJECT-DEPENDENCY';\nmsg.headers = msg.payload.headers\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 920,
        "wires": [
            [
                "013331b449491d07",
                "81fdca2a600ac044"
            ]
        ]
    },
    {
        "id": "881dd3aa26957f23",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Object Dependency Count Response",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.dependencyCount = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 920,
        "wires": [
            [
                "2b70cdc813dbf9bc",
                "39ecf75b84ce00ab"
            ]
        ]
    },
    {
        "id": "013331b449491d07",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 810,
        "y": 920,
        "wires": [
            [
                "881dd3aa26957f23",
                "9ab619550f068757"
            ]
        ]
    },
    {
        "id": "9ab619550f068757",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "dependency db debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1000,
        "wires": []
    },
    {
        "id": "81fdca2a600ac044",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "dependency count debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1cafb55b01d5d628",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object Dependency Count",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.DependencyCountRequest",
        "groupid": "cmdk-smartlink-plsql-data-get-object-dependency-request",
        "connection": {},
        "broker": "0",
        "x": 130,
        "y": 920,
        "wires": [
            [
                "acc7fcb11e1ea929"
            ]
        ]
    },
    {
        "id": "2b70cdc813dbf9bc",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "dependency repsonse debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1000,
        "wires": []
    },
    {
        "id": "acc7fcb11e1ea929",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 920,
        "wires": [
            [
                "ed3ca5cb5cd87d85"
            ]
        ]
    },
    {
        "id": "39ecf75b84ce00ab",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1310,
        "y": 920,
        "wires": [
            [
                "c2466d8f2310588d"
            ]
        ]
    },
    {
        "id": "c2466d8f2310588d",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.DependencyCountReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1480,
        "y": 920,
        "wires": []
    },
    {
        "id": "7dea518a0d60b646",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Objects Layer Function",
        "func": "const sql = `SELECT DISTINCT upper(DS_LAYER) DS_LAYER FROM objeto_sistema ORDER BY DS_LAYER`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-OBJECT-DS-LAYER';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1160,
        "wires": [
            [
                "a3e4d81cd79f4724",
                "510fe0e29268890c"
            ]
        ]
    },
    {
        "id": "87c34d29a214414b",
        "type": "function",
        "z": "a73857c9767dec00",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1160,
        "wires": [
            [
                "2c592135a343a6af",
                "564cd543fdd00f54"
            ]
        ]
    },
    {
        "id": "a3e4d81cd79f4724",
        "type": "tasy data access",
        "z": "a73857c9767dec00",
        "name": "",
        "x": 730,
        "y": 1160,
        "wires": [
            [
                "87c34d29a214414b",
                "a627695b129c31ed"
            ]
        ]
    },
    {
        "id": "e7d5b58f5b88bc21",
        "type": "spinal-consumer",
        "z": "a73857c9767dec00",
        "name": "Get Object Layer",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.object.LayerRequest",
        "groupid": "cmdk-smartlink-layer-get-layer-request",
        "connection": {},
        "broker": "0",
        "x": 100,
        "y": 1160,
        "wires": [
            [
                "28f7530e78101dcf"
            ]
        ]
    },
    {
        "id": "40635ff69c75bf5b",
        "type": "spinal-producer",
        "z": "a73857c9767dec00",
        "name": "",
        "topic": "spinal.cmdk.object.LayerReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1360,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2c592135a343a6af",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 1160,
        "wires": [
            [
                "40635ff69c75bf5b"
            ]
        ]
    },
    {
        "id": "510fe0e29268890c",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "fetch layer debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1240,
        "wires": []
    },
    {
        "id": "564cd543fdd00f54",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "Response layer debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a627695b129c31ed",
        "type": "debug",
        "z": "a73857c9767dec00",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1260,
        "wires": []
    },
    {
        "id": "28f7530e78101dcf",
        "type": "json",
        "z": "a73857c9767dec00",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 1160,
        "wires": [
            [
                "7dea518a0d60b646"
            ]
        ]
    },
    {
        "id": "5c9de12bd4f19c5f",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "Integrity create producer response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1780,
        "y": 1320,
        "wires": []
    },
    {
        "id": "899208a238f46746",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1260,
        "wires": []
    },
    {
        "id": "fcb228e6db2a3c81",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "",
        "x": 1110,
        "y": 1320,
        "wires": [
            [
                "55c15e03d43b8faf"
            ]
        ]
    },
    {
        "id": "66fe80d07f7d17ea",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "",
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "0c2482fce441f435"
            ]
        ]
    },
    {
        "id": "e4b1869389152f55",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "parameters": [],
        "name": "Duplicate Integrity",
        "func": "\nmsg.payload.error = {\n    message: 'Constraint with the given name is already exists.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1220,
        "wires": [
            [
                "55c15e03d43b8faf"
            ]
        ]
    },
    {
        "id": "0c2482fce441f435",
        "type": "switch",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "switch - Contains Integrity",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 1220,
        "wires": [
            [
                "e4b1869389152f55"
            ],
            [
                "40a94d5a1f72adc0"
            ]
        ]
    },
    {
        "id": "7f99c214a2a3acdd",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "Response Integrity debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1220,
        "wires": []
    },
    {
        "id": "a2e74e6c60303727",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "parameters": [],
        "name": "Count integrity script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptConstraint = `SELECT nvl(max(1), 0) cnt FROM INTEGRIDADE_REFERENCIAL WHERE nm_tabela ='${dataRecord.tableName}' and NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.integrityRefName}'`;\n\nmsg.topic = scriptConstraint;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1080,
        "wires": [
            [
                "66fe80d07f7d17ea"
            ]
        ]
    },
    {
        "id": "40a94d5a1f72adc0",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "parameters": [],
        "name": "Create Integrity script",
        "func": "const dataRecord            = msg.value;\nconst sqlInsert = `INSERT INTO INTEGRIDADE_REFERENCIAL (\n    NM_TABELA,\n    NM_INTEGRIDADE_REFERENCIAL,\n    NM_TABELA_REFERENCIA,\n    DT_ATUALIZACAO, \n    NM_USUARIO,\n    IE_REGRA_DELECAO,\n    DS_INTEGRIDADE_REFERENCIAL,\n    IE_CRIAR_ALTERAR,\n    IE_SITUACAO,\n    DT_CRIACAO\n) VALUES (\n\t'${dataRecord.tableName}',\n\t'${dataRecord.integrityRefName}',\n\t'${dataRecord.tableRefName}',\n\tto_date('${dataRecord.createdOn}', 'yyyy-mm-dd hh24:mi:ss'),\n\t'${dataRecord.createdBy}',\t\n\t'${dataRecord.deletionType}',\n    '${dataRecord.integrityRefDesc}',\n    '${dataRecord.actionType}',    \n    '${dataRecord.status}',\n    to_date('${dataRecord.dtCreated}', 'yyyy-mm-dd hh24:mi:ss')\n)`;\n\n\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1320,
        "wires": [
            [
                "fcb228e6db2a3c81",
                "899208a238f46746"
            ]
        ]
    },
    {
        "id": "c7fc6fa2e4759a47",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1550,
        "y": 1320,
        "wires": [
            [
                "5c9de12bd4f19c5f"
            ]
        ]
    },
    {
        "id": "55c15e03d43b8faf",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "356ace33e29d5aac",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INTEGRITY\",\n\t    \"tableName\": msg.value.tableName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1320,
        "wires": [
            [
                "c7fc6fa2e4759a47",
                "7f99c214a2a3acdd"
            ]
        ]
    },
    {
        "id": "ff4feee6a0e54a74",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "Integrity update producer response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1800,
        "y": 1560,
        "wires": []
    },
    {
        "id": "7d088f5a4c365591",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 1500,
        "wires": []
    },
    {
        "id": "afa9dc0c630dc7cb",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1500,
        "wires": []
    },
    {
        "id": "db774a48cab6d9d4",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "",
        "x": 1090,
        "y": 1560,
        "wires": [
            [
                "e95c53f4ba8e80c9",
                "7d088f5a4c365591"
            ]
        ]
    },
    {
        "id": "6781e7bcb4f36bbd",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "Update Integrity Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2bf8e03b01c31e4b",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1550,
        "y": 1560,
        "wires": [
            [
                "ff4feee6a0e54a74"
            ]
        ]
    },
    {
        "id": "e95c53f4ba8e80c9",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INTEGRITY\",\n\t    \"tableName\": msg.value.tableName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1560,
        "wires": [
            [
                "2bf8e03b01c31e4b",
                "6781e7bcb4f36bbd"
            ]
        ]
    },
    {
        "id": "12ec2be389dc849a",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3728acbb344e4289",
        "parameters": [],
        "name": "Update Integrity script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst sqlUpdate = `UPDATE INTEGRIDADE_REFERENCIAL SET NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.integrityRefName}',NM_TABELA_REFERENCIA = '${dataRecord.tableRefName}',IE_REGRA_DELECAO = '${dataRecord.deletionType}',DS_INTEGRIDADE_REFERENCIAL = '${dataRecord.integrityRefDesc}',IE_CRIAR_ALTERAR = '${dataRecord.actionType}',IE_SITUACAO = '${dataRecord.status}' WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.integrityRefName}'`;\n\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1560,
        "wires": [
            [
                "db774a48cab6d9d4",
                "afa9dc0c630dc7cb"
            ]
        ]
    },
    {
        "id": "55bcec5b4b91687c",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "name": "Integrity delete producer response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1800,
        "y": 1800,
        "wires": []
    },
    {
        "id": "423aa764a9d12b14",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "name": "",
        "x": 1070,
        "y": 1800,
        "wires": [
            [
                "843b5f3c61ec35cd"
            ]
        ]
    },
    {
        "id": "0353c2457e987a8a",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "name": "Delete Integrity Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1720,
        "wires": []
    },
    {
        "id": "7885b19f7931a1dd",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1550,
        "y": 1800,
        "wires": [
            [
                "55bcec5b4b91687c"
            ]
        ]
    },
    {
        "id": "843b5f3c61ec35cd",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INTEGRITY\",\n\t    \"tableName\": msg.value.tableName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1800,
        "wires": [
            [
                "7885b19f7931a1dd",
                "0353c2457e987a8a"
            ]
        ]
    },
    {
        "id": "b5e9ec2a9d1f0413",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "d0805d62449a5f47",
        "parameters": [],
        "name": "Delete Integrity Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteIntrigity = `DELETE FROM INTEGRIDADE_REFERENCIAL \n    WHERE nm_tabela = '${dataRecord.tableName}' AND NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.integrityRefName}' `;\n\nmsg.topic = scriptDeleteIntrigity;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1800,
        "wires": [
            [
                "423aa764a9d12b14"
            ]
        ]
    },
    {
        "id": "6bd02800d534153e",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "Integrity attribute create response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1780,
        "y": 2320,
        "wires": []
    },
    {
        "id": "cfa4b5a43e22a470",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "name": "Integrity attribute update response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1780,
        "y": 2560,
        "wires": []
    },
    {
        "id": "8831a597fbb178cc",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "Integrity attribute delete response",
        "topic": "spinal.cmdk.table.TableResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1840,
        "y": 2800,
        "wires": []
    },
    {
        "id": "a2e909b2d368dcf9",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 2720,
        "wires": []
    },
    {
        "id": "7af8296db61f62e9",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 2720,
        "wires": []
    },
    {
        "id": "283f2911e7dd78ea",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 2480,
        "wires": []
    },
    {
        "id": "ab9b1f40582ab841",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 2160,
        "wires": []
    },
    {
        "id": "6c08553976948305",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1480,
        "y": 2160,
        "wires": []
    },
    {
        "id": "aa8650a511516326",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "",
        "x": 1130,
        "y": 2320,
        "wires": [
            [
                "8b888356d4f2fca8",
                "6c08553976948305"
            ]
        ]
    },
    {
        "id": "a01e4b270fe118ee",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "",
        "x": 850,
        "y": 2140,
        "wires": [
            [
                "6c5fdba525a7f051"
            ]
        ]
    },
    {
        "id": "5d889b70b4d6366c",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "name": "",
        "x": 1130,
        "y": 2560,
        "wires": [
            [
                "56ec4aecae4e66e2"
            ]
        ]
    },
    {
        "id": "b877cadb09e3c8c1",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "",
        "x": 1110,
        "y": 2800,
        "wires": [
            [
                "597e6edb8f1463c3",
                "a2e909b2d368dcf9"
            ]
        ]
    },
    {
        "id": "5624b90477402ab7",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "parameters": [],
        "name": "Duplicate Integrity attribute ",
        "func": "\nmsg.error = {\n    message: 'Attribute name is already exists.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 2220,
        "wires": [
            [
                "8b888356d4f2fca8"
            ]
        ]
    },
    {
        "id": "6c5fdba525a7f051",
        "type": "switch",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "switch - Contains Integrity Attribute",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 2220,
        "wires": [
            [
                "5624b90477402ab7"
            ],
            [
                "67aa034d96936261"
            ]
        ]
    },
    {
        "id": "28ccf0ad5db9a507",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "Response IntegrityAttribute debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 2220,
        "wires": []
    },
    {
        "id": "a86817b28401e6ab",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "parameters": [],
        "name": "Count integrity Attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptIndexAttribute = `SELECT nvl(max(1), 0) cnt FROM INTEGRIDADE_ATRIBUTO WHERE nm_tabela ='${dataRecord.tableName}' and NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.refIntegrityName}'  and nm_atributo = '${dataRecord.attributeName}'`;\n\nmsg.topic = scriptIndexAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2080,
        "wires": [
            [
                "a01e4b270fe118ee"
            ]
        ]
    },
    {
        "id": "67aa034d96936261",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "parameters": [],
        "name": "Create Integrity attribute script",
        "func": "const dataRecord = msg.value;\nconst sqlInsert = `INSERT INTO INTEGRIDADE_ATRIBUTO (NM_TABELA,NM_INTEGRIDADE_REFERENCIAL,NM_ATRIBUTO,IE_SEQUENCIA_CRIACAO,DT_ATUALIZACAO,NM_USUARIO,NM_ATRIBUTO_REF) VALUES ('${dataRecord.tableName}','${dataRecord.refIntegrityName}','${dataRecord.attributeName}','${dataRecord.creationStatus}',to_date('${dataRecord.createdOn}', 'yyyy-mm-dd hh24:mi:ss'),'${dataRecord.createdBy}','${dataRecord.attributeRefName}')`;\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2320,
        "wires": [
            [
                "aa8650a511516326",
                "ab9b1f40582ab841"
            ]
        ]
    },
    {
        "id": "f8c3eb40d5d20e2c",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1530,
        "y": 2320,
        "wires": [
            [
                "6bd02800d534153e"
            ]
        ]
    },
    {
        "id": "8b888356d4f2fca8",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "3718913455d9a5f3",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INTEGRITY_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"IntegrityName\": msg.value.refIntegrityName,\n\t    \"attributeName\": msg.value.attributeName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2320,
        "wires": [
            [
                "f8c3eb40d5d20e2c",
                "28ccf0ad5db9a507"
            ]
        ]
    },
    {
        "id": "52b4dbe3dcdcedbb",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "name": "Update IntegrityAttribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 2480,
        "wires": []
    },
    {
        "id": "6e2d2478bcc79867",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1530,
        "y": 2560,
        "wires": [
            [
                "cfa4b5a43e22a470"
            ]
        ]
    },
    {
        "id": "56ec4aecae4e66e2",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INTEGRITY_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"IntegrityName\": msg.value.refIntegrityName,\n\t    \"attributeName\": msg.value.attributeName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2560,
        "wires": [
            [
                "6e2d2478bcc79867",
                "52b4dbe3dcdcedbb"
            ]
        ]
    },
    {
        "id": "acfe9b3e46dbb5e6",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "f4a0cfae3320e8c8",
        "parameters": [],
        "name": "Update IntegrityAttribute  script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst sqlUpdate = `UPDATE INTEGRIDADE_ATRIBUTO SET NM_ATRIBUTO = '${dataRecord.attributeName}',IE_SEQUENCIA_CRIACAO = '${dataRecord.creationStatus}',NM_ATRIBUTO_REF = '${dataRecord.attributeRefName}' WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INTEGRIDADE_REFERENCIAL = '${dataRecord.refIntegrityName}' AND NM_ATRIBUTO = '${dataRecord.attributeName}'`;\n\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2560,
        "wires": [
            [
                "5d889b70b4d6366c",
                "283f2911e7dd78ea"
            ]
        ]
    },
    {
        "id": "f457a5b3e9329d9f",
        "type": "debug",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "Delete IntegrityAttribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 2720,
        "wires": []
    },
    {
        "id": "9dc8d360388728da",
        "type": "json",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1530,
        "y": 2800,
        "wires": [
            [
                "8831a597fbb178cc"
            ]
        ]
    },
    {
        "id": "597e6edb8f1463c3",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INTEGRITY_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"IntegrityName\": msg.value.refIntegrityName,\n\t    \"attributeName\": msg.value.attributeName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 2800,
        "wires": [
            [
                "9dc8d360388728da",
                "f457a5b3e9329d9f"
            ]
        ]
    },
    {
        "id": "d6d4123a3d139d4b",
        "type": "function",
        "z": "1231ed8272120394",
        "g": "4c4afe0c4ba38ca4",
        "parameters": [],
        "name": "Delete IntegrityAttribute Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteIntrigrityAtt = `DELETE FROM INTEGRIDADE_ATRIBUTO WHERE nm_tabela = '${dataRecord.tableName}' AND NM_INTEGRIDADE_REFERENCIAL ='${dataRecord.refIntegrityName}' AND nm_atributo = '${dataRecord.attributeName}'`;\n\nmsg.topic = scriptDeleteIntrigrityAtt;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2800,
        "wires": [
            [
                "b877cadb09e3c8c1",
                "7af8296db61f62e9"
            ]
        ]
    },
    {
        "id": "2d6cf6ddbbe240f8",
        "type": "spinal-consumer",
        "z": "1231ed8272120394",
        "name": "IntegrityAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.IntegrityAttributeRequest",
        "groupid": "cmdk-smartlink-integrity-attribute-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 150,
        "y": 2320,
        "wires": [
            [
                "a869b6e6b3e4bcd1"
            ]
        ]
    },
    {
        "id": "a869b6e6b3e4bcd1",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 2320,
        "wires": [
            [
                "a8a849133e5275a3"
            ]
        ]
    },
    {
        "id": "a8a849133e5275a3",
        "type": "switch",
        "z": "1231ed8272120394",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 450,
        "y": 2320,
        "wires": [
            [
                "a86817b28401e6ab"
            ],
            [
                "acfe9b3e46dbb5e6"
            ],
            [
                "d6d4123a3d139d4b"
            ]
        ]
    },
    {
        "id": "fa0deb6e10aaceca",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "Fetch Table Integrity Constraint Attribute Script",
        "func": "// Get query parameters\nconst integrityName = msg.payload.value.integrityName;\nconst tableName = msg.payload.value.tableName;\n\nconst sql = `SELECT NM_TABELA,NM_INTEGRIDADE_REFERENCIAL,NM_ATRIBUTO,IE_SEQUENCIA_CRIACAO,DT_ATUALIZACAO, NM_USUARIO,NM_ATRIBUTO_REF FROM INTEGRIDADE_ATRIBUTO WHERE  NM_TABELA = '${tableName}' AND NM_INTEGRIDADE_REFERENCIAL = '${integrityName}'`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-TABLE-ATTRIBUTE-CONSTRAINT';\nmsg.headers = msg.payload.headers;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 620,
        "wires": [
            [
                "02ce4811cee1974f",
                "6876f6856b54b308"
            ]
        ]
    },
    {
        "id": "32c495577eff18fd",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "Response table integrity constraint attribute",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 620,
        "wires": [
            [
                "b88b295b26ec9bcf",
                "ef57ec69a0edeeb7"
            ]
        ]
    },
    {
        "id": "02ce4811cee1974f",
        "type": "debug",
        "z": "1231ed8272120394",
        "name": "Debug Built SQL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 740,
        "wires": []
    },
    {
        "id": "54bfc9c9fb627cf9",
        "type": "debug",
        "z": "1231ed8272120394",
        "name": "Debug Incoming Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "b88b295b26ec9bcf",
        "type": "debug",
        "z": "1231ed8272120394",
        "name": "Debug SQL Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 720,
        "wires": []
    },
    {
        "id": "6876f6856b54b308",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "name": "",
        "x": 1130,
        "y": 620,
        "wires": [
            [
                "32c495577eff18fd"
            ]
        ]
    },
    {
        "id": "98e51710acae2a1b",
        "type": "spinal-consumer",
        "z": "1231ed8272120394",
        "name": "IntegrityConstraintRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.IntegrityConstraintRequest",
        "groupid": "cmdk-smartlink-integrity-constraint-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "60d3188c7869f495"
            ]
        ]
    },
    {
        "id": "60d3188c7869f495",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "351d33dc02f3b5b6"
            ]
        ]
    },
    {
        "id": "351d33dc02f3b5b6",
        "type": "switch",
        "z": "1231ed8272120394",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 1320,
        "wires": [
            [
                "a2e74e6c60303727"
            ],
            [
                "12ec2be389dc849a"
            ],
            [
                "b5e9ec2a9d1f0413"
            ]
        ]
    },
    {
        "id": "1d4bf0a245db7e84",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "Fetch Table Referential Integrity Constraint Script",
        "func": "// Get query parameters\nconst page          \t= msg.requestData.page || 0;\nconst pageSize      \t= msg.requestData.limit || 10;\nconst tableName         = msg.requestData.tableName;\n\n\nconst sql = `SELECT NM_TABELA,NM_INTEGRIDADE_REFERENCIAL,NM_TABELA_REFERENCIA,NM_USUARIO,IE_REGRA_DELECAO,DS_INTEGRIDADE_REFERENCIAL,IE_CRIAR_ALTERAR,IE_SITUACAO,DT_CRIACAO,DT_ATUALIZACAO FROM INTEGRIDADE_REFERENCIAL WHERE NM_TABELA='${tableName}'`;\nlet beginPage = (parseInt(page) * parseInt(pageSize)) + parseInt(1);\nconsole.log(beginPage);\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\nconsole.log(endPage);\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${sql}) PAGING WHERE (ROWNUM < \n\t${endPage}\n))\nWHERE (PAGING_RN >= \n\t${beginPage}\n)`;\nmsg.topic = paging;\nmsg.event = 'SELECT-TABLE-REFERENTIAL-INTEGRITY-CONSTRAINT';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 80,
        "wires": [
            [
                "fcaae3be58d13d1a"
            ]
        ]
    },
    {
        "id": "fcaae3be58d13d1a",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "name": "",
        "x": 1890,
        "y": 220,
        "wires": [
            [
                "7980b5f88912d1ce"
            ]
        ]
    },
    {
        "id": "7980b5f88912d1ce",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "Response table referential integrity constraint",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else if(msg.totalRowCount > 0){\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = [];\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 360,
        "wires": [
            [
                "0c738c8b5fea0bc0",
                "44d17aa5842a6202"
            ]
        ]
    },
    {
        "id": "0c738c8b5fea0bc0",
        "type": "debug",
        "z": "1231ed8272120394",
        "name": "Debug SQL Result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2570,
        "y": 560,
        "wires": []
    },
    {
        "id": "525bde78e4f5c5e3",
        "type": "debug",
        "z": "1231ed8272120394",
        "name": "Debug Incoming Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 400,
        "wires": []
    },
    {
        "id": "f7723353647ee805",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "Integrity count script",
        "func": "const requestData           = {};\nrequestData.page            = msg.payload.value.page;\nrequestData.limit           = msg.payload.value.limit;\nrequestData.tableName       = msg.payload.value.tableName;\n\nconst scriptIntegrityCount  = `SELECT COUNT(*) as cnt FROM INTEGRIDADE_REFERENCIAL WHERE NM_TABELA = '${requestData.tableName}'`;\nmsg.topic                   = scriptIntegrityCount;\nmsg.requestData             = requestData;\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 60,
        "wires": [
            [
                "3e6492287066e43d"
            ]
        ]
    },
    {
        "id": "3e6492287066e43d",
        "type": "tasy data access",
        "z": "1231ed8272120394",
        "name": "",
        "x": 870,
        "y": 60,
        "wires": [
            [
                "a4f0b35559ac5262"
            ]
        ]
    },
    {
        "id": "a4f0b35559ac5262",
        "type": "function",
        "z": "1231ed8272120394",
        "parameters": [],
        "name": "function 3",
        "func": "const rowCount = msg.payload.select[0].resultSet[0].CNT;\n\nmsg.totalRowCount = rowCount;\nif(msg.totalRowCount > 0){\n    msg.payload.hasRowCount = [1];\n} else {\n    msg.payload.hasRowCount = [];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 200,
        "wires": [
            [
                "2e319fb7e165255f"
            ]
        ]
    },
    {
        "id": "2e319fb7e165255f",
        "type": "switch",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 360,
        "wires": [
            [
                "1d4bf0a245db7e84"
            ],
            [
                "7980b5f88912d1ce"
            ]
        ]
    },
    {
        "id": "3e76d3ba9ccb1821",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 370,
        "y": 60,
        "wires": [
            [
                "f7723353647ee805"
            ]
        ]
    },
    {
        "id": "da552747ed9d0b35",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 620,
        "wires": [
            [
                "fa0deb6e10aaceca"
            ]
        ]
    },
    {
        "id": "26ef773576bc14c5",
        "type": "spinal-consumer",
        "z": "1231ed8272120394",
        "name": "GetIntegrityConstraintRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.integrity.GetRequest",
        "groupid": "cmdk-smartlink-integrity-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "3e76d3ba9ccb1821",
                "525bde78e4f5c5e3"
            ]
        ]
    },
    {
        "id": "69c25385c0237226",
        "type": "spinal-consumer",
        "z": "1231ed8272120394",
        "name": "GetIntegrityAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.integrityAttribute.GetRequest",
        "groupid": "cmdk-smartlink-integrity-attribute-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 200,
        "y": 620,
        "wires": [
            [
                "da552747ed9d0b35",
                "54bfc9c9fb627cf9"
            ]
        ]
    },
    {
        "id": "f9b7f2ffdd9a7fb2",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "name": "Get Reply",
        "topic": "spinal.cmdk.table.integrity.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2760,
        "y": 360,
        "wires": []
    },
    {
        "id": "44d17aa5842a6202",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2550,
        "y": 360,
        "wires": [
            [
                "f9b7f2ffdd9a7fb2"
            ]
        ]
    },
    {
        "id": "ef57ec69a0edeeb7",
        "type": "json",
        "z": "1231ed8272120394",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1810,
        "y": 620,
        "wires": [
            [
                "99fd83ab45b2c40e"
            ]
        ]
    },
    {
        "id": "99fd83ab45b2c40e",
        "type": "spinal-producer",
        "z": "1231ed8272120394",
        "name": "Get Reply",
        "topic": "spinal.cmdk.table.integrityAttribute.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2020,
        "y": 620,
        "wires": []
    },
    {
        "id": "256b19252d2c17f9",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Fetch index attributes by table and index name Script",
        "func": "// Get query parameters\nconst tableName = msg.payload.value.tableName;\nconst indexName = msg.payload.value.indexName;\n\nconst sql = `SELECT NM_TABELA,NM_INDICE,NR_SEQUENCIA,NM_ATRIBUTO,DT_ATUALIZACAO,NM_USUARIO,DS_INDICE_FUNCTION FROM INDICE_ATRIBUTO WHERE NM_TABELA = '${tableName}' AND NM_INDICE = '${indexName}'`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-TABLE-INDEX-ATT';\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 860,
        "wires": [
            [
                "60247665e5f7bf95",
                "7a79b0ba5b697584"
            ]
        ]
    },
    {
        "id": "d572a4c2ba8e8eaf",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 960,
        "wires": []
    },
    {
        "id": "7a79b0ba5b697584",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "name": "",
        "x": 1030,
        "y": 860,
        "wires": [
            [
                "115ee2ff8b22b5a9"
            ]
        ]
    },
    {
        "id": "60247665e5f7bf95",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug Built SQL",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 960,
        "wires": []
    },
    {
        "id": "115ee2ff8b22b5a9",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 860,
        "wires": [
            [
                "1345d9ce83c784ff",
                "67b7fd43e694a069"
            ]
        ]
    },
    {
        "id": "1345d9ce83c784ff",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug SQL Result",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 980,
        "wires": []
    },
    {
        "id": "637a196f71b9db64",
        "type": "spinal-consumer",
        "z": "3002d13dd904e424",
        "name": "TableIndexRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.TableIndexRequest",
        "groupid": "cmdk-smartlink-table-index-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 250,
        "y": 1480,
        "wires": [
            [
                "43efbb65aaec32a0"
            ]
        ]
    },
    {
        "id": "43efbb65aaec32a0",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 430,
        "y": 1480,
        "wires": [
            [
                "c8ddbb53f56599cf"
            ]
        ]
    },
    {
        "id": "c8ddbb53f56599cf",
        "type": "switch",
        "z": "3002d13dd904e424",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 570,
        "y": 1480,
        "wires": [
            [
                "564acc97f8605983"
            ],
            [
                "495c7f25bc1c080e"
            ],
            [
                "1b415629bf25d372"
            ]
        ]
    },
    {
        "id": "495c7f25bc1c080e",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "parameters": [],
        "name": "Update index script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlUpdate = `UPDATE indice SET NM_INDICE = '${dataRecord.indexName}', DS_INDICE = ${checkIsNull(dataRecord.indexDescription)}, IE_TIPO = '${dataRecord.indexType}', IE_CLASSIFICACAO = ${checkIsNull(dataRecord.classificationType)}, DS_MENSAGEM = ${checkIsNull(dataRecord.dsMessage)}, IE_CRIAR_ALTERAR = ${checkIsNull(dataRecord.actionType)}, IE_IGNORADO_CLIENTE = ${checkIsNull(dataRecord.isClientIgnored)},  IE_SITUACAO = ${checkIsNull(dataRecord.status)} WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INDICE = '${dataRecord.indexName}' `;\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1820,
        "wires": [
            [
                "a4f031b1ad2e5778"
            ]
        ]
    },
    {
        "id": "65bc2f7e5534802a",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "parameters": [],
        "name": "Index Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INDEX\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1460,
        "y": 1820,
        "wires": [
            [
                "eb952190a120d36e",
                "7932e1945e3c98cc"
            ]
        ]
    },
    {
        "id": "eb952190a120d36e",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1650,
        "y": 1820,
        "wires": [
            [
                "97130c07c7a959ef"
            ]
        ]
    },
    {
        "id": "7932e1945e3c98cc",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "name": "Update Index Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 1740,
        "wires": []
    },
    {
        "id": "a4f031b1ad2e5778",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "name": "",
        "x": 1210,
        "y": 1820,
        "wires": [
            [
                "65bc2f7e5534802a"
            ]
        ]
    },
    {
        "id": "97130c07c7a959ef",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "adc486f83d346eee",
        "name": "Update index response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1890,
        "y": 1820,
        "wires": []
    },
    {
        "id": "89ec9cccbeac2137",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "parameters": [],
        "name": "Index Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INDEX\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1500,
        "wires": [
            [
                "cb1988f942876397",
                "11215e9f16252101"
            ]
        ]
    },
    {
        "id": "cb1988f942876397",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1670,
        "y": 1500,
        "wires": [
            [
                "5c4659a74d8de9a2"
            ]
        ]
    },
    {
        "id": "bde8a78b9779342f",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "parameters": [],
        "name": "Create index script",
        "func": "const dataRecord            = msg.value;\n\nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nif (dataRecord.dateCreated != null) {\n    dataRecord.dateCreated = `to_date('${dataRecord.dateCreated}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlInsert = `INSERT INTO indice (NM_TABELA, NM_INDICE, IE_TIPO, DT_ATUALIZACAO, NM_USUARIO,DS_INDICE,IE_CRIAR_ALTERAR,IE_SITUACAO,DT_CRIACAO,IE_IGNORADO_CLIENTE,IE_CLASSIFICACAO, DS_MENSAGEM) VALUES ('${dataRecord.tableName}', '${dataRecord.indexName}', ${checkIsNull(dataRecord.indexType)}, ${dataRecord.createdOn},'${dataRecord.createdBy}', ${checkIsNull(dataRecord.indexDescription)}, ${checkIsNull(dataRecord.actionType)},${checkIsNull(dataRecord.status)}, ${dataRecord.dateCreated},${checkIsNull(dataRecord.isClientIgnored)},${checkIsNull(dataRecord.classificationType)},${checkIsNull(dataRecord.dsMessage)})`;\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1500,
        "wires": [
            [
                "406df799b73fe900"
            ]
        ]
    },
    {
        "id": "564acc97f8605983",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "parameters": [],
        "name": "Count Index script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptIndex =  `SELECT nvl(max(1), 0) cnt FROM indice WHERE nm_tabela ='${dataRecord.tableName}' and nm_indice = '${dataRecord.indexName}'`;\n\nmsg.topic = scriptIndex;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 1260,
        "wires": [
            [
                "21ce0971dfcf6674"
            ]
        ]
    },
    {
        "id": "11215e9f16252101",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "Response Index debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 1400,
        "wires": []
    },
    {
        "id": "1cc37a8d71a3be59",
        "type": "switch",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "switch - Contains Index",
        "property": "msg.payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1400,
        "wires": [
            [
                "a378bb4a58bd6e5e"
            ],
            [
                "bde8a78b9779342f"
            ]
        ]
    },
    {
        "id": "a378bb4a58bd6e5e",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "parameters": [],
        "name": "Duplicate index",
        "func": "\nmsg.payload.error = {\n    message: 'Index with the given name is already exists.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 1400,
        "wires": [
            [
                "89ec9cccbeac2137"
            ]
        ]
    },
    {
        "id": "21ce0971dfcf6674",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "",
        "x": 1030,
        "y": 1320,
        "wires": [
            [
                "1cc37a8d71a3be59"
            ]
        ]
    },
    {
        "id": "406df799b73fe900",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "",
        "x": 1230,
        "y": 1500,
        "wires": [
            [
                "89ec9cccbeac2137"
            ]
        ]
    },
    {
        "id": "5c4659a74d8de9a2",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "518a90e4a839dc06",
        "name": "Creation index response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1930,
        "y": 1500,
        "wires": []
    },
    {
        "id": "1b415629bf25d372",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "parameters": [],
        "name": "Delete index Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteIndex = `DELETE FROM INDICE WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INDICE = '${dataRecord.indexName}' `;\nmsg.topic = scriptDeleteIndex;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 2060,
        "wires": [
            [
                "64d8b9d586b54854"
            ]
        ]
    },
    {
        "id": "812ec3ba01a232fb",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "parameters": [],
        "name": "Index Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE_INDEX\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 2060,
        "wires": [
            [
                "f142f216eb87b9c1",
                "85edd6736bd138b9"
            ]
        ]
    },
    {
        "id": "f142f216eb87b9c1",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1650,
        "y": 2060,
        "wires": [
            [
                "79c0e471d671e097"
            ]
        ]
    },
    {
        "id": "85edd6736bd138b9",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "name": "Delete Index Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 1980,
        "wires": []
    },
    {
        "id": "64d8b9d586b54854",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "name": "",
        "x": 1190,
        "y": 2060,
        "wires": [
            [
                "812ec3ba01a232fb"
            ]
        ]
    },
    {
        "id": "79c0e471d671e097",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "b0e524e65a5ee9e9",
        "name": "Delete Index response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1860,
        "y": 2060,
        "wires": []
    },
    {
        "id": "ef11448a42562f93",
        "type": "spinal-consumer",
        "z": "3002d13dd904e424",
        "name": "IndexAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.IndexAttributeRequest",
        "groupid": "cmdk-smartlink-table-index-attribute-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 220,
        "y": 2560,
        "wires": [
            [
                "0f95ae75536d760b"
            ]
        ]
    },
    {
        "id": "0f95ae75536d760b",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 2560,
        "wires": [
            [
                "df0fc26e2d33eca6"
            ]
        ]
    },
    {
        "id": "df0fc26e2d33eca6",
        "type": "switch",
        "z": "3002d13dd904e424",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 2560,
        "wires": [
            [
                "633b4fe423968fcc"
            ],
            [
                "807835f53ef585df"
            ],
            [
                "fd05ca2de7a6d9a5"
            ]
        ]
    },
    {
        "id": "807835f53ef585df",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "parameters": [],
        "name": "Update index attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlUpdateIAttribute = `UPDATE indice_atributo SET NR_SEQUENCIA = ${dataRecord.creationSequence}, NM_ATRIBUTO = '${dataRecord.attributeName}' WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INDICE = '${dataRecord.indexName}' AND NM_ATRIBUTO = '${dataRecord.attributeName}' `;\nmsg.topic = sqlUpdateIAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2800,
        "wires": [
            [
                "5c299fb843dd635c",
                "efe74933e9de08e9"
            ]
        ]
    },
    {
        "id": "28be37970d1bcef5",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "parameters": [],
        "name": "IAttribute Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INDEX_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2800,
        "wires": [
            [
                "67862941e502c30a",
                "a80dc249249ea7ee"
            ]
        ]
    },
    {
        "id": "67862941e502c30a",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1610,
        "y": 2800,
        "wires": [
            [
                "8098aacc76c28133"
            ]
        ]
    },
    {
        "id": "a80dc249249ea7ee",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "Update Index Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 2720,
        "wires": []
    },
    {
        "id": "5c299fb843dd635c",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "",
        "x": 1190,
        "y": 2800,
        "wires": [
            [
                "28be37970d1bcef5",
                "7450d7120846d6f2"
            ]
        ]
    },
    {
        "id": "8098aacc76c28133",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "Update index response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1810,
        "y": 2800,
        "wires": []
    },
    {
        "id": "7450d7120846d6f2",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1360,
        "y": 2720,
        "wires": []
    },
    {
        "id": "efe74933e9de08e9",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "b8ae44978af1d74f",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 2740,
        "wires": []
    },
    {
        "id": "85f7dcbb843e4ccf",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "parameters": [],
        "name": "IAttribute Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INDEX_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 2560,
        "wires": [
            [
                "c6866041d3ab041f",
                "450b6bb25a8c17db"
            ]
        ]
    },
    {
        "id": "c6866041d3ab041f",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1610,
        "y": 2560,
        "wires": [
            [
                "de3449bf3f57856b"
            ]
        ]
    },
    {
        "id": "0b2830e7d560fcec",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "parameters": [],
        "name": "Create index attribute script",
        "func": "const dataRecord            = msg.value;\n\nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlInsertIAttribute = `INSERT INTO indice_atributo (NM_TABELA,NM_INDICE,NM_ATRIBUTO, DT_ATUALIZACAO, NM_USUARIO,DS_INDICE_FUNCTION, NR_SEQUENCIA) VALUES ('${dataRecord.tableName}','${dataRecord.indexName}','${dataRecord.attributeName}',${dataRecord.createdOn}, '${dataRecord.createdBy}', ${checkIsNull(dataRecord.indexScript)}, ${dataRecord.creationSequence})`;\nmsg.topic = sqlInsertIAttribute;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 2560,
        "wires": [
            [
                "d06f9e924dedfe9b"
            ]
        ]
    },
    {
        "id": "633b4fe423968fcc",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "parameters": [],
        "name": "Count Index Attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptIndexAttribute = `SELECT nvl(max(1), 0) cnt FROM indice_atributo WHERE nm_tabela ='${dataRecord.tableName}' and nm_indice = '${dataRecord.indexName}' and nm_atributo = '${dataRecord.attributeName}'`;\n\nmsg.topic = scriptIndexAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 2320,
        "wires": [
            [
                "6978e6430239ce7d"
            ]
        ]
    },
    {
        "id": "450b6bb25a8c17db",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "Response Index Attribute debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1660,
        "y": 2460,
        "wires": []
    },
    {
        "id": "246a774670732329",
        "type": "switch",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "switch - Contains Index Attribute",
        "property": "msg.payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 2460,
        "wires": [
            [
                "e9493e0028dd9d28"
            ],
            [
                "0b2830e7d560fcec"
            ]
        ]
    },
    {
        "id": "e9493e0028dd9d28",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "parameters": [],
        "name": "Duplicate index attribute ",
        "func": "\nmsg.payload.error = {\n    message: 'Attribute name is already exists.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 2460,
        "wires": [
            [
                "85f7dcbb843e4ccf"
            ]
        ]
    },
    {
        "id": "d06f9e924dedfe9b",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "",
        "x": 1190,
        "y": 2560,
        "wires": [
            [
                "85f7dcbb843e4ccf"
            ]
        ]
    },
    {
        "id": "6978e6430239ce7d",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "",
        "x": 990,
        "y": 2380,
        "wires": [
            [
                "246a774670732329"
            ]
        ]
    },
    {
        "id": "de3449bf3f57856b",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "fdf4fec44b8c443b",
        "name": "Creation index attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1840,
        "y": 2560,
        "wires": []
    },
    {
        "id": "c6f7357ba91d03ef",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "parameters": [],
        "name": "IAttribute Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"INDEX_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"indexName\": msg.value.indexName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 3040,
        "wires": [
            [
                "ac22c51765f02565",
                "d817bc13f48f1781"
            ]
        ]
    },
    {
        "id": "ac22c51765f02565",
        "type": "json",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1610,
        "y": 3040,
        "wires": [
            [
                "139ff7a9a9eaeef1"
            ]
        ]
    },
    {
        "id": "d817bc13f48f1781",
        "type": "debug",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "name": "Delete Index Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 2960,
        "wires": []
    },
    {
        "id": "c666fdcc6a851554",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "name": "",
        "x": 1170,
        "y": 3040,
        "wires": [
            [
                "c6f7357ba91d03ef"
            ]
        ]
    },
    {
        "id": "139ff7a9a9eaeef1",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "name": "Delete Index response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1820,
        "y": 3040,
        "wires": []
    },
    {
        "id": "fd05ca2de7a6d9a5",
        "type": "function",
        "z": "3002d13dd904e424",
        "g": "49b648d60eb78ab9",
        "parameters": [],
        "name": "Delete index attribute Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteIndexAtt = `DELETE FROM INDICE_ATRIBUTO WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_INDICE = '${dataRecord.indexName}' AND NM_ATRIBUTO = '${dataRecord.attributeName}'  `;\nmsg.topic = scriptDeleteIndexAtt;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 3040,
        "wires": [
            [
                "c666fdcc6a851554"
            ]
        ]
    },
    {
        "id": "2f2eed22510357b4",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Fetch table indexes by table name Script",
        "func": "// Get query parameters\nconst page          \t= msg.requestData.page || 0;\nconst pageSize      \t= msg.requestData.limit || 10;\nconst tableName         = msg.requestData.tableName;\n\nconst sql = `SELECT NM_TABELA,NM_INDICE,IE_TIPO,DT_ATUALIZACAO,NM_USUARIO,DS_INDICE,IE_CRIAR_ALTERAR,IE_SITUACAO,DT_CRIACAO,IE_IGNORADO_CLIENTE,IE_CLASSIFICACAO,DS_MENSAGEM FROM INDICE WHERE NM_TABELA = '${tableName}'`;\n\nlet beginPage = (parseInt(page) * parseInt(pageSize)) + parseInt(1);\nconsole.log(beginPage);\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\nconsole.log(endPage);\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${sql}) PAGING WHERE (ROWNUM < \n\t${endPage}\n))\nWHERE (PAGING_RN >= \n\t${beginPage}\n)`;\nmsg.topic = paging;\nmsg.event = 'SELECT-TABLE-INDEX';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 280,
        "wires": [
            [
                "4ce9140d5688c585"
            ]
        ]
    },
    {
        "id": "1b94e0e46264b6e0",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 600,
        "wires": []
    },
    {
        "id": "4ce9140d5688c585",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "name": "",
        "x": 1870,
        "y": 280,
        "wires": [
            [
                "7a6a4f17848b04bd",
                "2576a0270680dce4"
            ]
        ]
    },
    {
        "id": "7a6a4f17848b04bd",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else if(msg.totalRowCount > 0){\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = [];\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 480,
        "wires": [
            [
                "e34ac474f348f5b7",
                "413f02b2b07876ed"
            ]
        ]
    },
    {
        "id": "e34ac474f348f5b7",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2340,
        "y": 620,
        "wires": []
    },
    {
        "id": "d5c3828903b3baf5",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Table index count script",
        "func": "const requestData       = {};\nrequestData.page        = msg.payload.value.page;\nrequestData.limit       = msg.payload.value.limit;\nrequestData.tableName   = msg.payload.value.tableName;\n\nconst scriptIndexCount = `SELECT COUNT(*) as cnt FROM INDICE WHERE NM_TABELA = '${requestData.tableName}'`;\nmsg.topic = scriptIndexCount;\nmsg.requestData = requestData;\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 180,
        "wires": [
            [
                "6099b9dd7d7a2e0b",
                "80c14a9c4deefe80"
            ]
        ]
    },
    {
        "id": "6099b9dd7d7a2e0b",
        "type": "tasy data access",
        "z": "3002d13dd904e424",
        "name": "",
        "x": 750,
        "y": 180,
        "wires": [
            [
                "37b490b751b735fd",
                "645ec40d954fda74"
            ]
        ]
    },
    {
        "id": "80c14a9c4deefe80",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug Index count ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 340,
        "wires": []
    },
    {
        "id": "37b490b751b735fd",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug Index count result",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 20,
        "wires": []
    },
    {
        "id": "645ec40d954fda74",
        "type": "function",
        "z": "3002d13dd904e424",
        "parameters": [],
        "name": "Set has count and value",
        "func": "const rowCount = msg.payload.select[0].resultSet[0].CNT;\n\nmsg.totalRowCount = rowCount;\nif(msg.totalRowCount > 0){\n    msg.payload.hasRowCount = [1];\n} else {\n    msg.payload.hasRowCount = [];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "9f2f9664a71234a7",
                "b78dd6459425a578"
            ]
        ]
    },
    {
        "id": "9f2f9664a71234a7",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug has Index count",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 180,
        "wires": []
    },
    {
        "id": "b78dd6459425a578",
        "type": "switch",
        "z": "3002d13dd904e424",
        "name": "Index Count Switch",
        "property": "payload.hasRowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 480,
        "wires": [
            [
                "2f2eed22510357b4"
            ],
            [
                "7a6a4f17848b04bd"
            ]
        ]
    },
    {
        "id": "2576a0270680dce4",
        "type": "debug",
        "z": "3002d13dd904e424",
        "name": "Debug fetch index script",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 80,
        "wires": []
    },
    {
        "id": "e7367d4d445f888c",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "d5c3828903b3baf5"
            ]
        ]
    },
    {
        "id": "6a832c11aaa4978c",
        "type": "spinal-consumer",
        "z": "3002d13dd904e424",
        "name": "GetTableIndexRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.index.GetRequest",
        "groupid": "cmdk-smartlink-table-index-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "e7367d4d445f888c",
                "1b94e0e46264b6e0"
            ]
        ]
    },
    {
        "id": "322de69473614cd3",
        "type": "spinal-consumer",
        "z": "3002d13dd904e424",
        "name": "GetIndexAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.indexAttribute.GetRequest",
        "groupid": "cmdk-smartlink-table-index-attribute-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 150,
        "y": 860,
        "wires": [
            [
                "d572a4c2ba8e8eaf",
                "51663c486602bc62"
            ]
        ]
    },
    {
        "id": "51663c486602bc62",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 860,
        "wires": [
            [
                "256b19252d2c17f9"
            ]
        ]
    },
    {
        "id": "652b711aa19d9815",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "name": "GetReply",
        "topic": "spinal.cmdk.table.index.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2540,
        "y": 480,
        "wires": []
    },
    {
        "id": "413f02b2b07876ed",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2330,
        "y": 480,
        "wires": [
            [
                "652b711aa19d9815"
            ]
        ]
    },
    {
        "id": "aed8b0dbeba4ea39",
        "type": "spinal-producer",
        "z": "3002d13dd904e424",
        "name": "GetReply",
        "topic": "spinal.cmdk.table.indexAttribute.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1720,
        "y": 860,
        "wires": []
    },
    {
        "id": "67b7fd43e694a069",
        "type": "json",
        "z": "3002d13dd904e424",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1510,
        "y": 860,
        "wires": [
            [
                "aed8b0dbeba4ea39"
            ]
        ]
    },
    {
        "id": "11b97c01c3ea19e8",
        "type": "spinal-producer",
        "z": "a424d387f836dcc2",
        "name": "",
        "topic": "spinal.cmdk.logset.TableDescriptionResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1300,
        "y": 180,
        "wires": []
    },
    {
        "id": "b36362eaf7596502",
        "type": "spinal-consumer",
        "z": "a424d387f836dcc2",
        "name": "",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.logset.TableDescriptionRequest",
        "groupid": "cci-cmdk-smartlink-engine",
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 240,
        "y": 180,
        "wires": [
            [
                "23c2d80a13708322"
            ]
        ]
    },
    {
        "id": "21580894ba2b0ef4",
        "type": "tasy data access",
        "z": "a424d387f836dcc2",
        "name": "",
        "x": 730,
        "y": 180,
        "wires": [
            [
                "25866572061eeb1a",
                "e2ba5c565420590e"
            ]
        ]
    },
    {
        "id": "b6bf778bdf477a65",
        "type": "function",
        "z": "a424d387f836dcc2",
        "parameters": [],
        "name": "Prepare query",
        "func": "const values = msg.payload.value;\nconst tables = values.tableNames.split(',');\nconst tableNames = tables.map(table => `'${table}'`).join(',');\n\nconst sql = `select * from (SELECT\n    ts.nm_tabela AS tableName,\n    exp.ds_expressao AS expression\nFROM\n    dic_expressao_idioma exp\n    JOIN tabela_sistema ts ON ts.cd_exp_cadastro = exp.cd_expressao\nWHERE\n     exp.ds_locale = 'en_US'\n    AND exp.cd_expressao = ts.cd_exp_cadastro\n    AND lower(ts.nm_tabela) in (${tableNames}))`;\n\n\nmsg.topic = sql;\nmsg.event = 'SQL-TABLE-DESCRIPTION';\nmsg.headers = msg.payload.headers\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 180,
        "wires": [
            [
                "21580894ba2b0ef4"
            ]
        ]
    },
    {
        "id": "23c2d80a13708322",
        "type": "json",
        "z": "a424d387f836dcc2",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 180,
        "wires": [
            [
                "b6bf778bdf477a65",
                "5c59be8d0e7a3473"
            ]
        ]
    },
    {
        "id": "bd70f49f36ef3716",
        "type": "json",
        "z": "a424d387f836dcc2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1130,
        "y": 180,
        "wires": [
            [
                "11b97c01c3ea19e8"
            ]
        ]
    },
    {
        "id": "5c59be8d0e7a3473",
        "type": "debug",
        "z": "a424d387f836dcc2",
        "name": "Debug Incoming JSON ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 260,
        "wires": []
    },
    {
        "id": "25866572061eeb1a",
        "type": "function",
        "z": "a424d387f836dcc2",
        "parameters": [],
        "name": "Generate the response",
        "func": "const response = {}\n\nif (msg.error) {\n    response.status = 'ERROR';\n    response.error = msg.error.message;\n} else {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet\n}\n\n\nresponse.eventType = msg.event;\nresponse.headers = msg.headers;\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "bd70f49f36ef3716"
            ]
        ]
    },
    {
        "id": "e2ba5c565420590e",
        "type": "debug",
        "z": "a424d387f836dcc2",
        "name": "Debug query output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 260,
        "wires": []
    },
    {
        "id": "4393fd2cf870eeab",
        "type": "function",
        "z": "4009fc37d06f3758",
        "parameters": [],
        "name": "Fetch table core attributes by table name Script",
        "func": "const page          \t= msg.requestData.page || 0;\nconst pageSize      \t= msg.requestData.limit || 10;\nconst tableName      \t= msg.requestData.tableName;\nconst whereClause    \t= msg.requestData.whereClause;\n \n \nconst sql = `SELECT\n    a.nm_tabela,\n    a.nr_sequencia_criacao,\n    CASE\n        WHEN nvl(s.ds_layer, 'CORE') != 'CORE' THEN\n            decode(a.nm_atributo, 'CD_ESTABELECIMENTO', 'ESTABLISHMENT_CODE', 'NR_SEQUENCIA', 'SEQUENCE_NUMBER',\n                   'IE_SITUACAO', 'STATUS', 'NM_USUARIO', 'CREATED_USER', 'NM_USUARIO_NREC', 'MODIFIED_USER', 'DT_ATUALIZACAO', 'CREATED_DATE', 'DT_ATUALIZACAO_NREC', 'MODIFIED_DATE', a.nm_atributo)\n        ELSE\n            a.nm_atributo\n    END AS nm_atributo,\n    a.ie_tipo_atributo,\n    a.qt_tamanho,\n    a.qt_decimais,\n    a.qt_seq_inicio,\n    a.qt_seq_incremento,\n    a.qt_cache,\n    a.cd_exp_desc,\n    a.ie_obrigatorio,\n    a.cd_exp_valores,\n    a.ds_valores,\n    a.cd_dominio,\n    a.nr_seq_localizador,\n    a.nm_atributo_pai,\n    a.vl_default,\n    a.nr_seq_dic_objeto,\n    a.ie_informacao_sensivel,\n    a.dt_criacao,\n    a.ie_log_exclusao,\n    a.ie_log_update\nFROM\n    tabela_atributo a JOIN tabela_sistema s ON a.nm_tabela = s.nm_tabela\nWHERE\n    a.nm_tabela = '${tableName}' ${whereClause}`;\n\nlet beginPage = (parseInt(page) * parseInt(pageSize)) + parseInt(1);\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${sql}) PAGING WHERE (ROWNUM < \n\t${endPage}\n))\nWHERE (PAGING_RN >= \n\t${beginPage}\n)`;\nmsg.topic = paging; \nmsg.event = 'SELECT-ATTRIBUTE';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 200,
        "wires": [
            [
                "867afecbe0463cda"
            ]
        ]
    },
    {
        "id": "09c136edb350eae2",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "name": "Debug Incoming Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 380,
        "wires": []
    },
    {
        "id": "0b8bad3132e4d687",
        "type": "function",
        "z": "4009fc37d06f3758",
        "parameters": [],
        "name": "Response attribute",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else if(msg.totalRowCount > 0){\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.totalRowCount = msg.totalRowCount;\n    response.status = 'SUCCESS';\n    response.rows = [];\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 340,
        "wires": [
            [
                "93cd5616c9e83c37",
                "09434064b095291e"
            ]
        ]
    },
    {
        "id": "867afecbe0463cda",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "name": "",
        "x": 1810,
        "y": 200,
        "wires": [
            [
                "0b8bad3132e4d687",
                "ab3380c87999c090"
            ]
        ]
    },
    {
        "id": "e3221725e1781c62",
        "type": "spinal-consumer",
        "z": "4009fc37d06f3758",
        "name": "CoreAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.CoreAttributeRequest",
        "groupid": "cmdk-smartlink-table-core-attribute-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 160,
        "y": 860,
        "wires": [
            [
                "a09da58521036c8a"
            ]
        ]
    },
    {
        "id": "a09da58521036c8a",
        "type": "json",
        "z": "4009fc37d06f3758",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 860,
        "wires": [
            [
                "ca792c59070f4ce8"
            ]
        ]
    },
    {
        "id": "ca792c59070f4ce8",
        "type": "switch",
        "z": "4009fc37d06f3758",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 470,
        "y": 860,
        "wires": [
            [
                "f8612a47c3d99ba4"
            ],
            [
                "80e546f17a1d6013"
            ],
            [
                "b9b67870efe77755"
            ]
        ]
    },
    {
        "id": "a43780b78a7edcd0",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "parameters": [],
        "name": "Delete core atribute Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteCoreAttribute = `DELETE FROM TABELA_ATRIBUTO WHERE NM_TABELA = '${dataRecord.tableName}' AND NM_ATRIBUTO = '${dataRecord.attributeName}'`;\n\nmsg.topic = scriptDeleteCoreAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1340,
        "wires": [
            [
                "a44b9d7d84eef872"
            ]
        ]
    },
    {
        "id": "e7da7892e07cfbc9",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CORE_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1340,
        "wires": [
            [
                "ca734653498ccfb7",
                "cadc99eae49b7bd2"
            ]
        ]
    },
    {
        "id": "0ab4c1aa1432d6af",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "name": "Delete Core Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1810,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ca734653498ccfb7",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1550,
        "y": 1340,
        "wires": [
            [
                "0ab4c1aa1432d6af"
            ]
        ]
    },
    {
        "id": "cadc99eae49b7bd2",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "name": "Delete Core Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1620,
        "y": 1260,
        "wires": []
    },
    {
        "id": "a44b9d7d84eef872",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "name": "",
        "x": 1110,
        "y": 1340,
        "wires": [
            [
                "e7da7892e07cfbc9"
            ]
        ]
    },
    {
        "id": "dc6d24851855684f",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "parameters": [],
        "name": "Update core atribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst oldAttributeName      = dataRecord.oldAttributeName || dataRecord.attributeName;\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlUpdate = `UPDATE tabela_atributo SET dt_atualizacao_nrec = sysdate, nm_usuario_nrec = '${dataRecord.modifiedBy}', NR_SEQUENCIA_CRIACAO = ${checkIsNull(dataRecord.creationSequence)}, IE_TIPO_ATRIBUTO = ${checkIsNull(dataRecord.attributeType)}, QT_TAMANHO = ${checkIsNull(dataRecord.nrSize)}, QT_DECIMAIS = ${checkIsNull(dataRecord.nrDecimal)}, QT_SEQ_INICIO = ${checkIsNull(dataRecord.nrInitialSeq)}, QT_SEQ_INCREMENTO = ${checkIsNull(dataRecord.nrIncrementSeq)}, QT_CACHE = ${checkIsNull(dataRecord.nrCache)}, ie_obrigatorio = ${checkIsNull(dataRecord.isMandatory)}, cd_exp_valores = ${checkIsNull(dataRecord.valuesExpId)}, ds_valores = ${checkIsNull(dataRecord.valuesDesc)}, cd_dominio = ${checkIsNull(dataRecord.domainId)}, nr_seq_localizador = ${checkIsNull(dataRecord.nrSearchTool)}, nm_atributo_pai = ${checkIsNull(dataRecord.parentAttributeName)}, vl_default = ${checkIsNull(dataRecord.defaultValue)}, nr_seq_dic_objeto = ${checkIsNull(dataRecord.nrSeqDicObject)}, ie_informacao_sensivel = ${checkIsNull(dataRecord.isSensitiveInfo)}, ie_log_exclusao = ${checkIsNull(dataRecord.isDeletionLog)}, IE_CRIAR_DESCRICAO = 'N', IE_LOG_UPDATE = ${checkIsNull(dataRecord.isLogUpdate)}, IE_ATUALIZAR_VERSAO = 'N' WHERE nm_tabela = '${dataRecord.tableName}' AND NM_ATRIBUTO = '${oldAttributeName}' `;\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1100,
        "wires": [
            [
                "267f1dc4a6a3039f"
            ]
        ]
    },
    {
        "id": "682ee97880c9e136",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "name": "Update Core Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1810,
        "y": 1100,
        "wires": []
    },
    {
        "id": "d15260226afdd89c",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CORE_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1100,
        "wires": [
            [
                "c5657025a6a1a813",
                "f7e0fbf173b755d4"
            ]
        ]
    },
    {
        "id": "c5657025a6a1a813",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1550,
        "y": 1100,
        "wires": [
            [
                "682ee97880c9e136"
            ]
        ]
    },
    {
        "id": "f7e0fbf173b755d4",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "name": "Update Core Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1020,
        "wires": []
    },
    {
        "id": "267f1dc4a6a3039f",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "name": "",
        "x": 1130,
        "y": 1100,
        "wires": [
            [
                "d15260226afdd89c"
            ]
        ]
    },
    {
        "id": "c24dc97c5501ea98",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CORE_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 860,
        "wires": [
            [
                "4295d45677c17ddf",
                "b88afc3c8276bca7"
            ]
        ]
    },
    {
        "id": "4295d45677c17ddf",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1550,
        "y": 860,
        "wires": [
            [
                "f3434826c4e50fea"
            ]
        ]
    },
    {
        "id": "49d2dd137ed3be50",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "parameters": [],
        "name": "Create core attribute script",
        "func": "const dataRecord            = msg.value;\n\nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nif (dataRecord.dtCreated != null) {\n    dataRecord.dtCreated = `to_date('${dataRecord.dtCreated}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nif(dataRecord.nrSize === null && dataRecord.attributeType === 'VARCHAR2'){\n    dataRecord.nrSize = '10';\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlInsert = `INSERT INTO TABELA_ATRIBUTO ( DT_ATUALIZACAO, DT_CRIACAO, NM_USUARIO, NM_TABELA, NR_SEQUENCIA_CRIACAO, NM_ATRIBUTO, IE_TIPO_ATRIBUTO, QT_TAMANHO, QT_DECIMAIS, QT_SEQ_INICIO,QT_SEQ_INCREMENTO, QT_CACHE, IE_OBRIGATORIO, CD_EXP_VALORES, DS_VALORES, CD_DOMINIO, NR_SEQ_LOCALIZADOR, NM_ATRIBUTO_PAI, VL_DEFAULT, NR_SEQ_DIC_OBJETO, IE_INFORMACAO_SENSIVEL, IE_LOG_EXCLUSAO, IE_CRIAR_DESCRICAO, IE_LOG_UPDATE, IE_ATUALIZAR_VERSAO, CD_EXP_DESC) VALUES (${dataRecord.createdOn}, ${dataRecord.dtCreated},'${dataRecord.createdBy}', '${dataRecord.tableName}', '${dataRecord.creationSequence}', '${dataRecord.attributeName}', '${dataRecord.attributeType}', ${checkIsNull(dataRecord.nrSize)}, ${checkIsNull(dataRecord.nrDecimal)}, ${checkIsNull(dataRecord.nrInitialSeq)}, ${checkIsNull(dataRecord.nrIncrementSeq)}, ${checkIsNull(dataRecord.nrCache)}, ${checkIsNull(dataRecord.isMandatory)}, ${checkIsNull(dataRecord.valuesExpId)}, ${checkIsNull(dataRecord.valuesDesc)}, ${checkIsNull(dataRecord.domainId)}, ${checkIsNull(dataRecord.nrSearchTool)}, ${checkIsNull(dataRecord.parentAttributeName)}, ${checkIsNull(dataRecord.defaultValue)}, ${checkIsNull(dataRecord.nrSeqDicObject)}, ${checkIsNull(dataRecord.isSensitiveInfo)}, ${checkIsNull(dataRecord.isDeletionLog)}, 'N', 'N', 'N', '${dataRecord.descriptionExpId}')`;\n            \nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 860,
        "wires": [
            [
                "32aa0c197b647d24"
            ]
        ]
    },
    {
        "id": "0468e5c7b73e6c2e",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "parameters": [],
        "name": "Count core attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst oldAttributeName      = dataRecord.oldAttributeName || dataRecord.attributeName;\n\nconst scriptCoreAttribute = `SELECT nvl(max(1), 0) cnt FROM tabela_atributo WHERE nm_tabela = '${dataRecord.tableName}' and nm_atributo = '${oldAttributeName}'`;\n\nmsg.topic = scriptCoreAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 620,
        "wires": [
            [
                "e6879976b3c19ae9"
            ]
        ]
    },
    {
        "id": "b88afc3c8276bca7",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "Response Core Attribute debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1600,
        "y": 760,
        "wires": []
    },
    {
        "id": "bb5697c492bd0b5b",
        "type": "switch",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "switch - Contains attributes",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 760,
        "wires": [
            [
                "194546372d272ef4"
            ],
            [
                "49d2dd137ed3be50"
            ]
        ]
    },
    {
        "id": "194546372d272ef4",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "parameters": [],
        "name": "Duplicate core attribute",
        "func": "\nmsg.payload.error = {\n    message: 'Core attribute already exist.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 760,
        "wires": [
            [
                "c24dc97c5501ea98"
            ]
        ]
    },
    {
        "id": "f3434826c4e50fea",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "Creation Core Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1800,
        "y": 860,
        "wires": []
    },
    {
        "id": "e6879976b3c19ae9",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "",
        "x": 850,
        "y": 680,
        "wires": [
            [
                "bb5697c492bd0b5b"
            ]
        ]
    },
    {
        "id": "32aa0c197b647d24",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "name": "",
        "x": 1130,
        "y": 860,
        "wires": [
            [
                "c24dc97c5501ea98"
            ]
        ]
    },
    {
        "id": "764e8ebebed0205f",
        "type": "spinal-consumer",
        "z": "4009fc37d06f3758",
        "name": "CustomAttributeRequest",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.CustomAttributeRequest",
        "groupid": "cmdk-smartlink-table-custom-attribute-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 190,
        "y": 1940,
        "wires": [
            [
                "3534238ced6d3fb2"
            ]
        ]
    },
    {
        "id": "3534238ced6d3fb2",
        "type": "json",
        "z": "4009fc37d06f3758",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 1940,
        "wires": [
            [
                "4b7daaa5cdcd6b7f"
            ]
        ]
    },
    {
        "id": "4b7daaa5cdcd6b7f",
        "type": "switch",
        "z": "4009fc37d06f3758",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 530,
        "y": 1940,
        "wires": [
            [
                "0df49cadb6eedeb1"
            ],
            [
                "4e464719884f1a08"
            ],
            [
                "0666559008aabe8b"
            ]
        ]
    },
    {
        "id": "0666559008aabe8b",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "parameters": [],
        "name": "Delete custom atribute Script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst scriptDeleteCustomAttribute = `DELETE FROM tabela_atributo_custom WHERE nm_tabela = '${dataRecord.tableName}' AND nm_atributo = '${dataRecord.attributeName}'`;\n\nmsg.topic = scriptDeleteCustomAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2420,
        "wires": [
            [
                "9636519d9aa7bb06"
            ]
        ]
    },
    {
        "id": "841678a80da5b90d",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CUSTOM_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2420,
        "wires": [
            [
                "379295400f0da6eb",
                "b766efe046f1a407"
            ]
        ]
    },
    {
        "id": "8fa55c59f1f8f86d",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "name": "Delete Custom Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1840,
        "y": 2420,
        "wires": []
    },
    {
        "id": "379295400f0da6eb",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1570,
        "y": 2420,
        "wires": [
            [
                "8fa55c59f1f8f86d"
            ]
        ]
    },
    {
        "id": "b766efe046f1a407",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "name": "Delete Custom Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 2340,
        "wires": []
    },
    {
        "id": "9636519d9aa7bb06",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "e7376fc6f9e59a30",
        "name": "",
        "x": 1130,
        "y": 2420,
        "wires": [
            [
                "841678a80da5b90d"
            ]
        ]
    },
    {
        "id": "4e464719884f1a08",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "parameters": [],
        "name": "Update custom atribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst oldAttributeName      = dataRecord.oldAttributeName || dataRecord.attributeName;\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlUpdate = `UPDATE tabela_atributo_custom SET dt_atualizacao_nrec = sysdate, nm_usuario_nrec = '${dataRecord.modifiedBy}', NM_TABLE_REF = ${checkIsNull(dataRecord.tableRefName)}, NR_SEQUENCIA_CRIACAO = ${checkIsNull(dataRecord.creationSequence)}, IE_TIPO_ATRIBUTO = ${checkIsNull(dataRecord.attributeType)}, QT_TAMANHO = ${checkIsNull(dataRecord.nrSize)}, QT_DECIMAIS = ${checkIsNull(dataRecord.nrDecimal)}, ie_obrigatorio = ${checkIsNull(dataRecord.isMandatory)} WHERE nm_tabela = '${dataRecord.tableName}' AND NM_ATRIBUTO = '${oldAttributeName}'`;\n\nmsg.topic = sqlUpdate;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2180,
        "wires": [
            [
                "b822e8337c17f849"
            ]
        ]
    },
    {
        "id": "c94e7edd837ed63c",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "name": "Update Custom Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1840,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0d0dc53b49ab4fad",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CUSTOM_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2180,
        "wires": [
            [
                "f0ec7d6fb4ccb9fa",
                "e2ae56f3231df3a0"
            ]
        ]
    },
    {
        "id": "f0ec7d6fb4ccb9fa",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1570,
        "y": 2180,
        "wires": [
            [
                "c94e7edd837ed63c"
            ]
        ]
    },
    {
        "id": "e2ae56f3231df3a0",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "name": "Update Custom Attribute Response debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 2100,
        "wires": []
    },
    {
        "id": "b822e8337c17f849",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "58f6b888c8f35088",
        "name": "",
        "x": 1150,
        "y": 2180,
        "wires": [
            [
                "0d0dc53b49ab4fad"
            ]
        ]
    },
    {
        "id": "8210357576548aa8",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "parameters": [],
        "name": "DB Response",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"CUSTOM_ATTRIBUTE\",\n\t    \"tableName\": msg.value.tableName,\n\t    \"attributeName\": msg.value.attributeName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1940,
        "wires": [
            [
                "5d09f8d81ea66018",
                "f4b11f55531ce06c"
            ]
        ]
    },
    {
        "id": "5d09f8d81ea66018",
        "type": "json",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1570,
        "y": 1940,
        "wires": [
            [
                "e21c0075a27a1e9c"
            ]
        ]
    },
    {
        "id": "9c596c33bfb75907",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "parameters": [],
        "name": "Create custom attribute script",
        "func": "const dataRecord = msg.value;\n\nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlInsert = `INSERT INTO tabela_atributo_custom (DT_ATUALIZACAO, nm_usuario,NM_TABELA,NM_TABLE_REF,NR_SEQUENCIA_CRIACAO,NM_ATRIBUTO,IE_TIPO_ATRIBUTO,QT_TAMANHO,QT_DECIMAIS,ie_obrigatorio) VALUES (${dataRecord.createdOn},'${dataRecord.createdBy}',${checkIsNull(dataRecord.tableName)},${checkIsNull(dataRecord.tableRefName)},${checkIsNull(dataRecord.creationSequence)},${checkIsNull(dataRecord.attributeName)},${checkIsNull(dataRecord.attributeType)},${checkIsNull(dataRecord.nrSize)},${checkIsNull(dataRecord.nrDecimal)},${checkIsNull(dataRecord.isMandatory)})`;\n\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1940,
        "wires": [
            [
                "a243e44da2331e69"
            ]
        ]
    },
    {
        "id": "0df49cadb6eedeb1",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "parameters": [],
        "name": "Count custom attribute script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\nconst oldAttributeName      = dataRecord.oldAttributeName || dataRecord.attributeName;\n\nconst scriptCustomAttribute = `SELECT nvl(max(1), 0) cnt FROM tabela_atributo_custom WHERE nm_tabela = '${dataRecord.tableName}' and nm_atributo = '${oldAttributeName}'`;\n\nmsg.topic = scriptCustomAttribute;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1700,
        "wires": [
            [
                "e7d1c3bbe001cfd7"
            ]
        ]
    },
    {
        "id": "f4b11f55531ce06c",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "Response Custom Attribute debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1840,
        "wires": []
    },
    {
        "id": "8e2b038d2ef292bb",
        "type": "switch",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "switch - Contains custom attributes",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 1840,
        "wires": [
            [
                "899b9d7913c9642c"
            ],
            [
                "9c596c33bfb75907"
            ]
        ]
    },
    {
        "id": "899b9d7913c9642c",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "parameters": [],
        "name": "Duplicate core attribute",
        "func": "\nmsg.payload.error = {\n    message: 'Custom attribute already exist.'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1840,
        "wires": [
            [
                "8210357576548aa8"
            ]
        ]
    },
    {
        "id": "e21c0075a27a1e9c",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "Creation Custom Attribute response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1820,
        "y": 1940,
        "wires": []
    },
    {
        "id": "e7d1c3bbe001cfd7",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "",
        "x": 870,
        "y": 1760,
        "wires": [
            [
                "8e2b038d2ef292bb"
            ]
        ]
    },
    {
        "id": "a243e44da2331e69",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "g": "4406da3f52685afd",
        "name": "",
        "x": 1150,
        "y": 1940,
        "wires": [
            [
                "8210357576548aa8"
            ]
        ]
    },
    {
        "id": "8872157509f4c9ec",
        "type": "function",
        "z": "4009fc37d06f3758",
        "parameters": [],
        "name": "Core attribute count script",
        "func": "const tableName         = msg.payload.value.tableName;\nconst attributeName \t= msg.payload.value.attributeName;\nconst attributeType \t= msg.payload.value.attributeType;\n\nconst requestData = {};\nrequestData.page = msg.payload.value.page;\nrequestData.limit = msg.payload.value.limit;\nrequestData.tableName = tableName;\nrequestData.attributeName = attributeName;\nrequestData.attributeType = attributeType;\n\nlet restriction = '';\n \nif(attributeName){\n    const decodeAttributeName = decodeURIComponent(attributeName);\n    restriction += ` AND (UPPER(NM_ATRIBUTO) LIKE UPPER('%${decodeAttributeName}%')) `;\n}\n \nif(attributeType){\n    const decodeAttributeType = decodeURIComponent(attributeType);\n    restriction += ` AND (IE_TIPO_ATRIBUTO ='${decodeAttributeType}') `;\n}\n\nrequestData.whereClause = restriction;\nconst scriptCoreAttribute = `SELECT COUNT(*) as cnt FROM tabela_atributo WHERE NM_TABELA = '${tableName}' ${requestData.whereClause }`;\nmsg.topic = scriptCoreAttribute;\nmsg.payload.sqlScript = scriptCoreAttribute;\nmsg.requestData = requestData;\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "f0862a75620893e9",
                "5d7e86a5383fe81f"
            ]
        ]
    },
    {
        "id": "f0862a75620893e9",
        "type": "tasy data access",
        "z": "4009fc37d06f3758",
        "name": "",
        "x": 770,
        "y": 100,
        "wires": [
            [
                "3cf3c4317a2bba1d"
            ]
        ]
    },
    {
        "id": "267f4cb046a41fa4",
        "type": "switch",
        "z": "4009fc37d06f3758",
        "name": "Attributes count",
        "property": "payload.hasRowCount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "4393fd2cf870eeab"
            ],
            [
                "0b8bad3132e4d687"
            ]
        ]
    },
    {
        "id": "3cf3c4317a2bba1d",
        "type": "function",
        "z": "4009fc37d06f3758",
        "parameters": [],
        "name": "function 1",
        "func": "const rowCount = msg.payload.select[0].resultSet[0].CNT;\n\nmsg.totalRowCount = rowCount;\nif(msg.totalRowCount > 0){\n    msg.payload.hasRowCount = [1];\n} else {\n    msg.payload.hasRowCount = [];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 220,
        "wires": [
            [
                "267f4cb046a41fa4",
                "95c05d32f4800c1c"
            ]
        ]
    },
    {
        "id": "95c05d32f4800c1c",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "ab3380c87999c090",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2020,
        "y": 60,
        "wires": []
    },
    {
        "id": "5d7e86a5383fe81f",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 240,
        "wires": []
    },
    {
        "id": "255073b35c1192c8",
        "type": "spinal-consumer",
        "z": "4009fc37d06f3758",
        "name": "Get Core Attribute Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.coreAttribute.GetRequest",
        "groupid": "cmdk-smartlink-table-core-attribute-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "b953a00231a179b1",
                "09c136edb350eae2"
            ]
        ]
    },
    {
        "id": "b953a00231a179b1",
        "type": "json",
        "z": "4009fc37d06f3758",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 100,
        "wires": [
            [
                "8872157509f4c9ec"
            ]
        ]
    },
    {
        "id": "64ba41e6f93e411e",
        "type": "spinal-producer",
        "z": "4009fc37d06f3758",
        "name": "Get Reply",
        "topic": "spinal.cmdk.table.coreAttribute.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 2460,
        "y": 340,
        "wires": []
    },
    {
        "id": "93cd5616c9e83c37",
        "type": "json",
        "z": "4009fc37d06f3758",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 2250,
        "y": 340,
        "wires": [
            [
                "64ba41e6f93e411e"
            ]
        ]
    },
    {
        "id": "09434064b095291e",
        "type": "debug",
        "z": "4009fc37d06f3758",
        "name": "Response Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 440,
        "wires": []
    },
    {
        "id": "f8612a47c3d99ba4",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "fbef0734b72a74ab",
        "parameters": [],
        "name": "Update Default Attribute Name",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nswitch (dataRecord.attributeName) {\n  case 'ESTABLISHMENT_CODE':\n    dataRecord.attributeName = 'CD_ESTABELECIMENTO';\n    break;\n  case 'SEQUENCE_NUMBER':\n    dataRecord.attributeName = 'NR_SEQUENCIA';\n    break;\n  case 'STATUS':\n    dataRecord.attributeName = 'IE_SITUACAO';\n    break;\n case 'CREATED_USER':\n    dataRecord.attributeName = 'NM_USUARIO';\n    break;\n case 'MODIFIED_USER':\n    dataRecord.attributeName = 'NM_USUARIO_NREC';\n    break;\n case 'CREATED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO';\n    break;\n case 'MODIFIED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO_NREC';\n    break;\n  default:\n    break; \n}\n\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 560,
        "wires": [
            [
                "0468e5c7b73e6c2e"
            ]
        ]
    },
    {
        "id": "80e546f17a1d6013",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "9b93f76ab4c98f38",
        "parameters": [],
        "name": "Update Default Attribute Name",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nswitch (dataRecord.attributeName) {\n  case 'ESTABLISHMENT_CODE':\n    dataRecord.attributeName = 'CD_ESTABELECIMENTO';\n    break;\n  case 'SEQUENCE_NUMBER':\n    dataRecord.attributeName = 'NR_SEQUENCIA';\n    break;\n  case 'STATUS':\n    dataRecord.attributeName = 'IE_SITUACAO';\n    break;\n case 'CREATED_USER':\n    dataRecord.attributeName = 'NM_USUARIO';\n    break;\n case 'MODIFIED_USER':\n    dataRecord.attributeName = 'NM_USUARIO_NREC';\n    break;\n case 'CREATED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO';\n    break;\n case 'MODIFIED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO_NREC';\n    break;\n  default:\n    break; \n}\n\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1020,
        "wires": [
            [
                "dc6d24851855684f"
            ]
        ]
    },
    {
        "id": "b9b67870efe77755",
        "type": "function",
        "z": "4009fc37d06f3758",
        "g": "62f3b424a9c065d2",
        "parameters": [],
        "name": "Update Default Attribute Name",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nswitch (dataRecord.attributeName) {\n  case 'ESTABLISHMENT_CODE':\n    dataRecord.attributeName = 'CD_ESTABELECIMENTO';\n    break;\n  case 'SEQUENCE_NUMBER':\n    dataRecord.attributeName = 'NR_SEQUENCIA';\n    break;\n  case 'STATUS':\n    dataRecord.attributeName = 'IE_SITUACAO';\n    break;\n case 'CREATED_USER':\n    dataRecord.attributeName = 'NM_USUARIO';\n    break;\n case 'MODIFIED_USER':\n    dataRecord.attributeName = 'NM_USUARIO_NREC';\n    break;\n case 'CREATED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO';\n    break;\n case 'MODIFIED_DATE':\n    dataRecord.attributeName = 'DT_ATUALIZACAO_NREC';\n    break;\n  default:\n    break; \n}\n\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1260,
        "wires": [
            [
                "a43780b78a7edcd0"
            ]
        ]
    },
    {
        "id": "75018870129ee3d7",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "parameters": [],
        "name": "ResponseTable",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE\",\n\t    \"tableName\": msg.value.tableName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 1300,
        "wires": [
            [
                "57fd4c0cbfee0756",
                "ea9e88d62965bf29",
                "8ca4350b8c153cbb"
            ]
        ]
    },
    {
        "id": "ed4b125233dfa3c6",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "Creation table response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 2030,
        "y": 1300,
        "wires": []
    },
    {
        "id": "57fd4c0cbfee0756",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1790,
        "y": 1300,
        "wires": [
            [
                "ed4b125233dfa3c6"
            ]
        ]
    },
    {
        "id": "5ed66df1fba3a9b6",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "parameters": [],
        "name": "Create table script",
        "func": "const dataRecord = msg.value;\n\nif (dataRecord.createdOn != null) {\n    dataRecord.createdOn = `to_date('${dataRecord.createdOn}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nif (dataRecord.dateCreated != null) {\n    dataRecord.dateCreated = `to_date('${dataRecord.dateCreated}', 'YYYY-MM-DD HH24:MI:SS')`;\n}\n\nfunction checkIsNull(value){\n    return value === null ? null : `'${value}'`;\n}\n\nconst sqlInsert = `insert into tabela_sistema( nm_tabela,ds_shortname,dt_criacao,ds_layer,cd_exp_cadastro,cd_exp_tabela,ds_aplicacao,nr_seq_modulo,ie_cadastro_geral,ie_regra_tabela,ie_regra_atributo,ie_temporaria,ie_callstack,ie_cria_log_local,cd_exp_titulo,ds_tabela,ds_sql_lookup,dt_atualizacao,nm_usuario,ie_situacao,IE_TIPO_CALCULO,IE_GERA_DEFINICAO,QT_REGISTROS_ATUAL,QT_REGISTROS_PREVISTO,QT_FATOR_CONVERSAO,DS_TABLESPACE_TAB,IE_TROCA_CAMPO_GRID,QT_POS_ESQUERDA,DS_TABLESPACE_IND,IE_CRIAR_ALTERAR,QT_MAX_REGISTRO,IE_SINCRONIZAR,IE_RESTRINGE_ESTAB,IE_RESTRINGE_EMPRESA,QT_ALTURA_PANEL,QT_POS_TOPO,QT_MAX_CAMPO,IE_LIMPAR_LOG,QT_INTERVALO_CAMPO,QT_LARGURA_PANEL,IE_EXPORTAR)values('${dataRecord.tableName}','${dataRecord.shortName}',${dataRecord.dateCreated},'${dataRecord.layerName}','${dataRecord.titleExpressionId}','${dataRecord.descriptionExpressionId}','${dataRecord.applicationName}','${dataRecord.sequenceModule}','${dataRecord.generalRecords}', ${checkIsNull(dataRecord.tableRule)},${checkIsNull(dataRecord.attributeRule)},${checkIsNull(dataRecord.temporaryTable)},${checkIsNull(dataRecord.saveCallStack)},${checkIsNull(dataRecord.createLocalLog)},${checkIsNull(dataRecord.expressionPanelTitle)},${checkIsNull(dataRecord.tableDescription)},${checkIsNull(dataRecord.sqlLookup)},${dataRecord.createdOn},'${dataRecord.createdBy}',${checkIsNull(dataRecord.status)},'R','S','100','100','1','TASY_DATA','S','0','TASY_INDEX','M','0','N','N','N','0','0','0','N','0','0','N')`;\nmsg.topic = sqlInsert;\nmsg.value = dataRecord;\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1300,
        "wires": [
            [
                "8d15e5453f51c0ab"
            ]
        ]
    },
    {
        "id": "9028ecef1bec66c0",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "parameters": [],
        "name": "Count table script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst scriptCountTable = `SELECT nvl(max(1), 0) CNT FROM TABELA_SISTEMA WHERE NM_TABELA ='${dataRecord.tableName}' OR '${dataRecord.layerName}' = 'CORE'`;\n\nmsg.topic = scriptCountTable;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1080,
        "wires": [
            [
                "453b9c1f9f9f9606"
            ]
        ]
    },
    {
        "id": "ea9e88d62965bf29",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "Response Table debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1220,
        "wires": []
    },
    {
        "id": "133c453b813f3fe9",
        "type": "switch",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "switch - Contains tables",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 1220,
        "wires": [
            [
                "18513225f8c8751e"
            ],
            [
                "5ed66df1fba3a9b6"
            ]
        ]
    },
    {
        "id": "18513225f8c8751e",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "parameters": [],
        "name": "Duplicate/Core Table Check",
        "func": "const dataRecord = msg.value;\n \nif (msg.value.layerName == 'CORE') {\n    msg.payload.error = {\n        message : 'CORE Table cannot be added.'\n    };\n}\nelse {\nmsg.payload.error = {\n    message: 'Table already exist.'\n};\n}\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1220,
        "wires": [
            [
                "75018870129ee3d7"
            ]
        ]
    },
    {
        "id": "453b9c1f9f9f9606",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "",
        "x": 910,
        "y": 1140,
        "wires": [
            [
                "133c453b813f3fe9"
            ]
        ]
    },
    {
        "id": "8d15e5453f51c0ab",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "",
        "x": 1350,
        "y": 1300,
        "wires": [
            [
                "75018870129ee3d7"
            ]
        ]
    },
    {
        "id": "1d80a13883199c60",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Delete custom table Script",
        "func": "const dataRecord = msg.value;\n\nconst scriptTableDelete = `DELETE from tabela_sistema WHERE nm_tabela = '${dataRecord.tableName}'`;\n\nmsg.topic = scriptTableDelete;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 2660,
        "wires": [
            [
                "a633e33093089629"
            ]
        ]
    },
    {
        "id": "2e5fbd2b1283758e",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 1850,
        "y": 2660,
        "wires": [
            [
                "c6a165d76547e442"
            ]
        ]
    },
    {
        "id": "6e9a17edec756d42",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Response Delete",
        "func": "const response = {};\n\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE\",\n\t    \"tableName\": msg.value.tableName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2660,
        "wires": [
            [
                "2e5fbd2b1283758e",
                "c1317c5433e01628",
                "d8838fc846cd813e"
            ]
        ]
    },
    {
        "id": "c6a165d76547e442",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "Delete table response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 2060,
        "y": 2660,
        "wires": []
    },
    {
        "id": "a633e33093089629",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "x": 1330,
        "y": 2660,
        "wires": [
            [
                "6e9a17edec756d42"
            ]
        ]
    },
    {
        "id": "cfca064b1922412e",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "count table responsibility script",
        "func": "const dataRecord            = msg.value;\n\nconst scriptCountTRTable = `SELECT nvl(max(1), 0) CNT FROM TABELA_RESPONSABILIDADE WHERE NM_TABELA = '${dataRecord.tableName}'`;\n\nmsg.topic = scriptCountTRTable;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 2400,
        "wires": [
            [
                "41b2e7be711f0b6b"
            ]
        ]
    },
    {
        "id": "41b2e7be711f0b6b",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "x": 1190,
        "y": 2400,
        "wires": [
            [
                "72f7a2c372049e61"
            ]
        ]
    },
    {
        "id": "72f7a2c372049e61",
        "type": "switch",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "switch - Contains responsibility tables",
        "property": "msg.payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 2500,
        "wires": [
            [
                "657733374bc58789"
            ],
            [
                "1d80a13883199c60"
            ]
        ]
    },
    {
        "id": "657733374bc58789",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Delete table responsibility Script",
        "func": "const dataRecord = msg.value;\n\nconst scriptTableRespDelete = `DELETE from TABELA_RESPONSABILIDADE WHERE nm_tabela = '${dataRecord.tableName}'`;\n\nmsg.topic = scriptTableRespDelete;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 2500,
        "wires": [
            [
                "834772a36e083bb2"
            ]
        ]
    },
    {
        "id": "834772a36e083bb2",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "x": 1710,
        "y": 2500,
        "wires": [
            [
                "1d80a13883199c60"
            ]
        ]
    },
    {
        "id": "c1317c5433e01628",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "Response Table debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 2580,
        "wires": []
    },
    {
        "id": "f7e13c8971923f72",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "d7ca8bb5969fd276",
        "name": "",
        "x": 1810,
        "y": 1420,
        "wires": [
            [
                "54518c395340b019"
            ]
        ]
    },
    {
        "id": "d8838fc846cd813e",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Call Procedure",
        "func": "const dataRecord = msg.value;\nconst tableName = dataRecord.tableName;\nconst username = dataRecord.createdBy;\n\nlet procedure = `call DELETE_CLEAN_TBL('${tableName}')`\n\nmsg.topic = procedure;\nmsg.event = 'SQL-TABLE-DELETE-PROC';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 2840,
        "wires": [
            [
                "e37a674867ad5e85"
            ]
        ]
    },
    {
        "id": "e37a674867ad5e85",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "x": 1870,
        "y": 2840,
        "wires": [
            [
                "f7520a0081eb07bb"
            ]
        ]
    },
    {
        "id": "f7520a0081eb07bb",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Response Delete",
        "func": "const response = {};\n\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE\",\n\t    \"tableName\": msg.value.tableName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0];\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 2840,
        "wires": [
            [
                "2e5fbd2b1283758e"
            ]
        ]
    },
    {
        "id": "beb15122a109147f",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "parameters": [],
        "name": "Update table script",
        "func": "const dataRecord = msg.value;\n\nconst sqlUpdate = `UPDATE tabela_sistema SET nm_tabela = '${dataRecord.tableName}',ds_shortname = '${dataRecord.shortName}',ds_tabela = '${dataRecord.tableDescription}',cd_exp_cadastro = '${dataRecord.descriptionExpressionId}',cd_exp_tabela = '${dataRecord.titleExpressionId}',ds_aplicacao = '${dataRecord.applicationName}',nr_seq_modulo = '${dataRecord.sequenceModule}',ie_cadastro_geral = '${dataRecord.generalRecords}',ie_regra_tabela = '${dataRecord.tableRule}',ie_regra_atributo = '${dataRecord.attributeRule}',ie_temporaria = '${dataRecord.temporaryTable}',ie_callstack = '${dataRecord.saveCallStack}',ie_cria_log_local = '${dataRecord.createLocalLog}',cd_exp_titulo = '${dataRecord.expressionPanelTitle}',ds_sql_lookup = '${dataRecord.sqlLookup}',dt_atualizacao_nrec = TO_DATE('${dataRecord.modifiedOn}', 'yyyy-mm-dd hh24:mi:ss'),nm_usuario_nrec = '${dataRecord.modifiedBy}',ie_situacao = '${dataRecord.status}' WHERE nm_tabela = '${dataRecord.tableName}'`;\n\nmsg.topic = sqlUpdate;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1900,
        "wires": [
            [
                "f7399e99d7642650"
            ]
        ]
    },
    {
        "id": "635edf6269f4664a",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "name": "Update table response",
        "topic": "spinal.cmdk.table.TableResponse",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": "",
        "transactiontimeout": "",
        "metadatamaxage": "",
        "allowautotopiccreation": false,
        "connection": {
            "name": "Local kafka producer",
            "host": "localhost:9092",
            "guid": "112AB8800B84866AE0636D0B0A0A4CF5"
        },
        "broker": "142",
        "x": 1860,
        "y": 1900,
        "wires": []
    },
    {
        "id": "51efcf6fc108001e",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "parameters": [],
        "name": "Response Table",
        "func": "const response = {};\n\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE\",\n\t    \"tableName\": msg.value.tableName\n    };\n \nresponse.dataRecordResult   = dataRecordResult;\n \nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\n \nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1900,
        "wires": [
            [
                "0537615abbb57063",
                "288318f0fa8b0cae"
            ]
        ]
    },
    {
        "id": "0537615abbb57063",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 1610,
        "y": 1900,
        "wires": [
            [
                "635edf6269f4664a"
            ]
        ]
    },
    {
        "id": "f7399e99d7642650",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "name": "",
        "x": 1150,
        "y": 1900,
        "wires": [
            [
                "51efcf6fc108001e"
            ]
        ]
    },
    {
        "id": "288318f0fa8b0cae",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "name": "Response update debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 2000,
        "wires": []
    },
    {
        "id": "68d7dadcdf1db99b",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Synchronization Errors Response",
        "topic": "spinal.cmdk.table.TableSyncErrorResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1680,
        "y": 3160,
        "wires": []
    },
    {
        "id": "6d2543a26241836b",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1410,
        "y": 3160,
        "wires": [
            [
                "68d7dadcdf1db99b",
                "933c4f5ebd63edbc"
            ]
        ]
    },
    {
        "id": "b186c6c4c870467c",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "function 1",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 3160,
        "wires": [
            [
                "6d2543a26241836b"
            ]
        ]
    },
    {
        "id": "933c4f5ebd63edbc",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 3220,
        "wires": []
    },
    {
        "id": "09c32936b7be44a0",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "x": 1090,
        "y": 3160,
        "wires": [
            [
                "b186c6c4c870467c"
            ]
        ]
    },
    {
        "id": "a94370d494306e43",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "Select Errors",
        "func": "const response = {};\nconst tableName = msg.payload.value.tableName;\n\n  \nconst sql = `SELECT e.*, s.ds_script\nfrom CMDK_SYNC_QUEUE_ERRORS e , CMDK_SYNC_QUEUE s\nwhere e.nr_seq_sync = s.nr_sequencia \nand s.object_name = '${tableName}'`;\n    \nmsg.topic = sql;\nmsg.event = 'SQL-GET-TABLE-ERRORS';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3160,
        "wires": [
            [
                "09c32936b7be44a0"
            ]
        ]
    },
    {
        "id": "1b7eef04b794d2dd",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 770,
        "y": 3160,
        "wires": [
            [
                "a94370d494306e43"
            ]
        ]
    },
    {
        "id": "d019586dfdd7fd39",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Synchronization Errors - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.TableSyncErrorRequest",
        "groupid": "cmdk-smartlink-table-sync-errors-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 530,
        "y": 3160,
        "wires": [
            [
                "1b7eef04b794d2dd"
            ]
        ]
    },
    {
        "id": "2885bd84922ad4f4",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 3080,
        "wires": []
    },
    {
        "id": "45625aa3fa70d280",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "function 2",
        "func": "const response = {};\n\nresponse.status = 'SUCCESS' \n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} \n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 3040,
        "wires": [
            [
                "1b294d64c91aa19e",
                "2885bd84922ad4f4"
            ]
        ]
    },
    {
        "id": "62718e8dcb5a3a54",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "x": 1110,
        "y": 3040,
        "wires": [
            [
                "45625aa3fa70d280"
            ]
        ]
    },
    {
        "id": "1b294d64c91aa19e",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1450,
        "y": 3040,
        "wires": [
            [
                "1b88803312ad6a6d"
            ]
        ]
    },
    {
        "id": "ac99574c3d047f0c",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "Sync Table",
        "func": "const tableName = msg.payload.value.tableName;\n\nconst sql = `CALL APP_EXTENSION.cmdk_sync_table('${tableName}')`;\n\n\nmsg.topic = sql;\nmsg.event = 'SQL-GET-SYNC-TABLE';\nmsg.headers = msg.payload.headers;\nmsg.value = tableName;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3040,
        "wires": [
            [
                "62718e8dcb5a3a54"
            ]
        ]
    },
    {
        "id": "1b88803312ad6a6d",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Synchronization Response",
        "topic": "spinal.cmdk.table.TableSynchronizationResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "Default broker",
            "host": "kafka:29092"
        },
        "broker": "0",
        "x": 1660,
        "y": 3040,
        "wires": []
    },
    {
        "id": "f2c5cf6663aa0cc6",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 3040,
        "wires": [
            [
                "ac99574c3d047f0c"
            ]
        ]
    },
    {
        "id": "ab374399f6984492",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Synchronization - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.TableSynchronizationRequest",
        "groupid": "cmdk-smartlink-table-sync-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 510,
        "y": 3040,
        "wires": [
            [
                "f2c5cf6663aa0cc6"
            ]
        ]
    },
    {
        "id": "d0722c8177f93dec",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Script Response",
        "topic": "spinal.cmdk.table.TableScriptResponse",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 1740,
        "y": 3300,
        "wires": []
    },
    {
        "id": "e059ce2642a7b09a",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1410,
        "y": 3300,
        "wires": [
            [
                "d0722c8177f93dec",
                "d8f0c2dc72ca4e2d"
            ]
        ]
    },
    {
        "id": "3b5ac51fca162260",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "function 3",
        "func": "const response = {};\n\nif (msg.payload.error && msg.payload.error.length > 0 && msg.payload.error[0].message) {\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0].message;\n} else if (msg.payload.select && msg.payload.select.length > 0 && msg.payload.select[0].resultSet) {\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n} else {\n    response.status = 'ERROR';\n    response.error = 'Invalid data structure in msg.payload';\n}\n\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 3300,
        "wires": [
            [
                "e059ce2642a7b09a"
            ]
        ]
    },
    {
        "id": "d8f0c2dc72ca4e2d",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 3380,
        "wires": []
    },
    {
        "id": "e56192cae5c5a0ac",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "x": 1090,
        "y": 3300,
        "wires": [
            [
                "3b5ac51fca162260"
            ]
        ]
    },
    {
        "id": "89eaba9ad487d94f",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "parameters": [],
        "name": "Select Script",
        "func": "const response = {};\nconst tableName = msg.payload.value.tableName;\n\n  \nconst sql = `\n    SELECT s.ds_script DS_SCRIPT\n    from CMDK_SYNC_QUEUE s\n    where s.object_name = '${tableName}'\n`;\n    \nmsg.topic = sql;\nmsg.event = 'SQL-GET-TABLE-SCRIPT';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3300,
        "wires": [
            [
                "e56192cae5c5a0ac"
            ]
        ]
    },
    {
        "id": "8ddef1e34ebd720a",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 710,
        "y": 3300,
        "wires": [
            [
                "89eaba9ad487d94f"
            ]
        ]
    },
    {
        "id": "b69dfeef260432b0",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "g": "1d2ecf7c894813e7",
        "name": "Table Script - Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.TableScriptRequest",
        "groupid": "cmdk-smartlink-table-sync-script-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 480,
        "y": 3300,
        "wires": [
            [
                "8ddef1e34ebd720a"
            ]
        ]
    },
    {
        "id": "e0f43777eef90f73",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload.value",
        "action": "obj",
        "pretty": false,
        "x": 470,
        "y": 1360,
        "wires": [
            [
                "4f6f4b874253121f"
            ]
        ]
    },
    {
        "id": "4f6f4b874253121f",
        "type": "switch",
        "z": "8da70f00d8b8da70",
        "name": "event",
        "property": "payload.value.communicationTopic.eventType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 610,
        "y": 1360,
        "wires": [
            [
                "9028ecef1bec66c0"
            ],
            [
                "44c3b75dcd4893dc"
            ],
            [
                "39af30a188b387c5"
            ]
        ]
    },
    {
        "id": "568bf9300c1ff07b",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "name": "Table Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.TableRequest",
        "groupid": "cmdk-smartlink-table-crud-request",
        "connection": {},
        "broker": "0",
        "x": 250,
        "y": 1360,
        "wires": [
            [
                "e0f43777eef90f73"
            ]
        ]
    },
    {
        "id": "62591a9965bc0ac8",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Fetch table Script",
        "func": "// Get query parameters\nconst filter = msg.payload.value;\nconst page              = msg.payload.value.page || 0;\nconst pageSize          = msg.payload.value.limit || 10;\nconst orderDirection    = msg.payload.value.direction || 'ASC';\nconst isLike            = msg.payload.value.isLike;\nconst dsApplication     = msg.payload.value.applicationName;\nconst dsLayer           = msg.payload.value.layerName;\nconst dsTable           = msg.payload.value.dsTable;\nconst dsTitle           = msg.payload.value.dsTitle;\nconst nmTable           = msg.payload.value.tableName;\nconst shortName         = msg.payload.value.shortName;\nconst tableDescription =  msg.payload.value.tableDescription;\nconst titleDescription = msg.payload.value.titleDescription;\n\n \n// Add AND clauses\nlet restriction = '';\n  \nif (dsApplication) {\n    restriction += ` AND (DS_APLICACAO IS NULL OR lower(DS_APLICACAO) = lower('${dsApplication}')) `;\n}\n\nif (shortName) {\n    restriction +=` AND (DS_SHORTNAME IS NULL OR UPPER(DS_SHORTNAME) = UPPER('${shortName}')) `;\n    if (nmTable) {\n        restriction += ` AND NM_TABELA != UPPER('${nmTable}')`;\n    }\n}\n \nif (dsLayer) {\n    const decodeLayer = decodeURIComponent(dsLayer);\n    restriction += ` AND (('${decodeLayer}' = 'CORE' AND DS_LAYER IS NULL) OR ('${decodeLayer}' != 'CORE' AND DS_LAYER = '${decodeLayer}')) `;  \n}\n\nif (nmTable && shortName == null) {\n    const decodeTable = decodeURIComponent(nmTable);\n    if (isLike) {\n        restriction += ` AND (UPPER(NM_TABELA) LIKE UPPER('%${decodeTable}%'))`;\n    } else {\n        restriction += ` AND (UPPER(NM_TABELA) = UPPER('${decodeTable}')) `;    \n    }\n}\n \nif (tableDescription) {\n    const decodeExpressionDescription = decodeURIComponent(tableDescription);\n    restriction += ` AND CD_EXP_TABELA IN (SELECT * FROM `\n    if (isLike) {\n        restriction += ` (\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_custom\n        WHERE 1 = 1 and upper(ds_expressao) LIKE UPPER('%${decodeExpressionDescription}%')\n        UNION\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_idioma\n        WHERE 1 = 1 and upper(ds_expressao) LIKE UPPER('%${decodeExpressionDescription}%')\n        ))`;\n    } else {\n        restriction += ` (\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_custom\n        WHERE 1 = 1 and upper(ds_expressao) = UPPER('${decodeExpressionDescription}')\n        UNION\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_idioma\n        WHERE 1 = 1 and upper(ds_expressao) = UPPER('${decodeExpressionDescription}')\n        ))`;\n    }\n}\n \nif (titleDescription) {\n    const decodeTitleDescription = decodeURIComponent(titleDescription);\n    restriction += `AND CD_EXP_CADASTRO IN (SELECT * FROM `\n     if (isLike) {\n        restriction += ` (\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_custom\n        WHERE 1 = 1 and upper(ds_expressao) LIKE UPPER('%${decodeTitleDescription}%')\n        UNION\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_idioma\n        WHERE 1 = 1 and upper(ds_expressao) LIKE UPPER('%${decodeTitleDescription}%')\n        ))`;\n    } else {\n        restriction += ` (\n        SELECT CD_EXPRESSAO\n        FROM dic_expressao_custom\n        WHERE 1 = 1 and upper(ds_expressao) = UPPER('${decodeTitleDescription}')\n        UNION \n        SELECT CD_EXPRESSAO \n        FROM dic_expressao_idioma\n        WHERE 1 = 1 and upper(ds_expressao) = UPPER('${decodeTitleDescription}')\n        ))`;\n    }\n}\n// Add ORDER BY clauses\nlet orderBy = '';\n\nif (orderDirection) {\n    orderBy += `order by NM_TABELA ${orderDirection} `;\n}\nconst tableSql = `\n  SELECT NM_TABELA,\n        DS_SHORTNAME,\n        DS_CADASTRO,\n        CD_EXP_CADASTRO,\n        DS_TABELA,\n        CD_EXP_TABELA,\n        DS_APLICACAO,\n        DS_LAYER\n  FROM TABELA_SISTEMA\n  WHERE 1=1\n  ${restriction}\n  ${orderBy}\n`;\n// Build paging\nlet beginPage = (parseInt(page) * parseInt(pageSize)) + parseInt(1);\nconsole.log(beginPage);\nconst endPage = parseInt(beginPage) + parseInt(pageSize);\nconsole.log(endPage);\nconst paging = `SELECT * FROM (\n    SELECT PAGING.*, ROWNUM PAGING_RN FROM (${tableSql}) PAGING WHERE (ROWNUM < \n    ${endPage}\n))\nWHERE (PAGING_RN >= \n    ${beginPage}\n)`;\nmsg.topic = paging;\n \nmsg.event = 'SELECT-TABLE';\nmsg.headers = msg.payload.headers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "1abf63ce10740db4",
                "d0d5020d9e82a0e0"
            ]
        ]
    },
    {
        "id": "aa6664b727eaeb1d",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = {\n    ...response,\n    headers: msg.headers\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 100,
        "wires": [
            [
                "f032b7d6aadce293",
                "ee9fa7c5d1da4bc2"
            ]
        ]
    },
    {
        "id": "c9e9c51e866f7f43",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Database Debug ",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 200,
        "wires": []
    },
    {
        "id": "a56ba2c58b921c93",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Debug Incoming Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 200,
        "wires": []
    },
    {
        "id": "1abf63ce10740db4",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Debug Built SQL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 200,
        "wires": []
    },
    {
        "id": "f032b7d6aadce293",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Response Debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 200,
        "wires": []
    },
    {
        "id": "d7ccc95ae8e72a30",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Fetch DS_LAYER Script",
        "func": "const sql = `SELECT DISTINCT upper(DS_LAYER) DS_LAYER FROM tabela_sistema ORDER BY DS_LAYER`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-DS-LAYER';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 720,
        "wires": [
            [
                "c2bb9d519e7ab325",
                "ac2b0b65914f0853"
            ]
        ]
    },
    {
        "id": "b20e27dd0902df4c",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 720,
        "wires": [
            [
                "bd15de9577db47bd",
                "e496c565eed84171"
            ]
        ]
    },
    {
        "id": "d0d5020d9e82a0e0",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "name": "",
        "x": 910,
        "y": 100,
        "wires": [
            [
                "aa6664b727eaeb1d",
                "c9e9c51e866f7f43"
            ]
        ]
    },
    {
        "id": "c2bb9d519e7ab325",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "name": "",
        "x": 950,
        "y": 720,
        "wires": [
            [
                "b20e27dd0902df4c",
                "3847f1262943e9b8"
            ]
        ]
    },
    {
        "id": "b5b98599d9f31412",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Fetch table by Name Script",
        "func": "// Get query parameters\nconst filterParams            = msg.value;\nconst tableName = msg.payload.value.tableName;\n\nconst sql = `SELECT nvl(obter_expressao_idioma(t.cd_exp_tabela, 5), t.ds_tabela) as DS_TABELA,  t.nm_tabela, t.DS_SHORTNAME, t.CD_EXP_CADASTRO, t.CD_EXP_TABELA, t.NR_SEQ_MODULO, t.IE_CADASTRO_GERAL, t.IE_TEMPORARIA, t.DS_APLICACAO, t.IE_REGRA_ATRIBUTO, t.IE_CRIA_LOG_LOCAL, t.IE_REGRA_TABELA,\nt.DT_CRIACAO, t.DS_LAYER, t.DT_ATUALIZACAO, t.DT_ATUALIZACAO_NREC, t.NM_USUARIO, t.NM_USUARIO_NREC, t.IE_CALLSTACK, t.CD_EXP_TITULO, t.DS_SQL_LOOKUP\n        FROM TABELA_SISTEMA t where t.nm_tabela='${tableName}'`;\n\nmsg.topic = sql;\nmsg.event = 'SELECT-TABLE-NAME';\nmsg.headers = msg.payload.headers;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 400,
        "wires": [
            [
                "b1a3a64dee28693c",
                "ecfecb7f08ddb798"
            ]
        ]
    },
    {
        "id": "57e8f8e62d61ddd6",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Response table",
        "func": "const response = {};\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.error = msg.payload.error[0];\n}else{\n    response.status = 'SUCCESS';\n    response.rows = msg.payload.select[0].resultSet;\n}\nresponse.correlationId = msg.headers.kafka_correlationId;\nmsg.payload = { \n    ...response, \n    headers: msg.headers \n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 400,
        "wires": [
            [
                "b64971b9057a22b1",
                "fee2f7a63b22ea14"
            ]
        ]
    },
    {
        "id": "b1a3a64dee28693c",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Debug Built SQL 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 520,
        "wires": []
    },
    {
        "id": "b64971b9057a22b1",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Response Debug  1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 520,
        "wires": []
    },
    {
        "id": "d681ad16cf2047a1",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Debug Incoming Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 520,
        "wires": []
    },
    {
        "id": "0c88cf0a79e98a07",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Database Debug ",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 520,
        "wires": []
    },
    {
        "id": "ecfecb7f08ddb798",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "name": "",
        "x": 970,
        "y": 400,
        "wires": [
            [
                "57e8f8e62d61ddd6",
                "0c88cf0a79e98a07"
            ]
        ]
    },
    {
        "id": "a423e905e59039b5",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "name": "Table Reply",
        "topic": "spinal.cmdk.table.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1590,
        "y": 100,
        "wires": []
    },
    {
        "id": "ee9fa7c5d1da4bc2",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1370,
        "y": 100,
        "wires": [
            [
                "a423e905e59039b5"
            ]
        ]
    },
    {
        "id": "4378790c5b8b2883",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "62591a9965bc0ac8"
            ]
        ]
    },
    {
        "id": "8ca4350b8c153cbb",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "Call Procedure",
        "func": "const dataRecord = msg.value;\nconst tableName = dataRecord.tableName;\nconst username = dataRecord.createdBy;\n\nlet procedure = `call INSERT_CLEAN_TBL('${tableName}', '${username}')`\n\nmsg.topic = procedure;\nmsg.event = 'SQL-TABLE-ADD-PROC';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1420,
        "wires": [
            [
                "f7e13c8971923f72"
            ]
        ]
    },
    {
        "id": "54518c395340b019",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "parameters": [],
        "name": "ResponseTable",
        "func": "const response = {};\nconst dataRecordResult = \n    {\n        \"smartLinkResponse\": \"TABLE\",\n\t    \"tableName\": msg.value.tableName\n    };\nresponse.dataRecordResult   = dataRecordResult;\nif(msg.payload.error){\n    response.status = 'ERROR';\n    response.failureReason = msg.payload.error[0] || msg.payload.error.message;\n}\nelse{\n    response.status = 'SUCCESS';\n}\nmsg.payload = response;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1420,
        "wires": [
            [
                "57fd4c0cbfee0756"
            ]
        ]
    },
    {
        "id": "d28bcddacb15a133",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "name": "Table Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.GetRequest",
        "groupid": "cmdk-smartlink-table-crud-get-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 230,
        "y": 100,
        "wires": [
            [
                "4378790c5b8b2883",
                "a56ba2c58b921c93"
            ]
        ]
    },
    {
        "id": "e736f6b0d0828422",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload.value",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 400,
        "wires": [
            [
                "b5b98599d9f31412"
            ]
        ]
    },
    {
        "id": "1e8bd02fd613a734",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "name": "Table Name Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.info.GetRequest",
        "groupid": "cmdk-smartlink-table-crud-get-info-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "d681ad16cf2047a1",
                "e736f6b0d0828422"
            ]
        ]
    },
    {
        "id": "7d2b9db817c8cf34",
        "type": "spinal-consumer",
        "z": "8da70f00d8b8da70",
        "name": "Table Layer Request",
        "outOfRangeOffset": "earliest",
        "fromOffset": "latest",
        "topic": "spinal.cmdk.table.layers.GetRequest",
        "groupid": "cmdk-smartlink-table-crud-layer-request",
        "connection": {
            "name": "broker name",
            "host": "localhost:9092"
        },
        "broker": "0",
        "x": 330,
        "y": 720,
        "wires": [
            [
                "d7ccc95ae8e72a30"
            ]
        ]
    },
    {
        "id": "b2633e489c89dd99",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "name": "Table Name Reply",
        "topic": "spinal.cmdk.table.info.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1670,
        "y": 400,
        "wires": []
    },
    {
        "id": "fee2f7a63b22ea14",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1430,
        "y": 400,
        "wires": [
            [
                "b2633e489c89dd99"
            ]
        ]
    },
    {
        "id": "f3e0ddbf28c7c32c",
        "type": "spinal-producer",
        "z": "8da70f00d8b8da70",
        "name": "Get Reply",
        "topic": "spinal.cmdk.table.layers.GetReply",
        "advancedoptions": false,
        "acknowledge": "all",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "connection": {},
        "broker": "0",
        "x": 1560,
        "y": 720,
        "wires": []
    },
    {
        "id": "bd15de9577db47bd",
        "type": "json",
        "z": "8da70f00d8b8da70",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1370,
        "y": 720,
        "wires": [
            [
                "f3e0ddbf28c7c32c"
            ]
        ]
    },
    {
        "id": "ac2b0b65914f0853",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "fetch layer debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 820,
        "wires": []
    },
    {
        "id": "e496c565eed84171",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "Response layer debug ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 820,
        "wires": []
    },
    {
        "id": "3847f1262943e9b8",
        "type": "debug",
        "z": "8da70f00d8b8da70",
        "name": "debug 27",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 820,
        "wires": []
    },
    {
        "id": "44c3b75dcd4893dc",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "parameters": [],
        "name": "Core table check script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst scriptCountTable = `SELECT nvl(max(1), 0) CNT FROM TABELA_SISTEMA WHERE '${dataRecord.layerName}' = 'CORE' OR '${dataRecord.layerName}' IS NULL`;\n\nmsg.topic = scriptCountTable;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1640,
        "wires": [
            [
                "25e76456ef1df949"
            ]
        ]
    },
    {
        "id": "25e76456ef1df949",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "name": "",
        "x": 1050,
        "y": 1680,
        "wires": [
            [
                "4e226808c981c7e6"
            ]
        ]
    },
    {
        "id": "4e226808c981c7e6",
        "type": "switch",
        "z": "8da70f00d8b8da70",
        "name": "switch - Contains tables",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 1760,
        "wires": [
            [
                "0b078a11b7cd0d97"
            ],
            [
                "beb15122a109147f"
            ]
        ]
    },
    {
        "id": "0b078a11b7cd0d97",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2ae1f165a8cda0fd",
        "parameters": [],
        "name": "Core Table Check",
        "func": "msg.payload.error = {\n    message : 'CORE Table cannot be updated.'\n};\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1760,
        "wires": [
            [
                "51efcf6fc108001e"
            ]
        ]
    },
    {
        "id": "39af30a188b387c5",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Core table check script",
        "func": "const communicationTopic    = msg.payload.value.communicationTopic;\nconst dataRecord            = msg.payload.value.dataRecord;\n\nconst scriptCountTable = `SELECT nvl(max(1), 0) CNT FROM TABELA_SISTEMA WHERE '${dataRecord.layerName}' = 'CORE' OR '${dataRecord.layerName}' IS NULL`;\n\nmsg.topic = scriptCountTable;\nmsg.event = communicationTopic.eventType;\nmsg.value = dataRecord;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 2180,
        "wires": [
            [
                "63f4dafcd4e9812f"
            ]
        ]
    },
    {
        "id": "63f4dafcd4e9812f",
        "type": "tasy data access",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "",
        "x": 1010,
        "y": 2240,
        "wires": [
            [
                "915e847fa9dfa9ce"
            ]
        ]
    },
    {
        "id": "915e847fa9dfa9ce",
        "type": "switch",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "name": "switch - Contains tables",
        "property": "payload.select[0].resultSet[0].CNT",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 2320,
        "wires": [
            [
                "5ee909abca91a843"
            ],
            [
                "cfca064b1922412e"
            ]
        ]
    },
    {
        "id": "5ee909abca91a843",
        "type": "function",
        "z": "8da70f00d8b8da70",
        "g": "2d1d2a7788c33955",
        "parameters": [],
        "name": "Core Table Check",
        "func": "const dataRecord = msg.value;\n\nmsg.payload.error = {\n    message : 'CORE Table cannot be deleted.'\n};\n \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 2300,
        "wires": [
            [
                "6e9a17edec756d42"
            ]
        ]
    }
]